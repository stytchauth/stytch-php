<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\MagicLinks\Email;

final class InviteRequest
{
    /**
    * Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
    * perform operations on an Organization, so be sure to preserve this value. You may also use the
    * organization_slug or organization_external_id here as a convenience.
     */
    public string $organizationId;
    /** The email address of the Member. */
    public string $emailAddress;
    /**
    * The URL that the Member clicks from the invite Email Magic Link. This URL should be an endpoint in the
    * backend server that verifies
    *   the request by querying Stytch's authenticate endpoint and finishes the invite flow. If this value is
    * not passed, the default `invite_redirect_url`
    *   that you set in your Dashboard is used. If you have not set a default `invite_redirect_url`, an error
    * is returned.
     */
    public ?string $inviteRedirectURL = null;
    /** The `member_id` of the Member who sends the invite. */
    public ?string $invitedByMemberId = null;
    /** The name of the Member. */
    public ?string $name = null;
    /** An arbitrary JSON object for storing application-specific data or identity-provider-specific data. */
    public ?array $trustedMetadata = null;
    /**
    * An arbitrary JSON object of application-specific data. These fields can be edited directly by the
    *   frontend SDK, and should not be used to store critical information. See the
    * [Metadata resource](https://stytch.com/docs/b2b/api/metadata)
    *   for complete field behavior details.
     */
    public ?array $untrustedMetadata = null;
    /**
    * Use a custom template for invite emails. By default, it will use your default email template. The
    * template must be a template
    *   using our built-in customizations or a custom HTML email for Magic Links - Invite.
     */
    public ?string $inviteTemplateId = null;
    /**
    * Used to determine which language to use when sending the user this delivery method. Parameter is a
    * [IETF BCP 47 language tag](https://www.w3.org/International/articles/language-tags/), e.g. `"en"`.
    *
    * Currently supported languages are English (`"en"`), Spanish (`"es"`), French (`"fr"`) and Brazilian
    * Portuguese (`"pt-br"`); if no value is provided, the copy defaults to English.
    *
    * Request support for additional languages
    * [here](https://docs.google.com/forms/d/e/1FAIpQLScZSpAu_m2AmLXRT3F3kap-s_mcV6UTBitYn6CdyWP0-o7YjQ/viewform?usp=sf_link")!
     */
    public ?string $locale = null;
    /**
    * Roles to explicitly assign to this Member. See the
    * [RBAC guide](https://stytch.com/docs/b2b/guides/rbac/role-assignment)
    *    for more information about role assignment.
     */
    public ?array $roles = null;
    /**
    * The expiration time, in minutes, for an invite email. If not accepted within this time frame, the invite
    * will need to be resent. Defaults to 10080 (1 week) with a minimum of 5 and a maximum of 10080.
     */
    public ?int $inviteExpirationMinutes = null;

    public function __construct(
        string $organizationId,
        string $emailAddress,
        ?string $inviteRedirectURL = null,
        ?string $invitedByMemberId = null,
        ?string $name = null,
        ?array $trustedMetadata = null,
        ?array $untrustedMetadata = null,
        ?string $inviteTemplateId = null,
        ?string $locale = null,
        ?array $roles = null,
        ?int $inviteExpirationMinutes = null
    ) {
        $this->organizationId = $organizationId;
        $this->emailAddress = $emailAddress;
        $this->inviteRedirectURL = $inviteRedirectURL;
        $this->invitedByMemberId = $invitedByMemberId;
        $this->name = $name;
        $this->trustedMetadata = $trustedMetadata;
        $this->untrustedMetadata = $untrustedMetadata;
        $this->inviteTemplateId = $inviteTemplateId;
        $this->locale = $locale;
        $this->roles = $roles;
        $this->inviteExpirationMinutes = $inviteExpirationMinutes;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['organization_id'],
            $data['email_address'],
            $data['invite_redirect_url'] ?? null,
            $data['invited_by_member_id'] ?? null,
            $data['name'] ?? null,
            $data['trusted_metadata'] ?? null,
            $data['untrusted_metadata'] ?? null,
            $data['invite_template_id'] ?? null,
            $data['locale'] ?? null,
            $data['roles'] ?? null,
            $data['invite_expiration_minutes'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'organization_id' => $this->organizationId,
            'email_address' => $this->emailAddress,
            'invite_redirect_url' => $this->inviteRedirectURL,
            'invited_by_member_id' => $this->invitedByMemberId,
            'name' => $this->name,
            'trusted_metadata' => $this->trustedMetadata,
            'untrusted_metadata' => $this->untrustedMetadata,
            'invite_template_id' => $this->inviteTemplateId,
            'locale' => $this->locale,
            'roles' => $this->roles,
            'invite_expiration_minutes' => $this->inviteExpirationMinutes,
        ];
    }
}
