<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models;

enum AuthenticateRequestLocale: string
{
}

class Connection
{
    public string $organization_id;
    public string $connection_id;
    public string $external_organization_id;
    public string $external_connection_id;
    public string $display_name;
    public string $status;
    public array $external_connection_implicit_role_assignments;
    public array $external_group_implicit_role_assignments;

    public function __construct(
        string $organization_id,
        string $connection_id,
        string $external_organization_id,
        string $external_connection_id,
        string $display_name,
        string $status,
        array $external_connection_implicit_role_assignments,
        array $external_group_implicit_role_assignments
    ) {
        $this->organization_id = $organization_id;
        $this->connection_id = $connection_id;
        $this->external_organization_id = $external_organization_id;
        $this->external_connection_id = $external_connection_id;
        $this->display_name = $display_name;
        $this->status = $status;
        $this->external_connection_implicit_role_assignments = $external_connection_implicit_role_assignments;
        $this->external_group_implicit_role_assignments = $external_group_implicit_role_assignments;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['organization_id'],
            $data['connection_id'],
            $data['external_organization_id'],
            $data['external_connection_id'],
            $data['display_name'],
            $data['status'],
            $data['external_connection_implicit_role_assignments'],
            $data['external_group_implicit_role_assignments']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'organization_id' => $this->organization_id,
            'connection_id' => $this->connection_id,
            'external_organization_id' => $this->external_organization_id,
            'external_connection_id' => $this->external_connection_id,
            'display_name' => $this->display_name,
            'status' => $this->status,
            'external_connection_implicit_role_assignments' => $this->external_connection_implicit_role_assignments,
            'external_group_implicit_role_assignments' => $this->external_group_implicit_role_assignments,
        ];
    }
}

class ConnectionImplicitRoleAssignment
{
    public string $role_id;

    public function __construct(
        string $role_id
    ) {
        $this->role_id = $role_id;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['role_id']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'role_id' => $this->role_id,
        ];
    }
}

class GroupImplicitRoleAssignment
{
    public string $role_id;
    public string $group;

    public function __construct(
        string $role_id,
        string $group
    ) {
        $this->role_id = $role_id;
        $this->group = $group;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['role_id'],
            $data['group']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'role_id' => $this->role_id,
            'group' => $this->group,
        ];
    }
}

class OIDCConnection
{
    public string $organization_id;
    public string $connection_id;
    public string $status;
    public string $display_name;
    public string $redirect_url;
    public string $client_id;
    public string $client_secret;
    public string $issuer;
    public string $authorization_url;
    public string $token_url;
    public string $userinfo_url;
    public string $jwks_url;
    public string $identity_provider;
    public string $custom_scopes;
    public ?array $attribute_mapping;

    public function __construct(
        string $organization_id,
        string $connection_id,
        string $status,
        string $display_name,
        string $redirect_url,
        string $client_id,
        string $client_secret,
        string $issuer,
        string $authorization_url,
        string $token_url,
        string $userinfo_url,
        string $jwks_url,
        string $identity_provider,
        string $custom_scopes,
        ?array $attribute_mapping
    ) {
        $this->organization_id = $organization_id;
        $this->connection_id = $connection_id;
        $this->status = $status;
        $this->display_name = $display_name;
        $this->redirect_url = $redirect_url;
        $this->client_id = $client_id;
        $this->client_secret = $client_secret;
        $this->issuer = $issuer;
        $this->authorization_url = $authorization_url;
        $this->token_url = $token_url;
        $this->userinfo_url = $userinfo_url;
        $this->jwks_url = $jwks_url;
        $this->identity_provider = $identity_provider;
        $this->custom_scopes = $custom_scopes;
        $this->attribute_mapping = $attribute_mapping;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['organization_id'],
            $data['connection_id'],
            $data['status'],
            $data['display_name'],
            $data['redirect_url'],
            $data['client_id'],
            $data['client_secret'],
            $data['issuer'],
            $data['authorization_url'],
            $data['token_url'],
            $data['userinfo_url'],
            $data['jwks_url'],
            $data['identity_provider'],
            $data['custom_scopes'],
            $data['attribute_mapping'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'organization_id' => $this->organization_id,
            'connection_id' => $this->connection_id,
            'status' => $this->status,
            'display_name' => $this->display_name,
            'redirect_url' => $this->redirect_url,
            'client_id' => $this->client_id,
            'client_secret' => $this->client_secret,
            'issuer' => $this->issuer,
            'authorization_url' => $this->authorization_url,
            'token_url' => $this->token_url,
            'userinfo_url' => $this->userinfo_url,
            'jwks_url' => $this->jwks_url,
            'identity_provider' => $this->identity_provider,
            'custom_scopes' => $this->custom_scopes,
            'attribute_mapping' => $this->attribute_mapping,
        ];
    }
}

class SAMLConnection
{
    public string $organization_id;
    public string $connection_id;
    public string $status;
    public string $idp_entity_id;
    public string $display_name;
    public string $idp_sso_url;
    public string $acs_url;
    public string $audience_uri;
    public array $signing_certificates;
    public array $verification_certificates;
    public array $saml_connection_implicit_role_assignments;
    public array $saml_group_implicit_role_assignments;
    public string $alternative_audience_uri;
    public string $identity_provider;
    public string $nameid_format;
    public string $alternative_acs_url;
    public bool $idp_initiated_auth_disabled;
    public ?array $attribute_mapping;

    public function __construct(
        string $organization_id,
        string $connection_id,
        string $status,
        string $idp_entity_id,
        string $display_name,
        string $idp_sso_url,
        string $acs_url,
        string $audience_uri,
        array $signing_certificates,
        array $verification_certificates,
        array $saml_connection_implicit_role_assignments,
        array $saml_group_implicit_role_assignments,
        string $alternative_audience_uri,
        string $identity_provider,
        string $nameid_format,
        string $alternative_acs_url,
        bool $idp_initiated_auth_disabled,
        ?array $attribute_mapping
    ) {
        $this->organization_id = $organization_id;
        $this->connection_id = $connection_id;
        $this->status = $status;
        $this->idp_entity_id = $idp_entity_id;
        $this->display_name = $display_name;
        $this->idp_sso_url = $idp_sso_url;
        $this->acs_url = $acs_url;
        $this->audience_uri = $audience_uri;
        $this->signing_certificates = $signing_certificates;
        $this->verification_certificates = $verification_certificates;
        $this->saml_connection_implicit_role_assignments = $saml_connection_implicit_role_assignments;
        $this->saml_group_implicit_role_assignments = $saml_group_implicit_role_assignments;
        $this->alternative_audience_uri = $alternative_audience_uri;
        $this->identity_provider = $identity_provider;
        $this->nameid_format = $nameid_format;
        $this->alternative_acs_url = $alternative_acs_url;
        $this->idp_initiated_auth_disabled = $idp_initiated_auth_disabled;
        $this->attribute_mapping = $attribute_mapping;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['organization_id'],
            $data['connection_id'],
            $data['status'],
            $data['idp_entity_id'],
            $data['display_name'],
            $data['idp_sso_url'],
            $data['acs_url'],
            $data['audience_uri'],
            $data['signing_certificates'],
            $data['verification_certificates'],
            $data['saml_connection_implicit_role_assignments'],
            $data['saml_group_implicit_role_assignments'],
            $data['alternative_audience_uri'],
            $data['identity_provider'],
            $data['nameid_format'],
            $data['alternative_acs_url'],
            $data['idp_initiated_auth_disabled'],
            $data['attribute_mapping'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'organization_id' => $this->organization_id,
            'connection_id' => $this->connection_id,
            'status' => $this->status,
            'idp_entity_id' => $this->idp_entity_id,
            'display_name' => $this->display_name,
            'idp_sso_url' => $this->idp_sso_url,
            'acs_url' => $this->acs_url,
            'audience_uri' => $this->audience_uri,
            'signing_certificates' => $this->signing_certificates,
            'verification_certificates' => $this->verification_certificates,
            'saml_connection_implicit_role_assignments' => $this->saml_connection_implicit_role_assignments,
            'saml_group_implicit_role_assignments' => $this->saml_group_implicit_role_assignments,
            'alternative_audience_uri' => $this->alternative_audience_uri,
            'identity_provider' => $this->identity_provider,
            'nameid_format' => $this->nameid_format,
            'alternative_acs_url' => $this->alternative_acs_url,
            'idp_initiated_auth_disabled' => $this->idp_initiated_auth_disabled,
            'attribute_mapping' => $this->attribute_mapping,
        ];
    }
}

class SAMLConnectionImplicitRoleAssignment
{
    public string $role_id;

    public function __construct(
        string $role_id
    ) {
        $this->role_id = $role_id;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['role_id']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'role_id' => $this->role_id,
        ];
    }
}

class SAMLGroupImplicitRoleAssignment
{
    public string $role_id;
    public string $group;

    public function __construct(
        string $role_id,
        string $group
    ) {
        $this->role_id = $role_id;
        $this->group = $group;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['role_id'],
            $data['group']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'role_id' => $this->role_id,
            'group' => $this->group,
        ];
    }
}

class X509Certificate
{
    public string $certificate_id;
    public string $certificate;
    public string $issuer;
    public ?string $created_at;
    public ?string $expires_at;
    public ?string $updated_at;

    public function __construct(
        string $certificate_id,
        string $certificate,
        string $issuer,
        ?string $created_at,
        ?string $expires_at,
        ?string $updated_at
    ) {
        $this->certificate_id = $certificate_id;
        $this->certificate = $certificate;
        $this->issuer = $issuer;
        $this->created_at = $created_at;
        $this->expires_at = $expires_at;
        $this->updated_at = $updated_at;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['certificate_id'],
            $data['certificate'],
            $data['issuer'],
            $data['created_at'] ?? null,
            $data['expires_at'] ?? null,
            $data['updated_at'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'certificate_id' => $this->certificate_id,
            'certificate' => $this->certificate,
            'issuer' => $this->issuer,
            'created_at' => $this->created_at,
            'expires_at' => $this->expires_at,
            'updated_at' => $this->updated_at,
        ];
    }
}

class AuthenticateResponse
{
    public string $member_id;
    public string $organization_id;
    public Member $member;
    public string $session_token;
    public string $session_jwt;
    public bool $reset_session;
    public Organization $organization;
    public string $intermediate_session_token;
    public bool $member_authenticated;
    public ?MemberSession $member_session;
    public ?MfaRequired $mfa_required;
    public ?PrimaryRequired $primary_required;
    public ?DeviceInfo $member_device;

    public function __construct(
        string $member_id,
        string $organization_id,
        Member $member,
        string $session_token,
        string $session_jwt,
        bool $reset_session,
        Organization $organization,
        string $intermediate_session_token,
        bool $member_authenticated,
        ?MemberSession $member_session,
        ?MfaRequired $mfa_required,
        ?PrimaryRequired $primary_required,
        ?DeviceInfo $member_device
    ) {
        $this->member_id = $member_id;
        $this->organization_id = $organization_id;
        $this->member = $member;
        $this->session_token = $session_token;
        $this->session_jwt = $session_jwt;
        $this->reset_session = $reset_session;
        $this->organization = $organization;
        $this->intermediate_session_token = $intermediate_session_token;
        $this->member_authenticated = $member_authenticated;
        $this->member_session = $member_session;
        $this->mfa_required = $mfa_required;
        $this->primary_required = $primary_required;
        $this->member_device = $member_device;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['member_id'],
            $data['organization_id'],
            $data['member'],
            $data['session_token'],
            $data['session_jwt'],
            $data['reset_session'],
            $data['organization'],
            $data['intermediate_session_token'],
            $data['member_authenticated'],
            $data['member_session'] ?? null,
            $data['mfa_required'] ?? null,
            $data['primary_required'] ?? null,
            $data['member_device'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'member_id' => $this->member_id,
            'organization_id' => $this->organization_id,
            'member' => $this->member,
            'session_token' => $this->session_token,
            'session_jwt' => $this->session_jwt,
            'reset_session' => $this->reset_session,
            'organization' => $this->organization,
            'intermediate_session_token' => $this->intermediate_session_token,
            'member_authenticated' => $this->member_authenticated,
            'member_session' => $this->member_session,
            'mfa_required' => $this->mfa_required,
            'primary_required' => $this->primary_required,
            'member_device' => $this->member_device,
        ];
    }
}

class DeleteConnectionResponse
{
    public string $connection_id;

    public function __construct(
        string $connection_id
    ) {
        $this->connection_id = $connection_id;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['connection_id']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'connection_id' => $this->connection_id,
        ];
    }
}

class GetConnectionsResponse
{
    public array $saml_connections;
    public array $oidc_connections;
    public array $external_connections;

    public function __construct(
        array $saml_connections,
        array $oidc_connections,
        array $external_connections
    ) {
        $this->saml_connections = $saml_connections;
        $this->oidc_connections = $oidc_connections;
        $this->external_connections = $external_connections;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['saml_connections'],
            $data['oidc_connections'],
            $data['external_connections']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'saml_connections' => $this->saml_connections,
            'oidc_connections' => $this->oidc_connections,
            'external_connections' => $this->external_connections,
        ];
    }
}

class GetConnectionsRequestOptions
{
    public ?mixed $authorization;

    public function __construct(
        ?mixed $authorization
    ) {
        $this->authorization = $authorization;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['authorization'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'authorization' => $this->authorization,
        ];
    }
}

class DeleteConnectionRequestOptions
{
    public ?mixed $authorization;

    public function __construct(
        ?mixed $authorization
    ) {
        $this->authorization = $authorization;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['authorization'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'authorization' => $this->authorization,
        ];
    }
}

