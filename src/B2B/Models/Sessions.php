<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models;

enum ExchangeRequestLocale: string
{
}

class AuthorizationCheck
{
    public string $organization_id;
    public string $resource_id;
    public string $action;

    public function __construct(
        string $organization_id,
        string $resource_id,
        string $action
    ) {
        $this->organization_id = $organization_id;
        $this->resource_id = $resource_id;
        $this->action = $action;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['organization_id'],
            $data['resource_id'],
            $data['action']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'organization_id' => $this->organization_id,
            'resource_id' => $this->resource_id,
            'action' => $this->action,
        ];
    }
}

class AuthorizationVerdict
{
    public bool $authorized;
    public array $granting_roles;

    public function __construct(
        bool $authorized,
        array $granting_roles
    ) {
        $this->authorized = $authorized;
        $this->granting_roles = $granting_roles;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['authorized'],
            $data['granting_roles']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'authorized' => $this->authorized,
            'granting_roles' => $this->granting_roles,
        ];
    }
}

class MemberSession
{
    public string $member_session_id;
    public string $member_id;
    public string $started_at;
    public string $last_accessed_at;
    public string $expires_at;
    public array $authentication_factors;
    public string $organization_id;
    public array $roles;
    public string $organization_slug;
    public ?array $custom_claims;

    public function __construct(
        string $member_session_id,
        string $member_id,
        string $started_at,
        string $last_accessed_at,
        string $expires_at,
        array $authentication_factors,
        string $organization_id,
        array $roles,
        string $organization_slug,
        ?array $custom_claims
    ) {
        $this->member_session_id = $member_session_id;
        $this->member_id = $member_id;
        $this->started_at = $started_at;
        $this->last_accessed_at = $last_accessed_at;
        $this->expires_at = $expires_at;
        $this->authentication_factors = $authentication_factors;
        $this->organization_id = $organization_id;
        $this->roles = $roles;
        $this->organization_slug = $organization_slug;
        $this->custom_claims = $custom_claims;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['member_session_id'],
            $data['member_id'],
            $data['started_at'],
            $data['last_accessed_at'],
            $data['expires_at'],
            $data['authentication_factors'],
            $data['organization_id'],
            $data['roles'],
            $data['organization_slug'],
            $data['custom_claims'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'member_session_id' => $this->member_session_id,
            'member_id' => $this->member_id,
            'started_at' => $this->started_at,
            'last_accessed_at' => $this->last_accessed_at,
            'expires_at' => $this->expires_at,
            'authentication_factors' => $this->authentication_factors,
            'organization_id' => $this->organization_id,
            'roles' => $this->roles,
            'organization_slug' => $this->organization_slug,
            'custom_claims' => $this->custom_claims,
        ];
    }
}

class PrimaryRequired
{
    public array $allowed_auth_methods;

    public function __construct(
        array $allowed_auth_methods
    ) {
        $this->allowed_auth_methods = $allowed_auth_methods;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['allowed_auth_methods']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'allowed_auth_methods' => $this->allowed_auth_methods,
        ];
    }
}

class AttestResponse
{
    public string $member_id;
    public MemberSession $member_session;
    public string $session_token;
    public string $session_jwt;
    public Member $member;
    public Organization $organization;
    public ?DeviceInfo $member_device;

    public function __construct(
        string $member_id,
        MemberSession $member_session,
        string $session_token,
        string $session_jwt,
        Member $member,
        Organization $organization,
        ?DeviceInfo $member_device
    ) {
        $this->member_id = $member_id;
        $this->member_session = $member_session;
        $this->session_token = $session_token;
        $this->session_jwt = $session_jwt;
        $this->member = $member;
        $this->organization = $organization;
        $this->member_device = $member_device;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['member_id'],
            $data['member_session'],
            $data['session_token'],
            $data['session_jwt'],
            $data['member'],
            $data['organization'],
            $data['member_device'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'member_id' => $this->member_id,
            'member_session' => $this->member_session,
            'session_token' => $this->session_token,
            'session_jwt' => $this->session_jwt,
            'member' => $this->member,
            'organization' => $this->organization,
            'member_device' => $this->member_device,
        ];
    }
}

class AuthenticateResponse
{
    public MemberSession $member_session;
    public string $session_token;
    public string $session_jwt;
    public Member $member;
    public Organization $organization;
    public ?AuthorizationVerdict $verdict;

    public function __construct(
        MemberSession $member_session,
        string $session_token,
        string $session_jwt,
        Member $member,
        Organization $organization,
        ?AuthorizationVerdict $verdict
    ) {
        $this->member_session = $member_session;
        $this->session_token = $session_token;
        $this->session_jwt = $session_jwt;
        $this->member = $member;
        $this->organization = $organization;
        $this->verdict = $verdict;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['member_session'],
            $data['session_token'],
            $data['session_jwt'],
            $data['member'],
            $data['organization'],
            $data['verdict'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'member_session' => $this->member_session,
            'session_token' => $this->session_token,
            'session_jwt' => $this->session_jwt,
            'member' => $this->member,
            'organization' => $this->organization,
            'verdict' => $this->verdict,
        ];
    }
}

class ExchangeAccessTokenResponse
{
    public string $member_id;
    public string $session_token;
    public string $session_jwt;
    public Member $member;
    public Organization $organization;
    public ?MemberSession $member_session;
    public ?DeviceInfo $member_device;

    public function __construct(
        string $member_id,
        string $session_token,
        string $session_jwt,
        Member $member,
        Organization $organization,
        ?MemberSession $member_session,
        ?DeviceInfo $member_device
    ) {
        $this->member_id = $member_id;
        $this->session_token = $session_token;
        $this->session_jwt = $session_jwt;
        $this->member = $member;
        $this->organization = $organization;
        $this->member_session = $member_session;
        $this->member_device = $member_device;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['member_id'],
            $data['session_token'],
            $data['session_jwt'],
            $data['member'],
            $data['organization'],
            $data['member_session'] ?? null,
            $data['member_device'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'member_id' => $this->member_id,
            'session_token' => $this->session_token,
            'session_jwt' => $this->session_jwt,
            'member' => $this->member,
            'organization' => $this->organization,
            'member_session' => $this->member_session,
            'member_device' => $this->member_device,
        ];
    }
}

class ExchangeResponse
{
    public string $member_id;
    public string $session_token;
    public string $session_jwt;
    public Member $member;
    public Organization $organization;
    public bool $member_authenticated;
    public string $intermediate_session_token;
    public ?MemberSession $member_session;
    public ?MfaRequired $mfa_required;
    public ?PrimaryRequired $primary_required;
    public ?DeviceInfo $member_device;

    public function __construct(
        string $member_id,
        string $session_token,
        string $session_jwt,
        Member $member,
        Organization $organization,
        bool $member_authenticated,
        string $intermediate_session_token,
        ?MemberSession $member_session,
        ?MfaRequired $mfa_required,
        ?PrimaryRequired $primary_required,
        ?DeviceInfo $member_device
    ) {
        $this->member_id = $member_id;
        $this->session_token = $session_token;
        $this->session_jwt = $session_jwt;
        $this->member = $member;
        $this->organization = $organization;
        $this->member_authenticated = $member_authenticated;
        $this->intermediate_session_token = $intermediate_session_token;
        $this->member_session = $member_session;
        $this->mfa_required = $mfa_required;
        $this->primary_required = $primary_required;
        $this->member_device = $member_device;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['member_id'],
            $data['session_token'],
            $data['session_jwt'],
            $data['member'],
            $data['organization'],
            $data['member_authenticated'],
            $data['intermediate_session_token'],
            $data['member_session'] ?? null,
            $data['mfa_required'] ?? null,
            $data['primary_required'] ?? null,
            $data['member_device'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'member_id' => $this->member_id,
            'session_token' => $this->session_token,
            'session_jwt' => $this->session_jwt,
            'member' => $this->member,
            'organization' => $this->organization,
            'member_authenticated' => $this->member_authenticated,
            'intermediate_session_token' => $this->intermediate_session_token,
            'member_session' => $this->member_session,
            'mfa_required' => $this->mfa_required,
            'primary_required' => $this->primary_required,
            'member_device' => $this->member_device,
        ];
    }
}

class GetJWKSResponse
{
    public array $keys;

    public function __construct(
        array $keys
    ) {
        $this->keys = $keys;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['keys']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'keys' => $this->keys,
        ];
    }
}

class GetResponse
{
    public array $member_sessions;

    public function __construct(
        array $member_sessions
    ) {
        $this->member_sessions = $member_sessions;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['member_sessions']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'member_sessions' => $this->member_sessions,
        ];
    }
}

class MigrateResponse
{
    public string $member_id;
    public string $session_token;
    public string $session_jwt;
    public Member $member;
    public Organization $organization;
    public ?MemberSession $member_session;

    public function __construct(
        string $member_id,
        string $session_token,
        string $session_jwt,
        Member $member,
        Organization $organization,
        ?MemberSession $member_session
    ) {
        $this->member_id = $member_id;
        $this->session_token = $session_token;
        $this->session_jwt = $session_jwt;
        $this->member = $member;
        $this->organization = $organization;
        $this->member_session = $member_session;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['member_id'],
            $data['session_token'],
            $data['session_jwt'],
            $data['member'],
            $data['organization'],
            $data['member_session'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'member_id' => $this->member_id,
            'session_token' => $this->session_token,
            'session_jwt' => $this->session_jwt,
            'member' => $this->member,
            'organization' => $this->organization,
            'member_session' => $this->member_session,
        ];
    }
}

class RevokeResponse
{

    public function __construct(
    ) {
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
        ];
    }
}

class RevokeRequestOptions
{
    public ?mixed $authorization;

    public function __construct(
        ?mixed $authorization
    ) {
        $this->authorization = $authorization;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['authorization'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'authorization' => $this->authorization,
        ];
    }
}

