<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\Sessions;

class AttestRequest
{
    /** The ID of the trusted auth token profile to use for attestation. */
    public string $profileId;
    /** The trusted auth token to authenticate. */
    public string $token;
    /** The organization ID that the session should be authenticated in. */
    public ?string $organizationId = null;
    /**
    * Set the session lifetime to be this many minutes from now. This will start a new session if one doesn't
    * already exist,
    *   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
    * `session_jwt` will have a fixed lifetime of
    *   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
    *
    *   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
    *
    *   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
    * extend the session this many minutes.
    *
    *   If the `session_duration_minutes` parameter is not specified, a Stytch session will be created with a
    * 60 minute duration. If you don't want
    *   to use the Stytch session product, you can ignore the session fields in the response.
     */
    public ?int $sessionDurationMinutes = null;
    /**
    * Add a custom claims map to the Session being authenticated. Claims are only created if a Session is
    * initialized by providing a value in
    *   `session_duration_minutes`. Claims will be included on the Session object and in the JWT. To update a
    * key in an existing Session, supply a new value. To
    *   delete a key, supply a null value. Custom claims made with reserved claims (`iss`, `sub`, `aud`,
    * `exp`, `nbf`, `iat`, `jti`) will be ignored.
    *   Total custom claims size cannot exceed four kilobytes.
     */
    public ?array $sessionCustomClaims = null;
    /** The `session_token` for the session that you wish to add the trusted auth token authentication factor to. */
    public ?string $sessionToken = null;
    /** The `session_jwt` for the session that you wish to add the trusted auth token authentication factor to. */
    public ?string $sessionJwt = null;
    /**
    * If the `telemetry_id` is passed, as part of this request, Stytch will call the
    * [Fingerprint Lookup API](https://stytch.com/docs/fraud/api/fingerprint-lookup) and store the associated
    * fingerprints and IPGEO information for the Member. See the User Device History guide (coming soon) for
    * more information. Your workspace must be enabled for Device Fingerprinting to use this feature.
     */
    public ?string $telemetryId = null;

    public function __construct(
        string $profileId,
        string $token,
        ?string $organizationId = null,
        ?int $sessionDurationMinutes = null,
        ?array $sessionCustomClaims = null,
        ?string $sessionToken = null,
        ?string $sessionJwt = null,
        ?string $telemetryId = null
    ) {
        $this->profileId = $profileId;
        $this->token = $token;
        $this->organizationId = $organizationId;
        $this->sessionDurationMinutes = $sessionDurationMinutes;
        $this->sessionCustomClaims = $sessionCustomClaims;
        $this->sessionToken = $sessionToken;
        $this->sessionJwt = $sessionJwt;
        $this->telemetryId = $telemetryId;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['profile_id'],
            $data['token'],
            $data['organization_id'] ?? null,
            $data['session_duration_minutes'] ?? null,
            $data['session_custom_claims'] ?? null,
            $data['session_token'] ?? null,
            $data['session_jwt'] ?? null,
            $data['telemetry_id'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'profile_id' => $this->profileId,
            'token' => $this->token,
            'organization_id' => $this->organizationId,
            'session_duration_minutes' => $this->sessionDurationMinutes,
            'session_custom_claims' => $this->sessionCustomClaims,
            'session_token' => $this->sessionToken,
            'session_jwt' => $this->sessionJwt,
            'telemetry_id' => $this->telemetryId,
        ];
    }
}
