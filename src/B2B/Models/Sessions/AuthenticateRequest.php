<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\Sessions;


final class AuthenticateRequest
{
    /** A secret token for a given Stytch Session. */
    public ?string $sessionToken = null;
    /**
    * Set the session lifetime to be this many minutes from now. This will start a new session if one doesn't
    * already exist,
    *   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
    * `session_jwt` will have a fixed lifetime of
    *   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
    * 
    *   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
    * 
    *   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
    * extend the session this many minutes.
    * 
    *   If the `session_duration_minutes` parameter is not specified, a Stytch session will be created with a
    * 60 minute duration. If you don't want
    *   to use the Stytch session product, you can ignore the session fields in the response.
     */
    public ?int $sessionDurationMinutes = null;
    /** The JSON Web Token (JWT) for a given Stytch Session. */
    public ?string $sessionJwt = null;
    /**
    * Add a custom claims map to the Session being authenticated. Claims are only created if a Session is
    * initialized by providing a value in
    *   `session_duration_minutes`. Claims will be included on the Session object and in the JWT. To update a
    * key in an existing Session, supply a new value. To
    *   delete a key, supply a null value. Custom claims made with reserved claims (`iss`, `sub`, `aud`,
    * `exp`, `nbf`, `iat`, `jti`) will be ignored.
    *   Total custom claims size cannot exceed four kilobytes.
     */
    public ?array $sessionCustomClaims = null;
    /**
    * If an `authorization_check` object is passed in, this endpoint will also check if the Member is
    *   authorized to perform the given action on the given Resource in the specified Organization. A Member
    * is authorized if
    *   their Member Session contains a Role, assigned
    *   [explicitly or implicitly](https://stytch.com/docs/b2b/guides/rbac/role-assignment), with adequate
    * permissions.
    *   In addition, the `organization_id` passed in the authorization check must match the Member's
    * Organization.
    * 
    *   The Roles on the Member Session may differ from the Roles you see on the Member object - Roles that
    * are implicitly
    *   assigned by SSO connection or SSO group will only be valid for a Member Session if there is at least
    * one authentication
    *   factor on the Member Session from the specified SSO connection.
    * 
    *   If the Member is not authorized to perform the specified action on the specified Resource, or if the
    *   `organization_id` does not match the Member's Organization, a 403 error will be thrown.
    *   Otherwise, the response will contain a list of Roles that satisfied the authorization check.
     */
    public ?AuthorizationCheck $authorizationCheck = null;

    public function __construct(
        ?string $sessionToken = null,
        ?int $sessionDurationMinutes = null,
        ?string $sessionJwt = null,
        ?array $sessionCustomClaims = null,
        ?AuthorizationCheck $authorizationCheck = null
    ) {
        $this->sessionToken = $sessionToken;
        $this->sessionDurationMinutes = $sessionDurationMinutes;
        $this->sessionJwt = $sessionJwt;
        $this->sessionCustomClaims = $sessionCustomClaims;
        $this->authorizationCheck = $authorizationCheck;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['session_token'] ?? null,
            $data['session_duration_minutes'] ?? null,
            $data['session_jwt'] ?? null,
            $data['session_custom_claims'] ?? null,
            $data['authorization_check'] !== null ? AuthorizationCheck::fromArray($data['authorization_check']) : null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'session_token' => $this->sessionToken,
            'session_duration_minutes' => $this->sessionDurationMinutes,
            'session_jwt' => $this->sessionJwt,
            'session_custom_claims' => $this->sessionCustomClaims,
            'authorization_check' => $this->authorizationCheck,
        ];
    }
}