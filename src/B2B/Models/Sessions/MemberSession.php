<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\Sessions;

final class MemberSession
{
    /** Globally unique UUID that identifies a specific Session. */
    public string $memberSessionId;
    /** Globally unique UUID that identifies a specific Member. */
    public string $memberId;
    /**
    * The timestamp when the Session was created. Values conform to the RFC 3339 standard and are expressed in
    * UTC, e.g. `2021-12-29T12:33:09Z`.
     */
    public string $startedAt;
    /**
    * The timestamp when the Session was last accessed. Values conform to the RFC 3339 standard and are
    * expressed in UTC, e.g. `2021-12-29T12:33:09Z`.
     */
    public string $lastAccessedAt;
    /**
    * The timestamp when the Session expires. Values conform to the RFC 3339 standard and are expressed in
    * UTC, e.g. `2021-12-29T12:33:09Z`.
     */
    public string $expiresAt;
    /** An array of different authentication factors that comprise a Session. */
    public array $authenticationFactors;
    /**
    * Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
    * perform operations on an Organization, so be sure to preserve this value.
     */
    public string $organizationId;
    public array $roles;
    /**
    * The unique URL slug of the Organization. The slug only accepts alphanumeric characters and the following
    * reserved characters: `-` `.` `_` `~`. Must be between 2 and 128 characters in length. Wherever an
    * organization_id is expected in a path or request parameter, you may also use the organization_slug as a
    * convenience.
     */
    public string $organizationSlug;
    /**
    * The custom claims map for a Session. Claims can be added to a session during a Sessions authenticate
    * call.
     */
    public ?array $customClaims = null;

    public function __construct(
        string $memberSessionId,
        string $memberId,
        string $startedAt,
        string $lastAccessedAt,
        string $expiresAt,
        array $authenticationFactors,
        string $organizationId,
        array $roles,
        string $organizationSlug,
        ?array $customClaims = null
    ) {
        $this->memberSessionId = $memberSessionId;
        $this->memberId = $memberId;
        $this->startedAt = $startedAt;
        $this->lastAccessedAt = $lastAccessedAt;
        $this->expiresAt = $expiresAt;
        $this->authenticationFactors = $authenticationFactors;
        $this->organizationId = $organizationId;
        $this->roles = $roles;
        $this->organizationSlug = $organizationSlug;
        $this->customClaims = $customClaims;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['member_session_id'],
            $data['member_id'],
            $data['started_at'],
            $data['last_accessed_at'],
            $data['expires_at'],
            isset($data['authentication_factors']) ? array_map(fn ($item) => \Stytch\Consumer\Models\Sessions\AuthenticationFactor::fromArray($item), $data['authentication_factors']) : [],
            $data['organization_id'],
            $data['roles'],
            $data['organization_slug'],
            $data['custom_claims'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'member_session_id' => $this->memberSessionId,
            'member_id' => $this->memberId,
            'started_at' => $this->startedAt,
            'last_accessed_at' => $this->lastAccessedAt,
            'expires_at' => $this->expiresAt,
            'authentication_factors' => $this->authenticationFactors,
            'organization_id' => $this->organizationId,
            'roles' => $this->roles,
            'organization_slug' => $this->organizationSlug,
            'custom_claims' => $this->customClaims,
        ];
    }
}
