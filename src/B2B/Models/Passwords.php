<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models;

enum AuthenticateRequestLocale: string
{
}

enum MigrateRequestHashType: string
{
}

class LudsFeedback
{
    public bool $has_lower_case;
    public bool $has_upper_case;
    public bool $has_digit;
    public bool $has_symbol;
    public int $missing_complexity;
    public int $missing_characters;

    public function __construct(
        bool $has_lower_case,
        bool $has_upper_case,
        bool $has_digit,
        bool $has_symbol,
        int $missing_complexity,
        int $missing_characters
    ) {
        $this->has_lower_case = $has_lower_case;
        $this->has_upper_case = $has_upper_case;
        $this->has_digit = $has_digit;
        $this->has_symbol = $has_symbol;
        $this->missing_complexity = $missing_complexity;
        $this->missing_characters = $missing_characters;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['has_lower_case'],
            $data['has_upper_case'],
            $data['has_digit'],
            $data['has_symbol'],
            $data['missing_complexity'],
            $data['missing_characters']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'has_lower_case' => $this->has_lower_case,
            'has_upper_case' => $this->has_upper_case,
            'has_digit' => $this->has_digit,
            'has_symbol' => $this->has_symbol,
            'missing_complexity' => $this->missing_complexity,
            'missing_characters' => $this->missing_characters,
        ];
    }
}

class ZxcvbnFeedback
{
    public string $warning;
    public array $suggestions;

    public function __construct(
        string $warning,
        array $suggestions
    ) {
        $this->warning = $warning;
        $this->suggestions = $suggestions;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['warning'],
            $data['suggestions']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'warning' => $this->warning,
            'suggestions' => $this->suggestions,
        ];
    }
}

class AuthenticateResponse
{
    public string $member_id;
    public string $organization_id;
    public Member $member;
    public string $session_token;
    public string $session_jwt;
    public Organization $organization;
    public string $intermediate_session_token;
    public bool $member_authenticated;
    public ?MemberSession $member_session;
    public ?MfaRequired $mfa_required;
    public ?PrimaryRequired $primary_required;
    public ?DeviceInfo $member_device;

    public function __construct(
        string $member_id,
        string $organization_id,
        Member $member,
        string $session_token,
        string $session_jwt,
        Organization $organization,
        string $intermediate_session_token,
        bool $member_authenticated,
        ?MemberSession $member_session,
        ?MfaRequired $mfa_required,
        ?PrimaryRequired $primary_required,
        ?DeviceInfo $member_device
    ) {
        $this->member_id = $member_id;
        $this->organization_id = $organization_id;
        $this->member = $member;
        $this->session_token = $session_token;
        $this->session_jwt = $session_jwt;
        $this->organization = $organization;
        $this->intermediate_session_token = $intermediate_session_token;
        $this->member_authenticated = $member_authenticated;
        $this->member_session = $member_session;
        $this->mfa_required = $mfa_required;
        $this->primary_required = $primary_required;
        $this->member_device = $member_device;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['member_id'],
            $data['organization_id'],
            $data['member'],
            $data['session_token'],
            $data['session_jwt'],
            $data['organization'],
            $data['intermediate_session_token'],
            $data['member_authenticated'],
            $data['member_session'] ?? null,
            $data['mfa_required'] ?? null,
            $data['primary_required'] ?? null,
            $data['member_device'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'member_id' => $this->member_id,
            'organization_id' => $this->organization_id,
            'member' => $this->member,
            'session_token' => $this->session_token,
            'session_jwt' => $this->session_jwt,
            'organization' => $this->organization,
            'intermediate_session_token' => $this->intermediate_session_token,
            'member_authenticated' => $this->member_authenticated,
            'member_session' => $this->member_session,
            'mfa_required' => $this->mfa_required,
            'primary_required' => $this->primary_required,
            'member_device' => $this->member_device,
        ];
    }
}

class MigrateResponse
{
    public string $member_id;
    public bool $member_created;
    public Member $member;
    public Organization $organization;

    public function __construct(
        string $member_id,
        bool $member_created,
        Member $member,
        Organization $organization
    ) {
        $this->member_id = $member_id;
        $this->member_created = $member_created;
        $this->member = $member;
        $this->organization = $organization;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['member_id'],
            $data['member_created'],
            $data['member'],
            $data['organization']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'member_id' => $this->member_id,
            'member_created' => $this->member_created,
            'member' => $this->member,
            'organization' => $this->organization,
        ];
    }
}

class StrengthCheckResponse
{
    public bool $valid_password;
    public int $score;
    public bool $breached_password;
    public string $strength_policy;
    public bool $breach_detection_on_create;
    public ?LudsFeedback $luds_feedback;
    public ?ZxcvbnFeedback $zxcvbn_feedback;

    public function __construct(
        bool $valid_password,
        int $score,
        bool $breached_password,
        string $strength_policy,
        bool $breach_detection_on_create,
        ?LudsFeedback $luds_feedback,
        ?ZxcvbnFeedback $zxcvbn_feedback
    ) {
        $this->valid_password = $valid_password;
        $this->score = $score;
        $this->breached_password = $breached_password;
        $this->strength_policy = $strength_policy;
        $this->breach_detection_on_create = $breach_detection_on_create;
        $this->luds_feedback = $luds_feedback;
        $this->zxcvbn_feedback = $zxcvbn_feedback;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['valid_password'],
            $data['score'],
            $data['breached_password'],
            $data['strength_policy'],
            $data['breach_detection_on_create'],
            $data['luds_feedback'] ?? null,
            $data['zxcvbn_feedback'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'valid_password' => $this->valid_password,
            'score' => $this->score,
            'breached_password' => $this->breached_password,
            'strength_policy' => $this->strength_policy,
            'breach_detection_on_create' => $this->breach_detection_on_create,
            'luds_feedback' => $this->luds_feedback,
            'zxcvbn_feedback' => $this->zxcvbn_feedback,
        ];
    }
}

