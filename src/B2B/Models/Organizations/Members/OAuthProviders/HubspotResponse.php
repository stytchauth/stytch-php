<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\Organizations\Members\OAuthProviders;


final class HubspotResponse
{
    /**
    * Globally unique UUID that is returned with every API call. This value is important to log for debugging
    * purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
     */
    public string $requestId;
    /**
    * Denotes the OAuth identity provider that the user has authenticated with, e.g. Google, Microsoft, GitHub
    * etc.
     */
    public string $providerType;
    /** A list of tokens the member is registered with. */
    public array $registrations;
    /**
    * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
    * 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
     */
    public int $statusCode;

    public function __construct(
        string $requestId,
        string $providerType,
        array $registrations,
        int $statusCode
    ) {
        $this->requestId = $requestId;
        $this->providerType = $providerType;
        $this->registrations = $registrations;
        $this->statusCode = $statusCode;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['request_id'],
            $data['provider_type'],
            isset($data['registrations']) ? array_map(fn($item) => \Stytch\B2B\Models\Organizations\HubspotProviderInfo::fromArray($item), $data['registrations']) : [],
            $data['status_code']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'request_id' => $this->requestId,
            'provider_type' => $this->providerType,
            'registrations' => $this->registrations,
            'status_code' => $this->statusCode,
        ];
    }
}