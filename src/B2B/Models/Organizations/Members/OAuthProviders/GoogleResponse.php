<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\Organizations\Members\OAuthProviders;


final class GoogleResponse
{
    /**
    * Globally unique UUID that is returned with every API call. This value is important to log for debugging
    * purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
     */
    public string $requestId;
    /**
    * Denotes the OAuth identity provider that the user has authenticated with, e.g. Google, Microsoft, GitHub
    * etc.
     */
    public string $providerType;
    /**
    * The unique identifier for the User within a given OAuth provider. Also commonly called the `sub` or
    * "Subject field" in OAuth protocols.
     */
    public string $providerSubject;
    /**
    * The `id_token` returned by the OAuth provider. ID Tokens are JWTs that contain structured information
    * about a user. The exact content of each ID Token varies from provider to provider. ID Tokens are
    * returned from OAuth providers that conform to the [OpenID Connect](https://openid.net/foundation/)
    * specification, which is based on OAuth.
     */
    public string $idToken;
    /**
    * The OAuth scopes included for a given provider. See each provider's section above to see which scopes
    * are included by default and how to add custom scopes.
     */
    public array $scopes;
    /**
    * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
    * 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
     */
    public int $statusCode;
    /** The `access_token` that you may use to access the User's data in the provider's API. */
    public ?string $accessToken = null;
    /** The number of seconds until the access token expires. */
    public ?int $accessTokenExpiresIn = null;
    /**
    * The `refresh_token` that you may use to obtain a new `access_token` for the User within the provider's
    * API.
     */
    public ?string $refreshToken = null;

    public function __construct(
        string $requestId,
        string $providerType,
        string $providerSubject,
        string $idToken,
        array $scopes,
        int $statusCode,
        ?string $accessToken = null,
        ?int $accessTokenExpiresIn = null,
        ?string $refreshToken = null
    ) {
        $this->requestId = $requestId;
        $this->providerType = $providerType;
        $this->providerSubject = $providerSubject;
        $this->idToken = $idToken;
        $this->scopes = $scopes;
        $this->statusCode = $statusCode;
        $this->accessToken = $accessToken;
        $this->accessTokenExpiresIn = $accessTokenExpiresIn;
        $this->refreshToken = $refreshToken;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['request_id'],
            $data['provider_type'],
            $data['provider_subject'],
            $data['id_token'],
            $data['scopes'],
            $data['status_code'],
            $data['access_token'] ?? null,
            $data['access_token_expires_in'] ?? null,
            $data['refresh_token'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'request_id' => $this->requestId,
            'provider_type' => $this->providerType,
            'provider_subject' => $this->providerSubject,
            'id_token' => $this->idToken,
            'scopes' => $this->scopes,
            'status_code' => $this->statusCode,
            'access_token' => $this->accessToken,
            'access_token_expires_in' => $this->accessTokenExpiresIn,
            'refresh_token' => $this->refreshToken,
        ];
    }
}