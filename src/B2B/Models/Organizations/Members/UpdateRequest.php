<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\Organizations\Members;

class UpdateRequest
{
    /**
    * Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
    * perform operations on an Organization, so be sure to preserve this value. You may also use the
    * organization_slug or organization_external_id here as a convenience.
     */
    public string $organizationId;
    /**
    * Globally unique UUID that identifies a specific Member. The `member_id` is critical to perform
    * operations on a Member, so be sure to preserve this value. You may use an external_id here if one is set
    * for the member.
     */
    public string $memberId;
    /**
    * The name of the Member.
    *
    * If this field is provided and a session header is passed into the request, the Member Session must have
    * permission to perform the `update.info.name` action on the `stytch.member` Resource. Alternatively, if
    * the Member Session matches the Member associated with the `member_id` passed in the request, the
    * authorization check will also allow a Member Session that has permission to perform the
    * `update.info.name` action on the `stytch.self` Resource.
     */
    public ?string $name = null;
    /**
    * An arbitrary JSON object for storing application-specific data or identity-provider-specific data.
    *           If a session header is passed into the request, this field may **not** be passed into the
    * request. You cannot
    *           update trusted metadata when acting as a Member.
     */
    public ?array $trustedMetadata = null;
    /**
    * An arbitrary JSON object of application-specific data. These fields can be edited directly by the
    *   frontend SDK, and should not be used to store critical information. See the
    * [Metadata resource](https://stytch.com/docs/b2b/api/metadata)
    *   for complete field behavior details.
    *
    * If this field is provided and a session header is passed into the request, the Member Session must have
    * permission to perform the `update.info.untrusted-metadata` action on the `stytch.member` Resource.
    * Alternatively, if the Member Session matches the Member associated with the `member_id` passed in the
    * request, the authorization check will also allow a Member Session that has permission to perform the
    * `update.info.untrusted-metadata` action on the `stytch.self` Resource.
     */
    public ?array $untrustedMetadata = null;
    /**
    * Identifies the Member as a break glass user - someone who has permissions to authenticate into an
    * Organization by bypassing the Organization's settings. A break glass account is typically used for
    * emergency purposes to gain access outside of normal authentication procedures. Refer to the
    * [Organization object](organization-object) and its `auth_methods` and `allowed_auth_methods` fields for
    * more details.
    *
    * If this field is provided and a session header is passed into the request, the Member Session must have
    * permission to perform the `update.settings.is-breakglass` action on the `stytch.member` Resource.
     */
    public ?bool $isBreakglass = null;
    /**
    * Sets the Member's phone number. Throws an error if the Member already has a phone number. To change the
    * Member's phone number, use the
    * [Delete member phone number endpoint](https://stytch.com/docs/b2b/api/delete-member-mfa-phone-number) to
    * delete the Member's existing phone number first.
    *
    * If this field is provided and a session header is passed into the request, the Member Session must have
    * permission to perform the `update.info.mfa-phone` action on the `stytch.member` Resource. Alternatively,
    * if the Member Session matches the Member associated with the `member_id` passed in the request, the
    * authorization check will also allow a Member Session that has permission to perform the
    * `update.info.mfa-phone` action on the `stytch.self` Resource.
     */
    public ?string $mfaPhoneNumber = null;
    /**
    * Sets whether the Member is enrolled in MFA. If true, the Member must complete an MFA step whenever they
    * wish to log in to their Organization. If false, the Member only needs to complete an MFA step if the
    * Organization's MFA policy is set to `REQUIRED_FOR_ALL`.
    *
    * If this field is provided and a session header is passed into the request, the Member Session must have
    * permission to perform the `update.settings.mfa-enrolled` action on the `stytch.member` Resource.
    * Alternatively, if the Member Session matches the Member associated with the `member_id` passed in the
    * request, the authorization check will also allow a Member Session that has permission to perform the
    * `update.settings.mfa-enrolled` action on the `stytch.self` Resource.
     */
    public ?bool $mfaEnrolled = null;
    /**
    * Roles to explicitly assign to this Member.
    *  Will completely replace any existing explicitly assigned roles. See the
    *  [RBAC guide](https://stytch.com/docs/b2b/guides/rbac/role-assignment) for more information about role
    * assignment.
    *
    *    If a Role is removed from a Member, and the Member is also implicitly assigned this Role from an SSO
    * connection
    *    or an SSO group, we will by default revoke any existing sessions for the Member that contain any SSO
    *    authentication factors with the affected connection ID. You can preserve these sessions by passing in
    * the
    *    `preserve_existing_sessions` parameter with a value of `true`.
    *
    * If this field is provided and a session header is passed into the request, the Member Session must have
    * permission to perform the `update.settings.roles` action on the `stytch.member` Resource.
     */
    public ?array $roles = null;
    /**
    * Whether to preserve existing sessions when explicit Roles that are revoked are also implicitly assigned
    *   by SSO connection or SSO group. Defaults to `false` - that is, existing Member Sessions that contain
    * SSO
    *   authentication factors with the affected SSO connection IDs will be revoked.
     */
    public ?bool $preserveExistingSessions = null;
    /**
    * The Member's default MFA method. This value is used to determine which secondary MFA method to use in
    * the case of multiple methods registered for a Member. The current possible values are `sms_otp` and
    * `totp`.
    *
    * If this field is provided and a session header is passed into the request, the Member Session must have
    * permission to perform the `update.settings.default-mfa-method` action on the `stytch.member` Resource.
    * Alternatively, if the Member Session matches the Member associated with the `member_id` passed in the
    * request, the authorization check will also allow a Member Session that has permission to perform the
    * `update.settings.default-mfa-method` action on the `stytch.self` Resource.
     */
    public ?string $defaultMfaMethod = null;
    /**
    * Updates the Member's `email_address`, if provided.
    *         If a Member's email address is changed, other Members in the same Organization cannot use the
    * old email address, although the Member may update back to their old email address.
    *         A Member's email address can only be useable again by other Members if the Member is deleted.
    *
    * If this field is provided and a session header is passed into the request, the Member Session must have
    * permission to perform the `update.info.email` action on the `stytch.member` Resource. Members cannot
    * update their own email address.
     */
    public ?string $emailAddress = null;
    /**
    * An identifier that can be used in API calls wherever a member_id is expected. This is a string
    * consisting of alphanumeric, `.`, `_`, `-`, or `|` characters with a maximum length of 128 characters.
    * External IDs must be unique within an organization, but may be reused across different organizations in
    * the same project.
     */
    public ?string $externalId = null;
    /**
    * If `unlink_email` is `true` and an `email_address` is provided, the Member's previous email will be
    * deleted instead of retired. Defaults to `false`.
     */
    public ?bool $unlinkEmail = null;

    public function __construct(
        string $organizationId,
        string $memberId,
        ?string $name = null,
        ?array $trustedMetadata = null,
        ?array $untrustedMetadata = null,
        ?bool $isBreakglass = null,
        ?string $mfaPhoneNumber = null,
        ?bool $mfaEnrolled = null,
        ?array $roles = null,
        ?bool $preserveExistingSessions = null,
        ?string $defaultMfaMethod = null,
        ?string $emailAddress = null,
        ?string $externalId = null,
        ?bool $unlinkEmail = null
    ) {
        $this->organizationId = $organizationId;
        $this->memberId = $memberId;
        $this->name = $name;
        $this->trustedMetadata = $trustedMetadata;
        $this->untrustedMetadata = $untrustedMetadata;
        $this->isBreakglass = $isBreakglass;
        $this->mfaPhoneNumber = $mfaPhoneNumber;
        $this->mfaEnrolled = $mfaEnrolled;
        $this->roles = $roles;
        $this->preserveExistingSessions = $preserveExistingSessions;
        $this->defaultMfaMethod = $defaultMfaMethod;
        $this->emailAddress = $emailAddress;
        $this->externalId = $externalId;
        $this->unlinkEmail = $unlinkEmail;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['organization_id'],
            $data['member_id'],
            $data['name'] ?? null,
            $data['trusted_metadata'] ?? null,
            $data['untrusted_metadata'] ?? null,
            $data['is_breakglass'] ?? null,
            $data['mfa_phone_number'] ?? null,
            $data['mfa_enrolled'] ?? null,
            $data['roles'] ?? null,
            $data['preserve_existing_sessions'] ?? null,
            $data['default_mfa_method'] ?? null,
            $data['email_address'] ?? null,
            $data['external_id'] ?? null,
            $data['unlink_email'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'organization_id' => $this->organizationId,
            'member_id' => $this->memberId,
            'name' => $this->name,
            'trusted_metadata' => $this->trustedMetadata,
            'untrusted_metadata' => $this->untrustedMetadata,
            'is_breakglass' => $this->isBreakglass,
            'mfa_phone_number' => $this->mfaPhoneNumber,
            'mfa_enrolled' => $this->mfaEnrolled,
            'roles' => $this->roles,
            'preserve_existing_sessions' => $this->preserveExistingSessions,
            'default_mfa_method' => $this->defaultMfaMethod,
            'email_address' => $this->emailAddress,
            'external_id' => $this->externalId,
            'unlink_email' => $this->unlinkEmail,
        ];
    }
}
