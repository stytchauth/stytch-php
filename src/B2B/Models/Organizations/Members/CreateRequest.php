<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\Organizations\Members;

final class CreateRequest
{
    /**
    * Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
    * perform operations on an Organization, so be sure to preserve this value. You may also use the
    * organization_slug or organization_external_id here as a convenience.
     */
    public string $organizationId;
    /** The email address of the Member. */
    public string $emailAddress;
    /** The name of the Member. */
    public ?string $name = null;
    /** An arbitrary JSON object for storing application-specific data or identity-provider-specific data. */
    public ?array $trustedMetadata = null;
    /**
    * An arbitrary JSON object of application-specific data. These fields can be edited directly by the
    *   frontend SDK, and should not be used to store critical information. See the
    * [Metadata resource](https://stytch.com/docs/b2b/api/metadata)
    *   for complete field behavior details.
     */
    public ?array $untrustedMetadata = null;
    /**
    * Flag for whether or not to save a Member as `pending` or `active` in Stytch. It defaults to false. If
    * true, new Members will be created with status `pending` in Stytch's backend. Their status will remain
    * `pending` and they will continue to receive signup email templates for every Email Magic Link until that
    * Member authenticates and becomes `active`. If false, new Members will be created with status `active`.
     */
    public ?bool $createMemberAsPending = null;
    /**
    * Identifies the Member as a break glass user - someone who has permissions to authenticate into an
    * Organization by bypassing the Organization's settings. A break glass account is typically used for
    * emergency purposes to gain access outside of normal authentication procedures. Refer to the
    * [Organization object](https://stytch.com/docs/b2b/api/organization-object) and its `auth_methods` and
    * `allowed_auth_methods` fields for more details.
     */
    public ?bool $isBreakglass = null;
    /**
    * The Member's phone number. A Member may only have one phone number. The phone number should be in E.164
    * format (i.e. +1XXXXXXXXXX).
     */
    public ?string $mfaPhoneNumber = null;
    /**
    * Sets whether the Member is enrolled in MFA. If true, the Member must complete an MFA step whenever they
    * wish to log in to their Organization. If false, the Member only needs to complete an MFA step if the
    * Organization's MFA policy is set to `REQUIRED_FOR_ALL`.
     */
    public ?bool $mfaEnrolled = null;
    /**
    * Roles to explicitly assign to this Member. See the
    * [RBAC guide](https://stytch.com/docs/b2b/guides/rbac/role-assignment)
    *    for more information about role assignment.
     */
    public ?array $roles = null;
    /**
    * An identifier that can be used in most API calls where a `member_id` is expected. This is a string
    * consisting of alphanumeric, `.`, `_`, `-`, or `|` characters with a maximum length of 128 characters.
    * External IDs must be unique within an organization, but may be reused across different organizations in
    * the same project.
     */
    public ?string $externalId = null;

    public function __construct(
        string $organizationId,
        string $emailAddress,
        ?string $name = null,
        ?array $trustedMetadata = null,
        ?array $untrustedMetadata = null,
        ?bool $createMemberAsPending = null,
        ?bool $isBreakglass = null,
        ?string $mfaPhoneNumber = null,
        ?bool $mfaEnrolled = null,
        ?array $roles = null,
        ?string $externalId = null
    ) {
        $this->organizationId = $organizationId;
        $this->emailAddress = $emailAddress;
        $this->name = $name;
        $this->trustedMetadata = $trustedMetadata;
        $this->untrustedMetadata = $untrustedMetadata;
        $this->createMemberAsPending = $createMemberAsPending;
        $this->isBreakglass = $isBreakglass;
        $this->mfaPhoneNumber = $mfaPhoneNumber;
        $this->mfaEnrolled = $mfaEnrolled;
        $this->roles = $roles;
        $this->externalId = $externalId;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['organization_id'],
            $data['email_address'],
            $data['name'] ?? null,
            $data['trusted_metadata'] ?? null,
            $data['untrusted_metadata'] ?? null,
            $data['create_member_as_pending'] ?? null,
            $data['is_breakglass'] ?? null,
            $data['mfa_phone_number'] ?? null,
            $data['mfa_enrolled'] ?? null,
            $data['roles'] ?? null,
            $data['external_id'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'organization_id' => $this->organizationId,
            'email_address' => $this->emailAddress,
            'name' => $this->name,
            'trusted_metadata' => $this->trustedMetadata,
            'untrusted_metadata' => $this->untrustedMetadata,
            'create_member_as_pending' => $this->createMemberAsPending,
            'is_breakglass' => $this->isBreakglass,
            'mfa_phone_number' => $this->mfaPhoneNumber,
            'mfa_enrolled' => $this->mfaEnrolled,
            'roles' => $this->roles,
            'external_id' => $this->externalId,
        ];
    }
}
