<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\Organizations;


final class UpdateRequest
{
    /**
    * Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
    * perform operations on an Organization, so be sure to preserve this value. You may also use the
    * organization_slug or organization_external_id here as a convenience.
     */
    public string $organizationId;
    /**
    * The name of the Organization. Must be between 1 and 128 characters in length.
    * 
    * If this field is provided and a session header is passed into the request, the Member Session must have
    * permission to perform the `update.info.name` action on the `stytch.organization` Resource.
     */
    public ?string $organizationName = null;
    /**
    * The unique URL slug of the Organization. The slug only accepts alphanumeric characters and the following
    * reserved characters: `-` `.` `_` `~`. Must be between 2 and 128 characters in length. Wherever an
    * organization_id is expected in a path or request parameter, you may also use the organization_slug as a
    * convenience.
    * 
    * If this field is provided and a session header is passed into the request, the Member Session must have
    * permission to perform the `update.info.slug` action on the `stytch.organization` Resource.
     */
    public ?string $organizationSlug = null;
    /**
    * The image URL of the Organization logo.
    * 
    * If this field is provided and a session header is passed into the request, the Member Session must have
    * permission to perform the `update.info.logo-url` action on the `stytch.organization` Resource.
     */
    public ?string $organizationLogoURL = null;
    /**
    * An arbitrary JSON object for storing application-specific data or identity-provider-specific data.
    *           If a session header is passed into the request, this field may **not** be passed into the
    * request. You cannot
    *           update trusted metadata when acting as a Member.
     */
    public ?array $trustedMetadata = null;
    /**
    * An identifier that can be used in API calls wherever a organization_id is expected. This is a string
    * consisting of alphanumeric, `.`, `_`, `-`, or `|` characters with a maximum length of 128 characters.
    * External IDs must be unique within a project, but may be reused across different projects in the same
    * workspace.
     */
    public ?string $organizationExternalId = null;
    /**
    * The default connection used for SSO when there are multiple active connections.
    * 
    * If this field is provided and a session header is passed into the request, the Member Session must have
    * permission to perform the `update.settings.default-sso-connection` action on the `stytch.organization`
    * Resource.
     */
    public ?string $ssoDefaultConnectionId = null;
    /**
    * The authentication setting that controls the JIT provisioning of Members when authenticating via SSO.
    * The accepted values are:
    *  
    *   `ALL_ALLOWED` – the default setting, new Members will be automatically provisioned upon successful
    * authentication via any of the Organization's `sso_active_connections`.
    *  
    *   `RESTRICTED` – only new Members with SSO logins that comply with
    * `sso_jit_provisioning_allowed_connections` can be provisioned upon authentication.
    *  
    *   `NOT_ALLOWED` – disable JIT provisioning via SSO.
    *   
    * 
    * If this field is provided and a session header is passed into the request, the Member Session must have
    * permission to perform the `update.settings.sso-jit-provisioning` action on the `stytch.organization`
    * Resource.
     */
    public ?string $ssoJITProvisioning = null;
    /**
    * An array of `connection_id`s that reference
    * [SAML Connection objects](https://stytch.com/docs/b2b/api/saml-connection-object).
    *   Only these connections will be allowed to JIT provision Members via SSO when `sso_jit_provisioning` is
    * set to `RESTRICTED`.
    * 
    * If this field is provided and a session header is passed into the request, the Member Session must have
    * permission to perform the `update.settings.sso-jit-provisioning` action on the `stytch.organization`
    * Resource.
     */
    public ?array $ssoJITProvisioningAllowedConnections = null;
    /**
    * An array of email domains that allow invites or JIT provisioning for new Members. This list is enforced
    * when either `email_invites` or `email_jit_provisioning` is set to `RESTRICTED`.
    *    
    *    
    *     Common domains such as `gmail.com` are not allowed. See the
    * [common email domains resource](https://stytch.com/docs/b2b/api/common-email-domains) for the full list.
    * 
    * If this field is provided and a session header is passed into the request, the Member Session must have
    * permission to perform the `update.settings.allowed-domains` action on the `stytch.organization` Resource.
     */
    public ?array $emailAllowedDomains = null;
    /**
    * The authentication setting that controls how a new Member can be provisioned by authenticating via Email
    * Magic Link or OAuth. The accepted values are:
    *  
    *   `RESTRICTED` – only new Members with verified emails that comply with `email_allowed_domains` can be
    * provisioned upon authentication via Email Magic Link or OAuth.
    *  
    *   `NOT_ALLOWED` – the default setting, disables JIT provisioning via Email Magic Link and OAuth.
    *   
    * 
    * If this field is provided and a session header is passed into the request, the Member Session must have
    * permission to perform the `update.settings.email-jit-provisioning` action on the `stytch.organization`
    * Resource.
     */
    public ?string $emailJITProvisioning = null;
    /**
    * The authentication setting that controls how a new Member can be invited to an organization by email.
    * The accepted values are:
    *  
    *   `ALL_ALLOWED` – any new Member can be invited to join via email.
    *  
    *   `RESTRICTED` – only new Members with verified emails that comply with `email_allowed_domains` can be
    * invited via email.
    *  
    *   `NOT_ALLOWED` – disable email invites.
    *   
    * 
    * If this field is provided and a session header is passed into the request, the Member Session must have
    * permission to perform the `update.settings.email-invites` action on the `stytch.organization` Resource.
     */
    public ?string $emailInvites = null;
    /**
    * The setting that controls which authentication methods can be used by Members of an Organization. The
    * accepted values are:
    *  
    *   `ALL_ALLOWED` – the default setting which allows all authentication methods to be used.
    *  
    *   `RESTRICTED` – only methods that comply with `allowed_auth_methods` can be used for authentication.
    * This setting does not apply to Members with `is_breakglass` set to `true`.
    *   
    * 
    * If this field is provided and a session header is passed into the request, the Member Session must have
    * permission to perform the `update.settings.allowed-auth-methods` action on the `stytch.organization`
    * Resource.
     */
    public ?string $authMethods = null;
    /**
    * An array of allowed authentication methods. This list is enforced when `auth_methods` is set to
    * `RESTRICTED`.
    *   The list's accepted values are: `sso`, `magic_link`, `email_otp`, `password`, `google_oauth`,
    * `microsoft_oauth`, `slack_oauth`, `github_oauth`, and `hubspot_oauth`.
    *   
    * 
    * If this field is provided and a session header is passed into the request, the Member Session must have
    * permission to perform the `update.settings.allowed-auth-methods` action on the `stytch.organization`
    * Resource.
     */
    public ?array $allowedAuthMethods = null;
    /**
    * The setting that controls the MFA policy for all Members in the Organization. The accepted values are:
    *  
    *   `REQUIRED_FOR_ALL` – All Members within the Organization will be required to complete MFA every time
    * they wish to log in. However, any active Session that existed prior to this setting change will remain
    * valid.
    *  
    *   `OPTIONAL` – The default value. The Organization does not require MFA by default for all Members.
    * Members will be required to complete MFA only if their `mfa_enrolled` status is set to true.
    *   
    * 
    * If this field is provided and a session header is passed into the request, the Member Session must have
    * permission to perform the `update.settings.mfa-policy` action on the `stytch.organization` Resource.
     */
    public ?string $mfaPolicy = null;
    /**
    * Implicit role assignments based off of email domains.
    *   For each domain-Role pair, all Members whose email addresses have the specified email domain will be
    * granted the
    *   associated Role, regardless of their login method. See the
    * [RBAC guide](https://stytch.com/docs/b2b/guides/rbac/role-assignment)
    *   for more information about role assignment.
    * 
    * If this field is provided and a session header is passed into the request, the Member Session must have
    * permission to perform the `update.settings.implicit-roles` action on the `stytch.organization` Resource.
     */
    public ?array $rbacEmailImplicitRoleAssignments = null;
    /**
    * The setting that controls which MFA methods can be used by Members of an Organization. The accepted
    * values are:
    *  
    *   `ALL_ALLOWED` – the default setting which allows all authentication methods to be used.
    *  
    *   `RESTRICTED` – only methods that comply with `allowed_mfa_methods` can be used for authentication.
    * This setting does not apply to Members with `is_breakglass` set to `true`.
    *   
    * 
    * If this field is provided and a session header is passed into the request, the Member Session must have
    * permission to perform the `update.settings.allowed-mfa-methods` action on the `stytch.organization`
    * Resource.
     */
    public ?string $mfaMethods = null;
    /**
    * An array of allowed MFA authentication methods. This list is enforced when `mfa_methods` is set to
    * `RESTRICTED`.
    *   The list's accepted values are: `sms_otp` and `totp`.
    *   
    * 
    * If this field is provided and a session header is passed into the request, the Member Session must have
    * permission to perform the `update.settings.allowed-mfa-methods` action on the `stytch.organization`
    * Resource.
     */
    public ?array $allowedMfaMethods = null;
    /**
    * The authentication setting that controls how a new Member can JIT provision into an organization by
    * tenant. The accepted values are:
    *  
    *   `RESTRICTED` – only new Members with tenants in `allowed_oauth_tenants` can JIT provision via tenant.
    *  
    *   `NOT_ALLOWED` – the default setting, disables JIT provisioning by OAuth Tenant.
    *   
    * 
    * If this field is provided and a session header is passed into the request, the Member Session must have
    * permission to perform the `update.settings.oauth-tenant-jit-provisioning` action on the
    * `stytch.organization` Resource.
     */
    public ?string $oauthTenantJITProvisioning = null;
    /**
    * A map of allowed OAuth tenants. If this field is not passed in, the Organization will not allow JIT
    * provisioning by OAuth Tenant. Allowed keys are "slack", "hubspot", and "github".
    * 
    * If this field is provided and a session header is passed into the request, the Member Session must have
    * permission to perform the `update.settings.allowed-oauth-tenants` action on the `stytch.organization`
    * Resource.
     */
    public ?array $allowedOAuthTenants = null;
    /** A list of email domains that are claimed by the Organization. */
    public ?array $claimedEmailDomains = null;
    /**
    * The authentication setting that sets the Organization's policy towards first party Connected Apps. The
    * accepted values are:
    *  
    *   `ALL_ALLOWED` – the default setting, any first party Connected App in the Project is permitted for use
    * by Members.
    *  
    *   `RESTRICTED` – only first party Connected Apps with IDs in `allowed_first_party_connected_apps` can be
    * used by Members.
    *  
    *   `NOT_ALLOWED` – no first party Connected Apps are permitted.
     */
    public ?string $firstPartyConnectedAppsAllowedType = null;
    /**
    * An array of first party Connected App IDs that are allowed for the Organization. Only used when the
    * Organization's `first_party_connected_apps_allowed_type` is `RESTRICTED`.
     */
    public ?array $allowedFirstPartyConnectedApps = null;
    /**
    * The authentication setting that sets the Organization's policy towards third party Connected Apps. The
    * accepted values are:
    *  
    *   `ALL_ALLOWED` – the default setting, any third party Connected App in the Project is permitted for use
    * by Members.
    *  
    *   `RESTRICTED` – only third party Connected Apps with IDs in `allowed_first_party_connected_apps` can be
    * used by Members.
    *  
    *   `NOT_ALLOWED` – no third party Connected Apps are permitted.
     */
    public ?string $thirdPartyConnectedAppsAllowedType = null;
    /**
    * An array of third party Connected App IDs that are allowed for the Organization. Only used when the
    * Organization's `third_party_connected_apps_allowed_type` is `RESTRICTED`.
     */
    public ?array $allowedThirdPartyConnectedApps = null;

    public function __construct(
        string $organizationId,
        ?string $organizationName = null,
        ?string $organizationSlug = null,
        ?string $organizationLogoURL = null,
        ?array $trustedMetadata = null,
        ?string $organizationExternalId = null,
        ?string $ssoDefaultConnectionId = null,
        ?string $ssoJITProvisioning = null,
        ?array $ssoJITProvisioningAllowedConnections = null,
        ?array $emailAllowedDomains = null,
        ?string $emailJITProvisioning = null,
        ?string $emailInvites = null,
        ?string $authMethods = null,
        ?array $allowedAuthMethods = null,
        ?string $mfaPolicy = null,
        ?array $rbacEmailImplicitRoleAssignments = null,
        ?string $mfaMethods = null,
        ?array $allowedMfaMethods = null,
        ?string $oauthTenantJITProvisioning = null,
        ?array $allowedOAuthTenants = null,
        ?array $claimedEmailDomains = null,
        ?string $firstPartyConnectedAppsAllowedType = null,
        ?array $allowedFirstPartyConnectedApps = null,
        ?string $thirdPartyConnectedAppsAllowedType = null,
        ?array $allowedThirdPartyConnectedApps = null
    ) {
        $this->organizationId = $organizationId;
        $this->organizationName = $organizationName;
        $this->organizationSlug = $organizationSlug;
        $this->organizationLogoURL = $organizationLogoURL;
        $this->trustedMetadata = $trustedMetadata;
        $this->organizationExternalId = $organizationExternalId;
        $this->ssoDefaultConnectionId = $ssoDefaultConnectionId;
        $this->ssoJITProvisioning = $ssoJITProvisioning;
        $this->ssoJITProvisioningAllowedConnections = $ssoJITProvisioningAllowedConnections;
        $this->emailAllowedDomains = $emailAllowedDomains;
        $this->emailJITProvisioning = $emailJITProvisioning;
        $this->emailInvites = $emailInvites;
        $this->authMethods = $authMethods;
        $this->allowedAuthMethods = $allowedAuthMethods;
        $this->mfaPolicy = $mfaPolicy;
        $this->rbacEmailImplicitRoleAssignments = $rbacEmailImplicitRoleAssignments;
        $this->mfaMethods = $mfaMethods;
        $this->allowedMfaMethods = $allowedMfaMethods;
        $this->oauthTenantJITProvisioning = $oauthTenantJITProvisioning;
        $this->allowedOAuthTenants = $allowedOAuthTenants;
        $this->claimedEmailDomains = $claimedEmailDomains;
        $this->firstPartyConnectedAppsAllowedType = $firstPartyConnectedAppsAllowedType;
        $this->allowedFirstPartyConnectedApps = $allowedFirstPartyConnectedApps;
        $this->thirdPartyConnectedAppsAllowedType = $thirdPartyConnectedAppsAllowedType;
        $this->allowedThirdPartyConnectedApps = $allowedThirdPartyConnectedApps;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['organization_id'],
            $data['organization_name'] ?? null,
            $data['organization_slug'] ?? null,
            $data['organization_logo_url'] ?? null,
            $data['trusted_metadata'] ?? null,
            $data['organization_external_id'] ?? null,
            $data['sso_default_connection_id'] ?? null,
            $data['sso_jit_provisioning'] ?? null,
            $data['sso_jit_provisioning_allowed_connections'] ?? null,
            $data['email_allowed_domains'] ?? null,
            $data['email_jit_provisioning'] ?? null,
            $data['email_invites'] ?? null,
            $data['auth_methods'] ?? null,
            $data['allowed_auth_methods'] ?? null,
            $data['mfa_policy'] ?? null,
            isset($data['rbac_email_implicit_role_assignments']) && $data['rbac_email_implicit_role_assignments'] !== null ? array_map(fn($item) => EmailImplicitRoleAssignment::fromArray($item), $data['rbac_email_implicit_role_assignments']) : null,
            $data['mfa_methods'] ?? null,
            $data['allowed_mfa_methods'] ?? null,
            $data['oauth_tenant_jit_provisioning'] ?? null,
            $data['allowed_oauth_tenants'] ?? null,
            $data['claimed_email_domains'] ?? null,
            $data['first_party_connected_apps_allowed_type'] ?? null,
            $data['allowed_first_party_connected_apps'] ?? null,
            $data['third_party_connected_apps_allowed_type'] ?? null,
            $data['allowed_third_party_connected_apps'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'organization_id' => $this->organizationId,
            'organization_name' => $this->organizationName,
            'organization_slug' => $this->organizationSlug,
            'organization_logo_url' => $this->organizationLogoURL,
            'trusted_metadata' => $this->trustedMetadata,
            'organization_external_id' => $this->organizationExternalId,
            'sso_default_connection_id' => $this->ssoDefaultConnectionId,
            'sso_jit_provisioning' => $this->ssoJITProvisioning,
            'sso_jit_provisioning_allowed_connections' => $this->ssoJITProvisioningAllowedConnections,
            'email_allowed_domains' => $this->emailAllowedDomains,
            'email_jit_provisioning' => $this->emailJITProvisioning,
            'email_invites' => $this->emailInvites,
            'auth_methods' => $this->authMethods,
            'allowed_auth_methods' => $this->allowedAuthMethods,
            'mfa_policy' => $this->mfaPolicy,
            'rbac_email_implicit_role_assignments' => $this->rbacEmailImplicitRoleAssignments,
            'mfa_methods' => $this->mfaMethods,
            'allowed_mfa_methods' => $this->allowedMfaMethods,
            'oauth_tenant_jit_provisioning' => $this->oauthTenantJITProvisioning,
            'allowed_oauth_tenants' => $this->allowedOAuthTenants,
            'claimed_email_domains' => $this->claimedEmailDomains,
            'first_party_connected_apps_allowed_type' => $this->firstPartyConnectedAppsAllowedType,
            'allowed_first_party_connected_apps' => $this->allowedFirstPartyConnectedApps,
            'third_party_connected_apps_allowed_type' => $this->thirdPartyConnectedAppsAllowedType,
            'allowed_third_party_connected_apps' => $this->allowedThirdPartyConnectedApps,
        ];
    }
}