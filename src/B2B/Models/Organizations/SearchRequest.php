<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\Organizations;


final class SearchRequest
{
    /**
    * The `cursor` field allows you to paginate through your results. Each result array is limited to 1000
    * results. If your query returns more than 1000 results, you will need to paginate the responses using the
    * `cursor`. If you receive a response that includes a non-null `next_cursor` in the `results_metadata`
    * object, repeat the search call with the `next_cursor` value set to the `cursor` field to retrieve the
    * next page of results. Continue to make search calls until the `next_cursor` in the response is null.
     */
    public ?string $cursor = null;
    /**
    * The number of search results to return per page. The default limit is 100. A maximum of 1000 results can
    * be returned by a single search request. If the total size of your result set is greater than one page
    * size, you must paginate the response. See the `cursor` field.
     */
    public ?int $limit = null;
    /**
    * The optional query object contains the operator, i.e. `AND` or `OR`, and the operands that will filter
    * your results. Only an operator is required. If you include no operands, no filtering will be applied. If
    * you include no query object, it will return all Organizations with no filtering applied.
     */
    public ?SearchQuery $query = null;

    public function __construct(
        ?string $cursor = null,
        ?int $limit = null,
        ?SearchQuery $query = null
    ) {
        $this->cursor = $cursor;
        $this->limit = $limit;
        $this->query = $query;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['cursor'] ?? null,
            $data['limit'] ?? null,
            $data['query'] !== null ? SearchQuery::fromArray($data['query']) : null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'cursor' => $this->cursor,
            'limit' => $this->limit,
            'query' => $this->query,
        ];
    }
}