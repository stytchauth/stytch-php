<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\Organizations;

class SlackProviderInfo
{
    /**
    * The unique identifier for the User within a given OAuth provider. Also commonly called the `sub` or
    * "Subject field" in OAuth protocols.
     */
    public string $providerSubject;
    /**
    * The tenant ID returned by the OAuth provider. This is typically used to identify an organization or
    * group within the provider's domain. For example, in HubSpot this is a Hub ID, in Slack this is the
    * Workspace ID, and in GitHub this is an organization ID. This field will only be populated if exactly one
    * tenant ID is returned from a successful OAuth authentication and developers should prefer
    * `provider_tenant_ids` over this since it accounts for the possibility of an OAuth provider yielding
    * multiple tenant IDs.
     */
    public string $providerTenantId;
    /** The `access_token` that you may use to access the User's data in the provider's API. */
    public string $accessToken;
    /**
    * The OAuth scopes included for a given provider. See each provider's section above to see which scopes
    * are included by default and how to add custom scopes.
     */
    public array $scopes;
    /**
    * The `access_token` that you may use to access data as a bot application in Slack. Use in conjunction
    * with `bot_scopes`.
     */
    public string $botAccessToken;
    /** The scopes that the bot application has access to in Slack. */
    public array $botScopes;

    public function __construct(
        string $providerSubject,
        string $providerTenantId,
        string $accessToken,
        array $scopes,
        string $botAccessToken,
        array $botScopes
    ) {
        $this->providerSubject = $providerSubject;
        $this->providerTenantId = $providerTenantId;
        $this->accessToken = $accessToken;
        $this->scopes = $scopes;
        $this->botAccessToken = $botAccessToken;
        $this->botScopes = $botScopes;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['provider_subject'],
            $data['provider_tenant_id'],
            $data['access_token'],
            $data['scopes'],
            $data['bot_access_token'],
            $data['bot_scopes']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'provider_subject' => $this->providerSubject,
            'provider_tenant_id' => $this->providerTenantId,
            'access_token' => $this->accessToken,
            'scopes' => $this->scopes,
            'bot_access_token' => $this->botAccessToken,
            'bot_scopes' => $this->botScopes,
        ];
    }
}
