<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\Organizations;

final class Member
{
    /**
    * Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
    * perform operations on an Organization, so be sure to preserve this value. You may also use the
    * organization_slug or organization_external_id here as a convenience.
     */
    public string $organizationId;
    /**
    * Globally unique UUID that identifies a specific Member. The `member_id` is critical to perform
    * operations on a Member, so be sure to preserve this value. You may use an external_id here if one is set
    * for the member.
     */
    public string $memberId;
    /** The email address of the Member. */
    public string $emailAddress;
    /** The status of the Member. The possible values are: `pending`, `invited`, `active`, or `deleted`. */
    public string $status;
    /** The name of the Member. */
    public string $name;
    /**
    * An array of registered [SAML Connection](saml-connection-object) or
    * [OIDC Connection](oidc-connection-object) objects the Member has authenticated with.
     */
    public array $ssoRegistrations;
    /**
    * Identifies the Member as a break glass user - someone who has permissions to authenticate into an
    * Organization by bypassing the Organization's settings. A break glass account is typically used for
    * emergency purposes to gain access outside of normal authentication procedures. Refer to the
    * [Organization object](organization-object) and its `auth_methods` and `allowed_auth_methods` fields for
    * more details.
     */
    public bool $isBreakglass;
    /** Globally unique UUID that identifies a Member's password. */
    public string $memberPasswordId;
    /** A list of OAuth registrations for this member. */
    public array $oauthRegistrations;
    /** Whether or not the Member's email address is verified. */
    public bool $emailAddressVerified;
    /** Whether or not the Member's phone number is verified. */
    public bool $mfaPhoneNumberVerified;
    /**
    * Whether or not the Member has the `stytch_admin` Role. This Role is automatically granted to Members
    *   who create an Organization through the
    * [discovery flow](https://stytch.com/docs/b2b/api/create-organization-via-discovery). See the
    *   [RBAC guide](https://stytch.com/docs/b2b/guides/rbac/stytch-default) for more details on this Role.
     */
    public bool $isAdmin;
    public string $totpRegistrationId;
    /**
    * A list of retired email addresses for this member.
    *   A previously active email address can be marked as retired in one of two ways:
    *   - It's replaced with a new primary email address during an explicit Member update.
    *   - A new email address is surfaced by an OAuth, SAML or OIDC provider. In this case the new email
    * address becomes the
    *   Member's primary email address and the old primary email address is retired.
    *
    *   A retired email address cannot be used by other Members in the same Organization. However, unlinking
    * retired email
    *   addresses allows them to be subsequently re-used by other Organization Members. Retired email
    * addresses can be unlinked
    *   using the [Unlink Retired Email endpoint](https://stytch.com/docs/b2b/api/unlink-retired-member-email).
     */
    public array $retiredEmailAddresses;
    public bool $isLocked;
    /**
    * Sets whether the Member is enrolled in MFA. If true, the Member must complete an MFA step whenever they
    * wish to log in to their Organization. If false, the Member only needs to complete an MFA step if the
    * Organization's MFA policy is set to `REQUIRED_FOR_ALL`.
     */
    public bool $mfaEnrolled;
    /**
    * The Member's phone number. A Member may only have one phone number. The phone number should be in E.164
    * format (i.e. +1XXXXXXXXXX).
     */
    public string $mfaPhoneNumber;
    public string $defaultMfaMethod;
    /**
    * Explicit or implicit Roles assigned to this Member, along with details about the role assignment source.
    *    See the [RBAC guide](https://stytch.com/docs/b2b/guides/rbac/role-assignment) for more information
    * about role assignment.
     */
    public array $roles;
    /** An arbitrary JSON object for storing application-specific data or identity-provider-specific data. */
    public ?array $trustedMetadata = null;
    /**
    * An arbitrary JSON object of application-specific data. These fields can be edited directly by the
    *   frontend SDK, and should not be used to store critical information. See the
    * [Metadata resource](https://stytch.com/docs/b2b/api/metadata)
    *   for complete field behavior details.
     */
    public ?array $untrustedMetadata = null;
    /**
    * The timestamp of the Member's creation. Values conform to the RFC 3339 standard and are expressed in
    * UTC, e.g. `2021-12-29T12:33:09Z`.
     */
    public ?string $createdAt = null;
    /**
    * The timestamp of when the Member was last updated. Values conform to the RFC 3339 standard and are
    * expressed in UTC, e.g. `2021-12-29T12:33:09Z`.
     */
    public ?string $updatedAt = null;
    /**
    * A scim member registration, referencing a [SCIM Connection](scim-connection-object) object in use for
    * the Member creation.
     */
    public ?SCIMRegistration $scimRegistration = null;
    /** The ID of the member given by the identity provider. */
    public ?string $externalId = null;
    public ?string $lockCreatedAt = null;
    public ?string $lockExpiresAt = null;

    public function __construct(
        string $organizationId,
        string $memberId,
        string $emailAddress,
        string $status,
        string $name,
        array $ssoRegistrations,
        bool $isBreakglass,
        string $memberPasswordId,
        array $oauthRegistrations,
        bool $emailAddressVerified,
        bool $mfaPhoneNumberVerified,
        bool $isAdmin,
        string $totpRegistrationId,
        array $retiredEmailAddresses,
        bool $isLocked,
        bool $mfaEnrolled,
        string $mfaPhoneNumber,
        string $defaultMfaMethod,
        array $roles,
        ?array $trustedMetadata = null,
        ?array $untrustedMetadata = null,
        ?string $createdAt = null,
        ?string $updatedAt = null,
        ?SCIMRegistration $scimRegistration = null,
        ?string $externalId = null,
        ?string $lockCreatedAt = null,
        ?string $lockExpiresAt = null
    ) {
        $this->organizationId = $organizationId;
        $this->memberId = $memberId;
        $this->emailAddress = $emailAddress;
        $this->status = $status;
        $this->name = $name;
        $this->ssoRegistrations = $ssoRegistrations;
        $this->isBreakglass = $isBreakglass;
        $this->memberPasswordId = $memberPasswordId;
        $this->oauthRegistrations = $oauthRegistrations;
        $this->emailAddressVerified = $emailAddressVerified;
        $this->mfaPhoneNumberVerified = $mfaPhoneNumberVerified;
        $this->isAdmin = $isAdmin;
        $this->totpRegistrationId = $totpRegistrationId;
        $this->retiredEmailAddresses = $retiredEmailAddresses;
        $this->isLocked = $isLocked;
        $this->mfaEnrolled = $mfaEnrolled;
        $this->mfaPhoneNumber = $mfaPhoneNumber;
        $this->defaultMfaMethod = $defaultMfaMethod;
        $this->roles = $roles;
        $this->trustedMetadata = $trustedMetadata;
        $this->untrustedMetadata = $untrustedMetadata;
        $this->createdAt = $createdAt;
        $this->updatedAt = $updatedAt;
        $this->scimRegistration = $scimRegistration;
        $this->externalId = $externalId;
        $this->lockCreatedAt = $lockCreatedAt;
        $this->lockExpiresAt = $lockExpiresAt;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['organization_id'],
            $data['member_id'],
            $data['email_address'],
            $data['status'],
            $data['name'],
            isset($data['sso_registrations']) ? array_map(fn ($item) => SSORegistration::fromArray($item), $data['sso_registrations']) : [],
            $data['is_breakglass'],
            $data['member_password_id'],
            isset($data['oauth_registrations']) ? array_map(fn ($item) => OAuthRegistration::fromArray($item), $data['oauth_registrations']) : [],
            $data['email_address_verified'],
            $data['mfa_phone_number_verified'],
            $data['is_admin'],
            $data['totp_registration_id'],
            isset($data['retired_email_addresses']) ? array_map(fn ($item) => RetiredEmail::fromArray($item), $data['retired_email_addresses']) : [],
            $data['is_locked'],
            $data['mfa_enrolled'],
            $data['mfa_phone_number'],
            $data['default_mfa_method'],
            isset($data['roles']) ? array_map(fn ($item) => MemberRole::fromArray($item), $data['roles']) : [],
            $data['trusted_metadata'] ?? null,
            $data['untrusted_metadata'] ?? null,
            $data['created_at'] ?? null,
            $data['updated_at'] ?? null,
            $data['scim_registration'] !== null ? SCIMRegistration::fromArray($data['scim_registration']) : null,
            $data['external_id'] ?? null,
            $data['lock_created_at'] ?? null,
            $data['lock_expires_at'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'organization_id' => $this->organizationId,
            'member_id' => $this->memberId,
            'email_address' => $this->emailAddress,
            'status' => $this->status,
            'name' => $this->name,
            'sso_registrations' => $this->ssoRegistrations,
            'is_breakglass' => $this->isBreakglass,
            'member_password_id' => $this->memberPasswordId,
            'oauth_registrations' => $this->oauthRegistrations,
            'email_address_verified' => $this->emailAddressVerified,
            'mfa_phone_number_verified' => $this->mfaPhoneNumberVerified,
            'is_admin' => $this->isAdmin,
            'totp_registration_id' => $this->totpRegistrationId,
            'retired_email_addresses' => $this->retiredEmailAddresses,
            'is_locked' => $this->isLocked,
            'mfa_enrolled' => $this->mfaEnrolled,
            'mfa_phone_number' => $this->mfaPhoneNumber,
            'default_mfa_method' => $this->defaultMfaMethod,
            'roles' => $this->roles,
            'trusted_metadata' => $this->trustedMetadata,
            'untrusted_metadata' => $this->untrustedMetadata,
            'created_at' => $this->createdAt,
            'updated_at' => $this->updatedAt,
            'scim_registration' => $this->scimRegistration,
            'external_id' => $this->externalId,
            'lock_created_at' => $this->lockCreatedAt,
            'lock_expires_at' => $this->lockExpiresAt,
        ];
    }
}
