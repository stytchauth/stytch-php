<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\Organizations;


final class GithubProviderInfo
{
    /**
    * The unique identifier for the User within a given OAuth provider. Also commonly called the `sub` or
    * "Subject field" in OAuth protocols.
     */
    public string $providerSubject;
    /**
    * All tenant IDs returned by the OAuth provider. These is typically used to identify organizations or
    * groups within the provider's domain. For example, in HubSpot this is a Hub ID, in Slack this is the
    * Workspace ID, and in GitHub this is an organization ID. Some OAuth providers do not return tenant IDs,
    * some providers are guaranteed to return one, and some may return multiple. This field will always be
    * populated if at least one tenant ID was returned from the OAuth provider and developers should prefer
    * this field over `provider_tenant_id`.
     */
    public array $providerTenantIds;
    /** The `access_token` that you may use to access the User's data in the provider's API. */
    public string $accessToken;
    /**
    * The OAuth scopes included for a given provider. See each provider's section above to see which scopes
    * are included by default and how to add custom scopes.
     */
    public array $scopes;

    public function __construct(
        string $providerSubject,
        array $providerTenantIds,
        string $accessToken,
        array $scopes
    ) {
        $this->providerSubject = $providerSubject;
        $this->providerTenantIds = $providerTenantIds;
        $this->accessToken = $accessToken;
        $this->scopes = $scopes;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['provider_subject'],
            $data['provider_tenant_ids'],
            $data['access_token'],
            $data['scopes']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'provider_subject' => $this->providerSubject,
            'provider_tenant_ids' => $this->providerTenantIds,
            'access_token' => $this->accessToken,
            'scopes' => $this->scopes,
        ];
    }
}