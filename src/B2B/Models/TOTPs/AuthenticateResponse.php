<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\TOTPs;

final class AuthenticateResponse
{
    /**
    * Globally unique UUID that is returned with every API call. This value is important to log for debugging
    * purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
     */
    public string $requestId;
    /** Globally unique UUID that identifies a specific Member. */
    public string $memberId;
    /** The [Member object](https://stytch.com/docs/b2b/api/member-object) */
    public \Stytch\B2B\Models\Organizations\Member $member;
    /** The [Organization object](https://stytch.com/docs/b2b/api/organization-object). */
    public \Stytch\B2B\Models\Organizations\Organization $organization;
    /** A secret token for a given Stytch Session. */
    public string $sessionToken;
    /** The JSON Web Token (JWT) for a given Stytch Session. */
    public string $sessionJwt;
    /**
    * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
    * 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
     */
    public int $statusCode;
    /** The [Session object](https://stytch.com/docs/b2b/api/session-object). */
    public ?\Stytch\B2B\Models\Sessions\MemberSession $memberSession = null;
    /**
    * If a valid `telemetry_id` was passed in the request and the
    * [Fingerprint Lookup API](https://stytch.com/docs/fraud/api/fingerprint-lookup) returned results, the
    * `member_device` response field will contain information about the member's device attributes.
     */
    public ?\Stytch\Consumer\Models\DeviceInfo $memberDevice = null;

    public function __construct(
        string $requestId,
        string $memberId,
        \Stytch\B2B\Models\Organizations\Member $member,
        \Stytch\B2B\Models\Organizations\Organization $organization,
        string $sessionToken,
        string $sessionJwt,
        int $statusCode,
        ?\Stytch\B2B\Models\Sessions\MemberSession $memberSession = null,
        ?\Stytch\Consumer\Models\DeviceInfo $memberDevice = null
    ) {
        $this->requestId = $requestId;
        $this->memberId = $memberId;
        $this->member = $member;
        $this->organization = $organization;
        $this->sessionToken = $sessionToken;
        $this->sessionJwt = $sessionJwt;
        $this->statusCode = $statusCode;
        $this->memberSession = $memberSession;
        $this->memberDevice = $memberDevice;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['request_id'],
            $data['member_id'],
            \Stytch\B2B\Models\Organizations\Member::fromArray($data['member']),
            \Stytch\B2B\Models\Organizations\Organization::fromArray($data['organization']),
            $data['session_token'],
            $data['session_jwt'],
            $data['status_code'],
            $data['member_session'] !== null ? \Stytch\B2B\Models\Sessions\MemberSession::fromArray($data['member_session']) : null,
            $data['member_device'] !== null ? \Stytch\Consumer\Models\DeviceInfo::fromArray($data['member_device']) : null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'request_id' => $this->requestId,
            'member_id' => $this->memberId,
            'member' => $this->member,
            'organization' => $this->organization,
            'session_token' => $this->sessionToken,
            'session_jwt' => $this->sessionJwt,
            'status_code' => $this->statusCode,
            'member_session' => $this->memberSession,
            'member_device' => $this->memberDevice,
        ];
    }
}
