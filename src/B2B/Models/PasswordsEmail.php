<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models;

enum ResetRequestLocale: string
{
}

enum ResetStartRequestLocale: string
{
}

class RequireResetResponse
{
    public ?string $member_id;
    public ?Member $member;
    public ?Organization $organization;

    public function __construct(
        ?string $member_id,
        ?Member $member,
        ?Organization $organization
    ) {
        $this->member_id = $member_id;
        $this->member = $member;
        $this->organization = $organization;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['member_id'] ?? null,
            $data['member'] ?? null,
            $data['organization'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'member_id' => $this->member_id,
            'member' => $this->member,
            'organization' => $this->organization,
        ];
    }
}

class ResetResponse
{
    public string $member_id;
    public string $member_email_id;
    public string $organization_id;
    public Member $member;
    public string $session_token;
    public string $session_jwt;
    public Organization $organization;
    public string $intermediate_session_token;
    public bool $member_authenticated;
    public ?MemberSession $member_session;
    public ?MfaRequired $mfa_required;
    public ?PrimaryRequired $primary_required;
    public ?DeviceInfo $member_device;

    public function __construct(
        string $member_id,
        string $member_email_id,
        string $organization_id,
        Member $member,
        string $session_token,
        string $session_jwt,
        Organization $organization,
        string $intermediate_session_token,
        bool $member_authenticated,
        ?MemberSession $member_session,
        ?MfaRequired $mfa_required,
        ?PrimaryRequired $primary_required,
        ?DeviceInfo $member_device
    ) {
        $this->member_id = $member_id;
        $this->member_email_id = $member_email_id;
        $this->organization_id = $organization_id;
        $this->member = $member;
        $this->session_token = $session_token;
        $this->session_jwt = $session_jwt;
        $this->organization = $organization;
        $this->intermediate_session_token = $intermediate_session_token;
        $this->member_authenticated = $member_authenticated;
        $this->member_session = $member_session;
        $this->mfa_required = $mfa_required;
        $this->primary_required = $primary_required;
        $this->member_device = $member_device;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['member_id'],
            $data['member_email_id'],
            $data['organization_id'],
            $data['member'],
            $data['session_token'],
            $data['session_jwt'],
            $data['organization'],
            $data['intermediate_session_token'],
            $data['member_authenticated'],
            $data['member_session'] ?? null,
            $data['mfa_required'] ?? null,
            $data['primary_required'] ?? null,
            $data['member_device'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'member_id' => $this->member_id,
            'member_email_id' => $this->member_email_id,
            'organization_id' => $this->organization_id,
            'member' => $this->member,
            'session_token' => $this->session_token,
            'session_jwt' => $this->session_jwt,
            'organization' => $this->organization,
            'intermediate_session_token' => $this->intermediate_session_token,
            'member_authenticated' => $this->member_authenticated,
            'member_session' => $this->member_session,
            'mfa_required' => $this->mfa_required,
            'primary_required' => $this->primary_required,
            'member_device' => $this->member_device,
        ];
    }
}

class ResetStartResponse
{
    public string $member_id;
    public string $member_email_id;
    public Member $member;

    public function __construct(
        string $member_id,
        string $member_email_id,
        Member $member
    ) {
        $this->member_id = $member_id;
        $this->member_email_id = $member_email_id;
        $this->member = $member;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['member_id'],
            $data['member_email_id'],
            $data['member']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'member_id' => $this->member_id,
            'member_email_id' => $this->member_email_id,
            'member' => $this->member,
        ];
    }
}

class RequireResetRequestOptions
{
    public ?mixed $authorization;

    public function __construct(
        ?mixed $authorization
    ) {
        $this->authorization = $authorization;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['authorization'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'authorization' => $this->authorization,
        ];
    }
}

