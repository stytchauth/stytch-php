<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\SSO;


final class SAMLConnection
{
    public string $organizationId;
    public string $connectionId;
    public string $status;
    public string $idpEntityId;
    public string $displayName;
    public string $idpSSOURL;
    public string $acsURL;
    public string $audienceUri;
    public array $signingCertificates;
    public array $verificationCertificates;
    public array $encryptionPrivateKeys;
    public array $samlConnectionImplicitRoleAssignments;
    public array $samlGroupImplicitRoleAssignments;
    public string $alternativeAudienceUri;
    public string $identityProvider;
    public string $nameidFormat;
    public string $alternativeAcsURL;
    public bool $idpInitiatedAuthDisabled;
    public ?array $attributeMapping = null;

    public function __construct(
        string $organizationId,
        string $connectionId,
        string $status,
        string $idpEntityId,
        string $displayName,
        string $idpSSOURL,
        string $acsURL,
        string $audienceUri,
        array $signingCertificates,
        array $verificationCertificates,
        array $encryptionPrivateKeys,
        array $samlConnectionImplicitRoleAssignments,
        array $samlGroupImplicitRoleAssignments,
        string $alternativeAudienceUri,
        string $identityProvider,
        string $nameidFormat,
        string $alternativeAcsURL,
        bool $idpInitiatedAuthDisabled,
        ?array $attributeMapping = null
    ) {
        $this->organizationId = $organizationId;
        $this->connectionId = $connectionId;
        $this->status = $status;
        $this->idpEntityId = $idpEntityId;
        $this->displayName = $displayName;
        $this->idpSSOURL = $idpSSOURL;
        $this->acsURL = $acsURL;
        $this->audienceUri = $audienceUri;
        $this->signingCertificates = $signingCertificates;
        $this->verificationCertificates = $verificationCertificates;
        $this->encryptionPrivateKeys = $encryptionPrivateKeys;
        $this->samlConnectionImplicitRoleAssignments = $samlConnectionImplicitRoleAssignments;
        $this->samlGroupImplicitRoleAssignments = $samlGroupImplicitRoleAssignments;
        $this->alternativeAudienceUri = $alternativeAudienceUri;
        $this->identityProvider = $identityProvider;
        $this->nameidFormat = $nameidFormat;
        $this->alternativeAcsURL = $alternativeAcsURL;
        $this->idpInitiatedAuthDisabled = $idpInitiatedAuthDisabled;
        $this->attributeMapping = $attributeMapping;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['organization_id'],
            $data['connection_id'],
            $data['status'],
            $data['idp_entity_id'],
            $data['display_name'],
            $data['idp_sso_url'],
            $data['acs_url'],
            $data['audience_uri'],
            isset($data['signing_certificates']) ? array_map(fn($item) => X509Certificate::fromArray($item), $data['signing_certificates']) : [],
            isset($data['verification_certificates']) ? array_map(fn($item) => X509Certificate::fromArray($item), $data['verification_certificates']) : [],
            isset($data['encryption_private_keys']) ? array_map(fn($item) => EncryptionPrivateKey::fromArray($item), $data['encryption_private_keys']) : [],
            isset($data['saml_connection_implicit_role_assignments']) ? array_map(fn($item) => SAMLConnectionImplicitRoleAssignment::fromArray($item), $data['saml_connection_implicit_role_assignments']) : [],
            isset($data['saml_group_implicit_role_assignments']) ? array_map(fn($item) => SAMLGroupImplicitRoleAssignment::fromArray($item), $data['saml_group_implicit_role_assignments']) : [],
            $data['alternative_audience_uri'],
            $data['identity_provider'],
            $data['nameid_format'],
            $data['alternative_acs_url'],
            $data['idp_initiated_auth_disabled'],
            $data['attribute_mapping'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'organization_id' => $this->organizationId,
            'connection_id' => $this->connectionId,
            'status' => $this->status,
            'idp_entity_id' => $this->idpEntityId,
            'display_name' => $this->displayName,
            'idp_sso_url' => $this->idpSSOURL,
            'acs_url' => $this->acsURL,
            'audience_uri' => $this->audienceUri,
            'signing_certificates' => $this->signingCertificates,
            'verification_certificates' => $this->verificationCertificates,
            'encryption_private_keys' => $this->encryptionPrivateKeys,
            'saml_connection_implicit_role_assignments' => $this->samlConnectionImplicitRoleAssignments,
            'saml_group_implicit_role_assignments' => $this->samlGroupImplicitRoleAssignments,
            'alternative_audience_uri' => $this->alternativeAudienceUri,
            'identity_provider' => $this->identityProvider,
            'nameid_format' => $this->nameidFormat,
            'alternative_acs_url' => $this->alternativeAcsURL,
            'idp_initiated_auth_disabled' => $this->idpInitiatedAuthDisabled,
            'attribute_mapping' => $this->attributeMapping,
        ];
    }
}