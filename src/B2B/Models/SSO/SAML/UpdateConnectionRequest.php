<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\SSO\SAML;

final class UpdateConnectionRequest
{
    /**
    * Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
    * perform operations on an Organization, so be sure to preserve this value. You may also use the
    * organization_slug or organization_external_id here as a convenience.
     */
    public string $organizationId;
    /** Globally unique UUID that identifies a specific SSO `connection_id` for a Member. */
    public string $connectionId;
    /** A globally unique name for the IdP. This will be provided by the IdP. */
    public ?string $idpEntityId = null;
    /** A human-readable display name for the connection. */
    public ?string $displayName = null;
    /**
    * An object that represents the attributes used to identify a Member. This object will map the IdP-defined
    * User attributes to Stytch-specific values. Required attributes: `email` and one of `full_name` or
    * `first_name` and `last_name`.
     */
    public ?array $attributeMapping = null;
    /**
    * A certificate that Stytch will use to verify the sign-in assertion sent by the IdP, in
    * [PEM](https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail) format. See our
    * [X509 guide](https://stytch.com/docs/b2b/api/saml-certificates) for more info.
     */
    public ?string $x509Certificate = null;
    /** The URL for which assertions for login requests will be sent. This will be provided by the IdP. */
    public ?string $idpSSOURL = null;
    /**
    * All Members who log in with this SAML connection will implicitly receive the specified Roles. See the
    * [RBAC guide](https://stytch.com/docs/b2b/guides/rbac/role-assignment) for more information about role
    * assignment.
     */
    public ?array $samlConnectionImplicitRoleAssignments = null;
    /**
    * Defines the names of the SAML groups
    *  that grant specific role assignments. For each group-Role pair, if a Member logs in with this SAML
    * connection and
    *  belongs to the specified SAML group, they will be granted the associated Role. See the
    *  [RBAC guide](https://stytch.com/docs/b2b/guides/rbac/role-assignment) for more information about role
    * assignment. Before adding any group implicit role assignments, you must add a "groups" key to your SAML
    * connection's
    *          `attribute_mapping`. Make sure that your IdP is configured to correctly send the group
    * information.
     */
    public ?array $samlGroupImplicitRoleAssignments = null;
    /**
    * An alternative URL to use for the Audience Restriction. This value can be used when you wish to migrate
    * an existing SAML integration to Stytch with zero downtime. Read our
    * [SSO migration guide](https://stytch.com/docs/b2b/guides/migrations/additional-migration-considerations)
    * for more info.
     */
    public ?string $alternativeAudienceUri = null;
    /**
    * Name of the IdP. Enum with possible values: `classlink`, `cyberark`, `duo`, `google-workspace`,
    * `jumpcloud`, `keycloak`, `miniorange`, `microsoft-entra`, `okta`, `onelogin`, `pingfederate`,
    * `rippling`, `salesforce`, `shibboleth`, or `generic`.
    *
    * Specifying a known provider allows Stytch to handle any provider-specific logic.
     */
    public ?string $identityProvider = null;
    /**
    * A PKCS1 format RSA private key used for signing SAML requests. Only PKCS1 format (starting with
    * "-----BEGIN RSA PRIVATE KEY-----") is supported. When provided, Stytch will generate a new x509
    * certificate from this key and return it in the signing_certificates array.
     */
    public ?string $signingPrivateKey = null;
    /**
    * The NameID format the SAML Connection expects to use. Defaults to
    * `urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress`.
     */
    public ?string $nameidFormat = null;
    /**
    * An alternative URL to use for the `AssertionConsumerServiceURL` in SP initiated SAML AuthNRequests. This
    * value can be used when you wish to migrate an existing SAML integration to Stytch with zero downtime.
    * Note that you will be responsible for proxying requests sent to the Alternative ACS URL to Stytch. Read
    * our
    * [SSO migration guide](https://stytch.com/docs/b2b/guides/migrations/additional-migration-considerations)
    * for more info.
     */
    public ?string $alternativeAcsURL = null;
    /**
    * Determines whether IDP initiated auth is allowed for a given SAML connection. Defaults to false (IDP
    * Initiated Auth is enabled).
     */
    public ?bool $idpInitiatedAuthDisabled = null;
    /**
    * A PKCS1 format RSA private key used to decrypt encrypted SAML assertions. Only PKCS1 format (starting
    * with "-----BEGIN RSA PRIVATE KEY-----") is supported.
     */
    public ?string $samlEncryptionPrivateKey = null;

    public function __construct(
        string $organizationId,
        string $connectionId,
        ?string $idpEntityId = null,
        ?string $displayName = null,
        ?array $attributeMapping = null,
        ?string $x509Certificate = null,
        ?string $idpSSOURL = null,
        ?array $samlConnectionImplicitRoleAssignments = null,
        ?array $samlGroupImplicitRoleAssignments = null,
        ?string $alternativeAudienceUri = null,
        ?string $identityProvider = null,
        ?string $signingPrivateKey = null,
        ?string $nameidFormat = null,
        ?string $alternativeAcsURL = null,
        ?bool $idpInitiatedAuthDisabled = null,
        ?string $samlEncryptionPrivateKey = null
    ) {
        $this->organizationId = $organizationId;
        $this->connectionId = $connectionId;
        $this->idpEntityId = $idpEntityId;
        $this->displayName = $displayName;
        $this->attributeMapping = $attributeMapping;
        $this->x509Certificate = $x509Certificate;
        $this->idpSSOURL = $idpSSOURL;
        $this->samlConnectionImplicitRoleAssignments = $samlConnectionImplicitRoleAssignments;
        $this->samlGroupImplicitRoleAssignments = $samlGroupImplicitRoleAssignments;
        $this->alternativeAudienceUri = $alternativeAudienceUri;
        $this->identityProvider = $identityProvider;
        $this->signingPrivateKey = $signingPrivateKey;
        $this->nameidFormat = $nameidFormat;
        $this->alternativeAcsURL = $alternativeAcsURL;
        $this->idpInitiatedAuthDisabled = $idpInitiatedAuthDisabled;
        $this->samlEncryptionPrivateKey = $samlEncryptionPrivateKey;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['organization_id'],
            $data['connection_id'],
            $data['idp_entity_id'] ?? null,
            $data['display_name'] ?? null,
            $data['attribute_mapping'] ?? null,
            $data['x509_certificate'] ?? null,
            $data['idp_sso_url'] ?? null,
            isset($data['saml_connection_implicit_role_assignments']) && $data['saml_connection_implicit_role_assignments'] !== null ? array_map(fn ($item) => \Stytch\B2B\Models\SSO\SAMLConnectionImplicitRoleAssignment::fromArray($item), $data['saml_connection_implicit_role_assignments']) : null,
            isset($data['saml_group_implicit_role_assignments']) && $data['saml_group_implicit_role_assignments'] !== null ? array_map(fn ($item) => \Stytch\B2B\Models\SSO\SAMLGroupImplicitRoleAssignment::fromArray($item), $data['saml_group_implicit_role_assignments']) : null,
            $data['alternative_audience_uri'] ?? null,
            $data['identity_provider'] ?? null,
            $data['signing_private_key'] ?? null,
            $data['nameid_format'] ?? null,
            $data['alternative_acs_url'] ?? null,
            $data['idp_initiated_auth_disabled'] ?? null,
            $data['saml_encryption_private_key'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'organization_id' => $this->organizationId,
            'connection_id' => $this->connectionId,
            'idp_entity_id' => $this->idpEntityId,
            'display_name' => $this->displayName,
            'attribute_mapping' => $this->attributeMapping,
            'x509_certificate' => $this->x509Certificate,
            'idp_sso_url' => $this->idpSSOURL,
            'saml_connection_implicit_role_assignments' => $this->samlConnectionImplicitRoleAssignments,
            'saml_group_implicit_role_assignments' => $this->samlGroupImplicitRoleAssignments,
            'alternative_audience_uri' => $this->alternativeAudienceUri,
            'identity_provider' => $this->identityProvider,
            'signing_private_key' => $this->signingPrivateKey,
            'nameid_format' => $this->nameidFormat,
            'alternative_acs_url' => $this->alternativeAcsURL,
            'idp_initiated_auth_disabled' => $this->idpInitiatedAuthDisabled,
            'saml_encryption_private_key' => $this->samlEncryptionPrivateKey,
        ];
    }
}
