<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\SSO\OIDC;


final class CreateConnectionRequest
{
    /**
    * Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
    * perform operations on an Organization, so be sure to preserve this value. You may also use the
    * organization_slug or organization_external_id here as a convenience.
     */
    public string $organizationId;
    /** A human-readable display name for the connection. */
    public ?string $displayName = null;
    /**
    * Name of the IdP. Enum with possible values: `classlink`, `cyberark`, `duo`, `google-workspace`,
    * `jumpcloud`, `keycloak`, `miniorange`, `microsoft-entra`, `okta`, `onelogin`, `pingfederate`,
    * `rippling`, `salesforce`, `shibboleth`, or `generic`.
    * 
    * Specifying a known provider allows Stytch to handle any provider-specific logic.
     */
    public ?string $identityProvider = null;

    public function __construct(
        string $organizationId,
        ?string $displayName = null,
        ?string $identityProvider = null
    ) {
        $this->organizationId = $organizationId;
        $this->displayName = $displayName;
        $this->identityProvider = $identityProvider;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['organization_id'],
            $data['display_name'] ?? null,
            $data['identity_provider'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'organization_id' => $this->organizationId,
            'display_name' => $this->displayName,
            'identity_provider' => $this->identityProvider,
        ];
    }
}