<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\SSO\OIDC;

class UpdateConnectionRequest
{
    /**
    * Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
    * perform operations on an Organization, so be sure to preserve this value. You may also use the
    * organization_slug or organization_external_id here as a convenience.
     */
    public string $organizationId;
    /** Globally unique UUID that identifies a specific SSO `connection_id` for a Member. */
    public string $connectionId;
    /** A human-readable display name for the connection. */
    public ?string $displayName = null;
    /** The OAuth2.0 client ID used to authenticate login attempts. This will be provided by the IdP. */
    public ?string $clientId = null;
    /**
    * The secret belonging to the OAuth2.0 client used to authenticate login attempts. This will be provided
    * by the IdP.
     */
    public ?string $clientSecret = null;
    /** A case-sensitive `https://` URL that uniquely identifies the IdP. This will be provided by the IdP. */
    public ?string $issuer = null;
    /** The location of the URL that starts an OAuth login at the IdP. This will be provided by the IdP. */
    public ?string $authorizationURL = null;
    /**
    * The location of the URL that issues OAuth2.0 access tokens and OIDC ID tokens. This will be provided by
    * the IdP.
     */
    public ?string $tokenURL = null;
    /**
    * The location of the IDP's
    * [UserInfo Endpoint](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo). This will be
    * provided by the IdP.
     */
    public ?string $userinfoURL = null;
    /**
    * The location of the IdP's JSON Web Key Set, used to verify credentials issued by the IdP. This will be
    * provided by the IdP.
     */
    public ?string $jwksURL = null;
    /**
    * Name of the IdP. Enum with possible values: `classlink`, `cyberark`, `duo`, `google-workspace`,
    * `jumpcloud`, `keycloak`, `miniorange`, `microsoft-entra`, `okta`, `onelogin`, `pingfederate`,
    * `rippling`, `salesforce`, `shibboleth`, or `generic`.
    *
    * Specifying a known provider allows Stytch to handle any provider-specific logic.
     */
    public ?string $identityProvider = null;
    /**
    * Include a space-separated list of custom scopes that you'd like to include. Note that this list must be
    * URL encoded, e.g. the spaces must be expressed as %20.
     */
    public ?string $customScopes = null;
    /**
    * An object that represents the attributes used to identify a Member. This object will map the IdP-defined
    * User attributes to Stytch-specific values, which will appear on the member's Trusted Metadata.
     */
    public ?array $attributeMapping = null;

    public function __construct(
        string $organizationId,
        string $connectionId,
        ?string $displayName = null,
        ?string $clientId = null,
        ?string $clientSecret = null,
        ?string $issuer = null,
        ?string $authorizationURL = null,
        ?string $tokenURL = null,
        ?string $userinfoURL = null,
        ?string $jwksURL = null,
        ?string $identityProvider = null,
        ?string $customScopes = null,
        ?array $attributeMapping = null
    ) {
        $this->organizationId = $organizationId;
        $this->connectionId = $connectionId;
        $this->displayName = $displayName;
        $this->clientId = $clientId;
        $this->clientSecret = $clientSecret;
        $this->issuer = $issuer;
        $this->authorizationURL = $authorizationURL;
        $this->tokenURL = $tokenURL;
        $this->userinfoURL = $userinfoURL;
        $this->jwksURL = $jwksURL;
        $this->identityProvider = $identityProvider;
        $this->customScopes = $customScopes;
        $this->attributeMapping = $attributeMapping;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['organization_id'],
            $data['connection_id'],
            $data['display_name'] ?? null,
            $data['client_id'] ?? null,
            $data['client_secret'] ?? null,
            $data['issuer'] ?? null,
            $data['authorization_url'] ?? null,
            $data['token_url'] ?? null,
            $data['userinfo_url'] ?? null,
            $data['jwks_url'] ?? null,
            $data['identity_provider'] ?? null,
            $data['custom_scopes'] ?? null,
            $data['attribute_mapping'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'organization_id' => $this->organizationId,
            'connection_id' => $this->connectionId,
            'display_name' => $this->displayName,
            'client_id' => $this->clientId,
            'client_secret' => $this->clientSecret,
            'issuer' => $this->issuer,
            'authorization_url' => $this->authorizationURL,
            'token_url' => $this->tokenURL,
            'userinfo_url' => $this->userinfoURL,
            'jwks_url' => $this->jwksURL,
            'identity_provider' => $this->identityProvider,
            'custom_scopes' => $this->customScopes,
            'attribute_mapping' => $this->attributeMapping,
        ];
    }
}
