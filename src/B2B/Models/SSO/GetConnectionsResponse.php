<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\SSO;

class GetConnectionsResponse
{
    /**
    * Globally unique UUID that is returned with every API call. This value is important to log for debugging
    * purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
     */
    public string $requestId;
    /**
    * The list of [SAML Connections](https://stytch.com/docs/b2b/api/saml-connection-object) owned by this
    * organization.
     */
    public array $samlConnections;
    /**
    * The list of [OIDC Connections](https://stytch.com/docs/b2b/api/oidc-connection-object) owned by this
    * organization.
     */
    public array $oidcConnections;
    /**
    * The list of [External Connections](https://stytch.com/docs/b2b/api/external-connection-object) owned by
    * this organization.
     */
    public array $externalConnections;
    /**
    * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
    * 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
     */
    public int $statusCode;

    public function __construct(
        string $requestId,
        array $samlConnections,
        array $oidcConnections,
        array $externalConnections,
        int $statusCode
    ) {
        $this->requestId = $requestId;
        $this->samlConnections = $samlConnections;
        $this->oidcConnections = $oidcConnections;
        $this->externalConnections = $externalConnections;
        $this->statusCode = $statusCode;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['request_id'],
            isset($data['saml_connections']) ? array_map(fn ($item) => SAMLConnection::fromArray($item), $data['saml_connections']) : [],
            isset($data['oidc_connections']) ? array_map(fn ($item) => OIDCConnection::fromArray($item), $data['oidc_connections']) : [],
            isset($data['external_connections']) ? array_map(fn ($item) => Connection::fromArray($item), $data['external_connections']) : [],
            $data['status_code']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'request_id' => $this->requestId,
            'saml_connections' => $this->samlConnections,
            'oidc_connections' => $this->oidcConnections,
            'external_connections' => $this->externalConnections,
            'status_code' => $this->statusCode,
        ];
    }
}
