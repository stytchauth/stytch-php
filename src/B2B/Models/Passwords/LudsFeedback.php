<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\Passwords;

final class LudsFeedback
{
    /** For LUDS validation, whether the password contains at least one lowercase letter. */
    public bool $hasLowerCase;
    /** For LUDS validation, whether the password contains at least one uppercase letter. */
    public bool $hasUpperCase;
    /** For LUDS validation, whether the password contains at least one digit. */
    public bool $hasDigit;
    /**
    * For LUDS validation, whether the password contains at least one symbol. Any UTF8 character outside of
    * a-z or A-Z may count as a valid symbol.
     */
    public bool $hasSymbol;
    /**
    * For LUDS validation, the number of complexity requirements that are missing from the password.
    *       Check the complexity fields to see which requirements are missing.
     */
    public int $missingComplexity;
    /**
    * For LUDS validation, this is the required length of the password that you've set minus the length of the
    * password being checked.
    *       The user will need to add this many characters to the password to make it valid.
     */
    public int $missingCharacters;

    public function __construct(
        bool $hasLowerCase,
        bool $hasUpperCase,
        bool $hasDigit,
        bool $hasSymbol,
        int $missingComplexity,
        int $missingCharacters
    ) {
        $this->hasLowerCase = $hasLowerCase;
        $this->hasUpperCase = $hasUpperCase;
        $this->hasDigit = $hasDigit;
        $this->hasSymbol = $hasSymbol;
        $this->missingComplexity = $missingComplexity;
        $this->missingCharacters = $missingCharacters;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['has_lower_case'],
            $data['has_upper_case'],
            $data['has_digit'],
            $data['has_symbol'],
            $data['missing_complexity'],
            $data['missing_characters']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'has_lower_case' => $this->hasLowerCase,
            'has_upper_case' => $this->hasUpperCase,
            'has_digit' => $this->hasDigit,
            'has_symbol' => $this->hasSymbol,
            'missing_complexity' => $this->missingComplexity,
            'missing_characters' => $this->missingCharacters,
        ];
    }
}
