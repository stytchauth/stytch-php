<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\Passwords\Email;

class ResetRequest
{
    /** The password reset token to authenticate. */
    public string $passwordResetToken;
    /**
    * The password to authenticate, reset, or set for the first time. Any UTF8 character is allowed, e.g.
    * spaces, emojis, non-English characters, etc.
     */
    public string $password;
    /**
    * Reuse an existing session instead of creating a new one. If you provide a `session_token`, Stytch will
    * update the session.
    *       If the `session_token` and `magic_links_token` belong to different Members, the `session_token`
    * will be ignored. This endpoint will error if
    *       both `session_token` and `session_jwt` are provided.
     */
    public ?string $sessionToken = null;
    /**
    * Set the session lifetime to be this many minutes from now. This will start a new session if one doesn't
    * already exist,
    *   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
    * `session_jwt` will have a fixed lifetime of
    *   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
    *
    *   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
    *
    *   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
    * extend the session this many minutes.
    *
    *   If the `session_duration_minutes` parameter is not specified, a Stytch session will be created with a
    * 60 minute duration. If you don't want
    *   to use the Stytch session product, you can ignore the session fields in the response.
     */
    public ?int $sessionDurationMinutes = null;
    /**
    * Reuse an existing session instead of creating a new one. If you provide a `session_jwt`, Stytch will
    * update the session. If the `session_jwt`
    *       and `magic_links_token` belong to different Members, the `session_jwt` will be ignored. This
    * endpoint will error if both `session_token` and `session_jwt`
    *       are provided.
     */
    public ?string $sessionJwt = null;
    /** A base64url encoded one time secret used to validate that the request starts and ends on the same device. */
    public ?string $codeVerifier = null;
    /**
    * Add a custom claims map to the Session being authenticated. Claims are only created if a Session is
    * initialized by providing a value in
    *   `session_duration_minutes`. Claims will be included on the Session object and in the JWT. To update a
    * key in an existing Session, supply a new value. To
    *   delete a key, supply a null value. Custom claims made with reserved claims (`iss`, `sub`, `aud`,
    * `exp`, `nbf`, `iat`, `jti`) will be ignored.
    *   Total custom claims size cannot exceed four kilobytes.
     */
    public ?array $sessionCustomClaims = null;
    /**
    * If the Member needs to complete an MFA step, and the Member has a phone number, this endpoint will
    * pre-emptively send a one-time passcode (OTP) to the Member's phone number. The locale argument will be
    * used to determine which language to use when sending the passcode.
    *
    * Parameter is a [IETF BCP 47 language tag](https://www.w3.org/International/articles/language-tags/),
    * e.g. `"en"`.
    *
    * Currently supported languages are English (`"en"`), Spanish (`"es"`), and Brazilian Portuguese
    * (`"pt-br"`); if no value is provided, the copy defaults to English.
    *
    * Request support for additional languages
    * [here](https://docs.google.com/forms/d/e/1FAIpQLScZSpAu_m2AmLXRT3F3kap-s_mcV6UTBitYn6CdyWP0-o7YjQ/viewform?usp=sf_link")!
     */
    public ?string $locale = null;
    /**
    * Adds this primary authentication factor to the intermediate session token. If the resulting set of
    * factors satisfies the organization's primary authentication requirements and MFA requirements, the
    * intermediate session token will be consumed and converted to a member session. If not, the same
    * intermediate session token will be returned.
     */
    public ?string $intermediateSessionToken = null;
    /**
    * If the `telemetry_id` is passed, as part of this request, Stytch will call the
    * [Fingerprint Lookup API](https://stytch.com/docs/fraud/api/fingerprint-lookup) and store the associated
    * fingerprints and IPGEO information for the Member. See the User Device History guide (coming soon) for
    * more information. Your workspace must be enabled for Device Fingerprinting to use this feature.
     */
    public ?string $telemetryId = null;

    public function __construct(
        string $passwordResetToken,
        string $password,
        ?string $sessionToken = null,
        ?int $sessionDurationMinutes = null,
        ?string $sessionJwt = null,
        ?string $codeVerifier = null,
        ?array $sessionCustomClaims = null,
        ?string $locale = null,
        ?string $intermediateSessionToken = null,
        ?string $telemetryId = null
    ) {
        $this->passwordResetToken = $passwordResetToken;
        $this->password = $password;
        $this->sessionToken = $sessionToken;
        $this->sessionDurationMinutes = $sessionDurationMinutes;
        $this->sessionJwt = $sessionJwt;
        $this->codeVerifier = $codeVerifier;
        $this->sessionCustomClaims = $sessionCustomClaims;
        $this->locale = $locale;
        $this->intermediateSessionToken = $intermediateSessionToken;
        $this->telemetryId = $telemetryId;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['password_reset_token'],
            $data['password'],
            $data['session_token'] ?? null,
            $data['session_duration_minutes'] ?? null,
            $data['session_jwt'] ?? null,
            $data['code_verifier'] ?? null,
            $data['session_custom_claims'] ?? null,
            $data['locale'] ?? null,
            $data['intermediate_session_token'] ?? null,
            $data['telemetry_id'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'password_reset_token' => $this->passwordResetToken,
            'password' => $this->password,
            'session_token' => $this->sessionToken,
            'session_duration_minutes' => $this->sessionDurationMinutes,
            'session_jwt' => $this->sessionJwt,
            'code_verifier' => $this->codeVerifier,
            'session_custom_claims' => $this->sessionCustomClaims,
            'locale' => $this->locale,
            'intermediate_session_token' => $this->intermediateSessionToken,
            'telemetry_id' => $this->telemetryId,
        ];
    }
}
