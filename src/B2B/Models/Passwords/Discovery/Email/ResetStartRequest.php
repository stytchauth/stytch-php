<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\Passwords\Discovery\Email;

class ResetStartRequest
{
    /** The email address of the Member to start the email reset process for. */
    public string $emailAddress;
    /**
    * The URL that the Member clicks from the reset password link. This URL should be an endpoint in the
    * backend server that verifies the request by querying
    *   Stytch's authenticate endpoint and finishes the reset password flow. If this value is not passed, the
    * default `reset_password_redirect_url` that you set in your Dashboard is used.
    *   If you have not set a default `reset_password_redirect_url`, an error is returned.
     */
    public ?string $resetPasswordRedirectURL = null;
    /**
    * The URL that the end user clicks from the discovery Magic Link. This URL should be an endpoint in the
    * backend server that
    *   verifies the request by querying Stytch's discovery authenticate endpoint and continues the flow. If
    * this value is not passed, the default
    *   discovery redirect URL that you set in your Dashboard is used. If you have not set a default discovery
    * redirect URL, an error is returned.
     */
    public ?string $discoveryRedirectURL = null;
    /**
    * Use a custom template for reset password emails. By default, it will use your default email template.
    * The template must be a template using our built-in customizations or a custom HTML email for Passwords -
    * Reset Password.
     */
    public ?string $resetPasswordTemplateId = null;
    /**
    * Sets a time limit after which the email link to reset the member's password will no longer be valid. The
    * minimum allowed expiration is 5 minutes and the maximum is 10080 minutes (7 days). By default, the
    * expiration is 30 minutes.
     */
    public ?int $resetPasswordExpirationMinutes = null;
    public ?string $pkceCodeChallenge = null;
    /**
    * Used to determine which language to use when sending the user this delivery method. Parameter is a
    * [IETF BCP 47 language tag](https://www.w3.org/International/articles/language-tags/), e.g. `"en"`.
    *
    * Currently supported languages are English (`"en"`), Spanish (`"es"`), French (`"fr"`) and Brazilian
    * Portuguese (`"pt-br"`); if no value is provided, the copy defaults to English.
    *
    * Request support for additional languages
    * [here](https://docs.google.com/forms/d/e/1FAIpQLScZSpAu_m2AmLXRT3F3kap-s_mcV6UTBitYn6CdyWP0-o7YjQ/viewform?usp=sf_link")!
     */
    public ?string $locale = null;
    /**
    * Use a custom template for verification emails sent during password reset flows. When cross-organization
    * passwords are enabled for your Project, this template will be used the first time a user sets a password
    * via a
    *   password reset flow. By default, it will use your default email template. The template must be a
    * template using our built-in customizations or a custom HTML email for Passwords - Email Verification.
     */
    public ?string $verifyEmailTemplateId = null;

    public function __construct(
        string $emailAddress,
        ?string $resetPasswordRedirectURL = null,
        ?string $discoveryRedirectURL = null,
        ?string $resetPasswordTemplateId = null,
        ?int $resetPasswordExpirationMinutes = null,
        ?string $pkceCodeChallenge = null,
        ?string $locale = null,
        ?string $verifyEmailTemplateId = null
    ) {
        $this->emailAddress = $emailAddress;
        $this->resetPasswordRedirectURL = $resetPasswordRedirectURL;
        $this->discoveryRedirectURL = $discoveryRedirectURL;
        $this->resetPasswordTemplateId = $resetPasswordTemplateId;
        $this->resetPasswordExpirationMinutes = $resetPasswordExpirationMinutes;
        $this->pkceCodeChallenge = $pkceCodeChallenge;
        $this->locale = $locale;
        $this->verifyEmailTemplateId = $verifyEmailTemplateId;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['email_address'],
            $data['reset_password_redirect_url'] ?? null,
            $data['discovery_redirect_url'] ?? null,
            $data['reset_password_template_id'] ?? null,
            $data['reset_password_expiration_minutes'] ?? null,
            $data['pkce_code_challenge'] ?? null,
            $data['locale'] ?? null,
            $data['verify_email_template_id'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'email_address' => $this->emailAddress,
            'reset_password_redirect_url' => $this->resetPasswordRedirectURL,
            'discovery_redirect_url' => $this->discoveryRedirectURL,
            'reset_password_template_id' => $this->resetPasswordTemplateId,
            'reset_password_expiration_minutes' => $this->resetPasswordExpirationMinutes,
            'pkce_code_challenge' => $this->pkceCodeChallenge,
            'locale' => $this->locale,
            'verify_email_template_id' => $this->verifyEmailTemplateId,
        ];
    }
}
