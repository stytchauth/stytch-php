<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\Passwords;

final class MigrateRequest
{
    /** The email address of the Member. */
    public string $emailAddress;
    /** The password hash. For a Scrypt or PBKDF2 hash, the hash needs to be a base64 encoded string. */
    public string $hash;
    /**
    * The password hash used. Currently `bcrypt`, `scrypt`, `argon_2i`, `argon_2id`, `md_5`, `sha_1`, and
    * `pbkdf_2` are supported.
     */
    public string $hashType;
    /**
    * Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
    * perform operations on an Organization, so be sure to preserve this value. You may also use the
    * organization_slug or organization_external_id here as a convenience.
     */
    public string $organizationId;
    /** Optional parameters for MD-5 hash types. */
    public ?\Stytch\Consumer\Models\Passwords\MD5Config $md5Config = null;
    /** Required parameters if the argon2 hex form, as opposed to the encoded form, is supplied. */
    public ?\Stytch\Consumer\Models\Passwords\Argon2Config $argon2Config = null;
    /** Optional parameters for SHA-1 hash types. */
    public ?\Stytch\Consumer\Models\Passwords\SHA1Config $sha1Config = null;
    /** Required parameters if the scrypt is not provided in a **PHC encoded form**. */
    public ?\Stytch\Consumer\Models\Passwords\ScryptConfig $scryptConfig = null;
    /**
    * Required additional parameters for PBKDF2 hash keys. Note that we use the SHA-256 by default, please
    * contact [support@stytch.com](mailto:support@stytch.com) if you use another hashing function.
     */
    public ?\Stytch\Consumer\Models\Passwords\PBKDF2Config $pbkdf2Config = null;
    /** The name of the Member. Each field in the name object is optional. */
    public ?string $name = null;
    /** An arbitrary JSON object for storing application-specific data or identity-provider-specific data. */
    public ?array $trustedMetadata = null;
    /**
    * An arbitrary JSON object of application-specific data. These fields can be edited directly by the
    *   frontend SDK, and should not be used to store critical information. See the
    * [Metadata resource](https://stytch.com/docs/b2b/api/metadata)
    *   for complete field behavior details.
     */
    public ?array $untrustedMetadata = null;
    /**
    * Roles to explicitly assign to this Member.
    *  Will completely replace any existing explicitly assigned roles. See the
    *  [RBAC guide](https://stytch.com/docs/b2b/guides/rbac/role-assignment) for more information about role
    * assignment.
    *
    *    If a Role is removed from a Member, and the Member is also implicitly assigned this Role from an SSO
    * connection
    *    or an SSO group, we will by default revoke any existing sessions for the Member that contain any SSO
    *    authentication factors with the affected connection ID. You can preserve these sessions by passing in
    * the
    *    `preserve_existing_sessions` parameter with a value of `true`.
     */
    public ?array $roles = null;
    /**
    * Whether to preserve existing sessions when explicit Roles that are revoked are also implicitly assigned
    *   by SSO connection or SSO group. Defaults to `false` - that is, existing Member Sessions that contain
    * SSO
    *   authentication factors with the affected SSO connection IDs will be revoked.
     */
    public ?bool $preserveExistingSessions = null;
    /**
    * The Member's phone number. A Member may only have one phone number. The phone number should be in E.164
    * format (i.e. +1XXXXXXXXXX).
     */
    public ?string $mfaPhoneNumber = null;
    /**
    * Whether to set the user's phone number as verified. This is a dangerous field. This flag should only be
    * set if you can attest that
    *    the user owns the phone number in question.
     */
    public ?bool $setPhoneNumberVerified = null;
    /**
    * If a new member is created, this will set an identifier that can be used in most API calls where a
    * `member_id` is expected. This is a string consisting of alphanumeric, `.`, `_`, `-`, or `|` characters
    * with a maximum length of 128 characters. External IDs must be unique within an organization, but may be
    * reused across different organizations in the same project. Note that if a member already exists, this
    * field will be ignored.
     */
    public ?string $externalId = null;

    public function __construct(
        string $emailAddress,
        string $hash,
        string $hashType,
        string $organizationId,
        ?\Stytch\Consumer\Models\Passwords\MD5Config $md5Config = null,
        ?\Stytch\Consumer\Models\Passwords\Argon2Config $argon2Config = null,
        ?\Stytch\Consumer\Models\Passwords\SHA1Config $sha1Config = null,
        ?\Stytch\Consumer\Models\Passwords\ScryptConfig $scryptConfig = null,
        ?\Stytch\Consumer\Models\Passwords\PBKDF2Config $pbkdf2Config = null,
        ?string $name = null,
        ?array $trustedMetadata = null,
        ?array $untrustedMetadata = null,
        ?array $roles = null,
        ?bool $preserveExistingSessions = null,
        ?string $mfaPhoneNumber = null,
        ?bool $setPhoneNumberVerified = null,
        ?string $externalId = null
    ) {
        $this->emailAddress = $emailAddress;
        $this->hash = $hash;
        $this->hashType = $hashType;
        $this->organizationId = $organizationId;
        $this->md5Config = $md5Config;
        $this->argon2Config = $argon2Config;
        $this->sha1Config = $sha1Config;
        $this->scryptConfig = $scryptConfig;
        $this->pbkdf2Config = $pbkdf2Config;
        $this->name = $name;
        $this->trustedMetadata = $trustedMetadata;
        $this->untrustedMetadata = $untrustedMetadata;
        $this->roles = $roles;
        $this->preserveExistingSessions = $preserveExistingSessions;
        $this->mfaPhoneNumber = $mfaPhoneNumber;
        $this->setPhoneNumberVerified = $setPhoneNumberVerified;
        $this->externalId = $externalId;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['email_address'],
            $data['hash'],
            $data['hash_type'],
            $data['organization_id'],
            isset($data['md_5_config']) && $data['md_5_config'] !== null ? \Stytch\Consumer\Models\Passwords\MD5Config::fromArray($data['md_5_config']) : null,
            isset($data['argon_2_config']) && $data['argon_2_config'] !== null ? \Stytch\Consumer\Models\Passwords\Argon2Config::fromArray($data['argon_2_config']) : null,
            isset($data['sha_1_config']) && $data['sha_1_config'] !== null ? \Stytch\Consumer\Models\Passwords\SHA1Config::fromArray($data['sha_1_config']) : null,
            isset($data['scrypt_config']) && $data['scrypt_config'] !== null ? \Stytch\Consumer\Models\Passwords\ScryptConfig::fromArray($data['scrypt_config']) : null,
            isset($data['pbkdf_2_config']) && $data['pbkdf_2_config'] !== null ? \Stytch\Consumer\Models\Passwords\PBKDF2Config::fromArray($data['pbkdf_2_config']) : null,
            $data['name'] ?? null,
            $data['trusted_metadata'] ?? null,
            $data['untrusted_metadata'] ?? null,
            $data['roles'] ?? null,
            $data['preserve_existing_sessions'] ?? null,
            $data['mfa_phone_number'] ?? null,
            $data['set_phone_number_verified'] ?? null,
            $data['external_id'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'email_address' => $this->emailAddress,
            'hash' => $this->hash,
            'hash_type' => $this->hashType,
            'organization_id' => $this->organizationId,
            'md_5_config' => $this->md5Config,
            'argon_2_config' => $this->argon2Config,
            'sha_1_config' => $this->sha1Config,
            'scrypt_config' => $this->scryptConfig,
            'pbkdf_2_config' => $this->pbkdf2Config,
            'name' => $this->name,
            'trusted_metadata' => $this->trustedMetadata,
            'untrusted_metadata' => $this->untrustedMetadata,
            'roles' => $this->roles,
            'preserve_existing_sessions' => $this->preserveExistingSessions,
            'mfa_phone_number' => $this->mfaPhoneNumber,
            'set_phone_number_verified' => $this->setPhoneNumberVerified,
            'external_id' => $this->externalId,
        ];
    }
}
