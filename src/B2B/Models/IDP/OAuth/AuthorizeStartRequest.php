<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\IDP\OAuth;


final class AuthorizeStartRequest
{
    /** The ID of the Connected App client. */
    public string $clientId;
    /**
    * The callback URI used to redirect the user after authentication. This is the same URI provided at the
    * start of the OAuth flow.  This field is required when using the `authorization_code` grant.
     */
    public string $redirectUri;
    /** The OAuth 2.0 response type. For authorization code flows this value is `code`. */
    public string $responseType;
    /** An array of scopes requested by the client. */
    public array $scopes;
    /**
    * Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
    * perform operations on an Organization, so be sure to preserve this value. You may also use the
    * organization_slug or organization_external_id here as a convenience.
     */
    public ?string $organizationId = null;
    /**
    * Globally unique UUID that identifies a specific Member. The `member_id` is critical to perform
    * operations on a Member, so be sure to preserve this value. You may use an external_id here if one is set
    * for the member.
     */
    public ?string $memberId = null;
    /** A secret token for a given Stytch Session. */
    public ?string $sessionToken = null;
    /** The JSON Web Token (JWT) for a given Stytch Session. */
    public ?string $sessionJwt = null;
    /**
    * Space separated list that specifies how the Authorization Server should prompt the user for
    * reauthentication and consent. Only `consent` is supported today.
     */
    public ?string $prompt = null;

    public function __construct(
        string $clientId,
        string $redirectUri,
        string $responseType,
        array $scopes,
        ?string $organizationId = null,
        ?string $memberId = null,
        ?string $sessionToken = null,
        ?string $sessionJwt = null,
        ?string $prompt = null
    ) {
        $this->clientId = $clientId;
        $this->redirectUri = $redirectUri;
        $this->responseType = $responseType;
        $this->scopes = $scopes;
        $this->organizationId = $organizationId;
        $this->memberId = $memberId;
        $this->sessionToken = $sessionToken;
        $this->sessionJwt = $sessionJwt;
        $this->prompt = $prompt;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['client_id'],
            $data['redirect_uri'],
            $data['response_type'],
            $data['scopes'],
            $data['organization_id'] ?? null,
            $data['member_id'] ?? null,
            $data['session_token'] ?? null,
            $data['session_jwt'] ?? null,
            $data['prompt'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'client_id' => $this->clientId,
            'redirect_uri' => $this->redirectUri,
            'response_type' => $this->responseType,
            'scopes' => $this->scopes,
            'organization_id' => $this->organizationId,
            'member_id' => $this->memberId,
            'session_token' => $this->sessionToken,
            'session_jwt' => $this->sessionJwt,
            'prompt' => $this->prompt,
        ];
    }
}