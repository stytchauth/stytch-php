<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\OTPs\Sms;

final class AuthenticateRequest
{
    /**
    * Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to
    * perform operations on an Organization, so be sure to preserve this value. You may also use the
    * organization_slug or organization_external_id here as a convenience.
     */
    public string $organizationId;
    /**
    * Globally unique UUID that identifies a specific Member. The `member_id` is critical to perform
    * operations on a Member, so be sure to preserve this value. You may use an external_id here if one is set
    * for the member.
     */
    public string $memberId;
    /** The code to authenticate. */
    public string $code;
    /**
    * The Intermediate Session Token. This token does not necessarily belong to a specific instance of a
    * Member, but represents a bag of factors that may be converted to a member session. The token can be used
    * with the [OTP SMS Authenticate endpoint](https://stytch.com/docs/b2b/api/authenticate-otp-sms),
    * [TOTP Authenticate endpoint](https://stytch.com/docs/b2b/api/authenticate-totp), or
    * [Recovery Codes Recover endpoint](https://stytch.com/docs/b2b/api/recovery-codes-recover) to complete an
    * MFA flow and log in to the Organization. The token has a default expiry of 10 minutes. It can also be
    * used with the
    * [Exchange Intermediate Session endpoint](https://stytch.com/docs/b2b/api/exchange-intermediate-session)
    * to join a specific Organization that allows the factors represented by the intermediate session token;
    * or the
    * [Create Organization via Discovery endpoint](https://stytch.com/docs/b2b/api/create-organization-via-discovery) to create a new Organization and Member. Intermediate Session Tokens have a default expiry of 10 minutes.
     */
    public ?string $intermediateSessionToken = null;
    /** A secret token for a given Stytch Session. */
    public ?string $sessionToken = null;
    /** The JSON Web Token (JWT) for a given Stytch Session. */
    public ?string $sessionJwt = null;
    /**
    * Set the session lifetime to be this many minutes from now. This will start a new session if one doesn't
    * already exist,
    *   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
    * `session_jwt` will have a fixed lifetime of
    *   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
    *
    *   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
    *
    *   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
    * extend the session this many minutes.
    *
    *   If the `session_duration_minutes` parameter is not specified, a Stytch session will be created with a
    * 60 minute duration. If you don't want
    *   to use the Stytch session product, you can ignore the session fields in the response.
     */
    public ?int $sessionDurationMinutes = null;
    /**
    * Add a custom claims map to the Session being authenticated. Claims are only created if a Session is
    * initialized by providing a value in
    *   `session_duration_minutes`. Claims will be included on the Session object and in the JWT. To update a
    * key in an existing Session, supply a new value. To
    *   delete a key, supply a null value. Custom claims made with reserved claims (`iss`, `sub`, `aud`,
    * `exp`, `nbf`, `iat`, `jti`) will be ignored.
    *   Total custom claims size cannot exceed four kilobytes.
     */
    public ?array $sessionCustomClaims = null;
    /**
    * Optionally sets the Member’s MFA enrollment status upon a successful authentication. If the
    * Organization’s MFA policy is `REQUIRED_FOR_ALL`, this field will be ignored. If this field is not passed
    * in, the Member’s `mfa_enrolled` boolean will not be affected. The options are:
    *
    *   `enroll` – sets the Member's `mfa_enrolled` boolean to `true`. The Member will be required to complete
    * an MFA step upon subsequent logins to the Organization.
    *
    *   `unenroll` –  sets the Member's `mfa_enrolled` boolean to `false`. The Member will no longer be
    * required to complete MFA steps when logging in to the Organization.
     */
    public ?string $setMfaEnrollment = null;
    public ?bool $setDefaultMfa = null;
    /**
    * If the `telemetry_id` is passed, as part of this request, Stytch will call the
    * [Fingerprint Lookup API](https://stytch.com/docs/fraud/api/fingerprint-lookup) and store the associated
    * fingerprints and IPGEO information for the Member. Your workspace must be enabled for Device
    * Fingerprinting to use this feature.
     */
    public ?string $telemetryId = null;

    public function __construct(
        string $organizationId,
        string $memberId,
        string $code,
        ?string $intermediateSessionToken = null,
        ?string $sessionToken = null,
        ?string $sessionJwt = null,
        ?int $sessionDurationMinutes = null,
        ?array $sessionCustomClaims = null,
        ?string $setMfaEnrollment = null,
        ?bool $setDefaultMfa = null,
        ?string $telemetryId = null
    ) {
        $this->organizationId = $organizationId;
        $this->memberId = $memberId;
        $this->code = $code;
        $this->intermediateSessionToken = $intermediateSessionToken;
        $this->sessionToken = $sessionToken;
        $this->sessionJwt = $sessionJwt;
        $this->sessionDurationMinutes = $sessionDurationMinutes;
        $this->sessionCustomClaims = $sessionCustomClaims;
        $this->setMfaEnrollment = $setMfaEnrollment;
        $this->setDefaultMfa = $setDefaultMfa;
        $this->telemetryId = $telemetryId;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['organization_id'],
            $data['member_id'],
            $data['code'],
            $data['intermediate_session_token'] ?? null,
            $data['session_token'] ?? null,
            $data['session_jwt'] ?? null,
            $data['session_duration_minutes'] ?? null,
            $data['session_custom_claims'] ?? null,
            $data['set_mfa_enrollment'] ?? null,
            $data['set_default_mfa'] ?? null,
            $data['telemetry_id'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'organization_id' => $this->organizationId,
            'member_id' => $this->memberId,
            'code' => $this->code,
            'intermediate_session_token' => $this->intermediateSessionToken,
            'session_token' => $this->sessionToken,
            'session_jwt' => $this->sessionJwt,
            'session_duration_minutes' => $this->sessionDurationMinutes,
            'session_custom_claims' => $this->sessionCustomClaims,
            'set_mfa_enrollment' => $this->setMfaEnrollment,
            'set_default_mfa' => $this->setDefaultMfa,
            'telemetry_id' => $this->telemetryId,
        ];
    }
}
