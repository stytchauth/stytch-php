<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models;

enum M2MSearchQueryOperator: string
{
}

class M2MClient
{
    public string $client_id;
    public string $client_name;
    public string $client_description;
    public string $status;
    public array $scopes;
    public string $client_secret_last_four;
    public ?array $trusted_metadata;
    public ?string $next_client_secret_last_four;

    public function __construct(
        string $client_id,
        string $client_name,
        string $client_description,
        string $status,
        array $scopes,
        string $client_secret_last_four,
        ?array $trusted_metadata,
        ?string $next_client_secret_last_four
    ) {
        $this->client_id = $client_id;
        $this->client_name = $client_name;
        $this->client_description = $client_description;
        $this->status = $status;
        $this->scopes = $scopes;
        $this->client_secret_last_four = $client_secret_last_four;
        $this->trusted_metadata = $trusted_metadata;
        $this->next_client_secret_last_four = $next_client_secret_last_four;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['client_id'],
            $data['client_name'],
            $data['client_description'],
            $data['status'],
            $data['scopes'],
            $data['client_secret_last_four'],
            $data['trusted_metadata'] ?? null,
            $data['next_client_secret_last_four'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'client_id' => $this->client_id,
            'client_name' => $this->client_name,
            'client_description' => $this->client_description,
            'status' => $this->status,
            'scopes' => $this->scopes,
            'client_secret_last_four' => $this->client_secret_last_four,
            'trusted_metadata' => $this->trusted_metadata,
            'next_client_secret_last_four' => $this->next_client_secret_last_four,
        ];
    }
}

class M2MClientWithClientSecret
{
    public string $client_id;
    public string $client_secret;
    public string $client_name;
    public string $client_description;
    public string $status;
    public array $scopes;
    public string $client_secret_last_four;
    public ?array $trusted_metadata;
    public ?string $next_client_secret_last_four;

    public function __construct(
        string $client_id,
        string $client_secret,
        string $client_name,
        string $client_description,
        string $status,
        array $scopes,
        string $client_secret_last_four,
        ?array $trusted_metadata,
        ?string $next_client_secret_last_four
    ) {
        $this->client_id = $client_id;
        $this->client_secret = $client_secret;
        $this->client_name = $client_name;
        $this->client_description = $client_description;
        $this->status = $status;
        $this->scopes = $scopes;
        $this->client_secret_last_four = $client_secret_last_four;
        $this->trusted_metadata = $trusted_metadata;
        $this->next_client_secret_last_four = $next_client_secret_last_four;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['client_id'],
            $data['client_secret'],
            $data['client_name'],
            $data['client_description'],
            $data['status'],
            $data['scopes'],
            $data['client_secret_last_four'],
            $data['trusted_metadata'] ?? null,
            $data['next_client_secret_last_four'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'client_id' => $this->client_id,
            'client_secret' => $this->client_secret,
            'client_name' => $this->client_name,
            'client_description' => $this->client_description,
            'status' => $this->status,
            'scopes' => $this->scopes,
            'client_secret_last_four' => $this->client_secret_last_four,
            'trusted_metadata' => $this->trusted_metadata,
            'next_client_secret_last_four' => $this->next_client_secret_last_four,
        ];
    }
}

class M2MClientWithNextClientSecret
{
    public string $client_id;
    public string $next_client_secret;
    public string $client_name;
    public string $client_description;
    public string $status;
    public array $scopes;
    public string $client_secret_last_four;
    public ?array $trusted_metadata;
    public ?string $next_client_secret_last_four;

    public function __construct(
        string $client_id,
        string $next_client_secret,
        string $client_name,
        string $client_description,
        string $status,
        array $scopes,
        string $client_secret_last_four,
        ?array $trusted_metadata,
        ?string $next_client_secret_last_four
    ) {
        $this->client_id = $client_id;
        $this->next_client_secret = $next_client_secret;
        $this->client_name = $client_name;
        $this->client_description = $client_description;
        $this->status = $status;
        $this->scopes = $scopes;
        $this->client_secret_last_four = $client_secret_last_four;
        $this->trusted_metadata = $trusted_metadata;
        $this->next_client_secret_last_four = $next_client_secret_last_four;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['client_id'],
            $data['next_client_secret'],
            $data['client_name'],
            $data['client_description'],
            $data['status'],
            $data['scopes'],
            $data['client_secret_last_four'],
            $data['trusted_metadata'] ?? null,
            $data['next_client_secret_last_four'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'client_id' => $this->client_id,
            'next_client_secret' => $this->next_client_secret,
            'client_name' => $this->client_name,
            'client_description' => $this->client_description,
            'status' => $this->status,
            'scopes' => $this->scopes,
            'client_secret_last_four' => $this->client_secret_last_four,
            'trusted_metadata' => $this->trusted_metadata,
            'next_client_secret_last_four' => $this->next_client_secret_last_four,
        ];
    }
}

class M2MSearchQuery
{
    public string $operator;
    public array $operands;

    public function __construct(
        string $operator,
        array $operands
    ) {
        $this->operator = $operator;
        $this->operands = $operands;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['operator'],
            $data['operands']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'operator' => $this->operator,
            'operands' => $this->operands,
        ];
    }
}

class ResultsMetadata
{
    public int $total;
    public ?string $next_cursor;

    public function __construct(
        int $total,
        ?string $next_cursor
    ) {
        $this->total = $total;
        $this->next_cursor = $next_cursor;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['total'],
            $data['next_cursor'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'total' => $this->total,
            'next_cursor' => $this->next_cursor,
        ];
    }
}

