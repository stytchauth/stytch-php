<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models;

class B2BGetSCIMConnectionResponse
{
    public ?SCIMConnection $connection;

    public function __construct(
        ?SCIMConnection $connection
    ) {
        $this->connection = $connection;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['connection'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'connection' => $this->connection,
        ];
    }
}

class Role
{
    public string $value;
    public string $type;
    public bool $primary;

    public function __construct(
        string $value,
        string $type,
        bool $primary
    ) {
        $this->value = $value;
        $this->type = $type;
        $this->primary = $primary;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['value'],
            $data['type'],
            $data['primary']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'value' => $this->value,
            'type' => $this->type,
            'primary' => $this->primary,
        ];
    }
}

class Photo
{
    public string $value;
    public string $type;
    public bool $primary;

    public function __construct(
        string $value,
        string $type,
        bool $primary
    ) {
        $this->value = $value;
        $this->type = $type;
        $this->primary = $primary;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['value'],
            $data['type'],
            $data['primary']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'value' => $this->value,
            'type' => $this->type,
            'primary' => $this->primary,
        ];
    }
}

class SCIMRotateTokenStartResponse
{
    public ?SCIMConnectionWithNextToken $connection;

    public function __construct(
        ?SCIMConnectionWithNextToken $connection
    ) {
        $this->connection = $connection;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['connection'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'connection' => $this->connection,
        ];
    }
}

class SCIMConnectionWithNextToken
{
    public string $organization_id;
    public string $connection_id;
    public string $status;
    public string $display_name;
    public string $base_url;
    public string $identity_provider;
    public string $bearer_token_last_four;
    public ?string $bearer_token_expires_at;
    public string $next_bearer_token;
    public ?string $next_bearer_token_expires_at;
    public ?array $scim_group_implicit_role_assignments;

    public function __construct(
        string $organization_id,
        string $connection_id,
        string $status,
        string $display_name,
        string $base_url,
        string $identity_provider,
        string $bearer_token_last_four,
        ?string $bearer_token_expires_at,
        string $next_bearer_token,
        ?string $next_bearer_token_expires_at,
        ?array $scim_group_implicit_role_assignments
    ) {
        $this->organization_id = $organization_id;
        $this->connection_id = $connection_id;
        $this->status = $status;
        $this->display_name = $display_name;
        $this->base_url = $base_url;
        $this->identity_provider = $identity_provider;
        $this->bearer_token_last_four = $bearer_token_last_four;
        $this->bearer_token_expires_at = $bearer_token_expires_at;
        $this->next_bearer_token = $next_bearer_token;
        $this->next_bearer_token_expires_at = $next_bearer_token_expires_at;
        $this->scim_group_implicit_role_assignments = $scim_group_implicit_role_assignments;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['organization_id'],
            $data['connection_id'],
            $data['status'],
            $data['display_name'],
            $data['base_url'],
            $data['identity_provider'],
            $data['bearer_token_last_four'],
            $data['bearer_token_expires_at'] ?? null,
            $data['next_bearer_token'],
            $data['next_bearer_token_expires_at'] ?? null,
            $data['scim_group_implicit_role_assignments'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'organization_id' => $this->organization_id,
            'connection_id' => $this->connection_id,
            'status' => $this->status,
            'display_name' => $this->display_name,
            'base_url' => $this->base_url,
            'identity_provider' => $this->identity_provider,
            'bearer_token_last_four' => $this->bearer_token_last_four,
            'bearer_token_expires_at' => $this->bearer_token_expires_at,
            'next_bearer_token' => $this->next_bearer_token,
            'next_bearer_token_expires_at' => $this->next_bearer_token_expires_at,
            'scim_group_implicit_role_assignments' => $this->scim_group_implicit_role_assignments,
        ];
    }
}

class SCIMGroupImplicitRoleAssignments
{
    public string $role_id;
    public string $group_id;
    public string $group_name;

    public function __construct(
        string $role_id,
        string $group_id,
        string $group_name
    ) {
        $this->role_id = $role_id;
        $this->group_id = $group_id;
        $this->group_name = $group_name;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['role_id'],
            $data['group_id'],
            $data['group_name']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'role_id' => $this->role_id,
            'group_id' => $this->group_id,
            'group_name' => $this->group_name,
        ];
    }
}

class X509Certificate
{
    public string $value;
    public string $type;
    public bool $primary;

    public function __construct(
        string $value,
        string $type,
        bool $primary
    ) {
        $this->value = $value;
        $this->type = $type;
        $this->primary = $primary;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['value'],
            $data['type'],
            $data['primary']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'value' => $this->value,
            'type' => $this->type,
            'primary' => $this->primary,
        ];
    }
}

class B2BDeleteSCIMConnectionResponse
{
    public string $connection_id;

    public function __construct(
        string $connection_id
    ) {
        $this->connection_id = $connection_id;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['connection_id']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'connection_id' => $this->connection_id,
        ];
    }
}

class SCIMGroup
{
    public string $group_id;
    public string $group_name;
    public string $organization_id;
    public string $connection_id;

    public function __construct(
        string $group_id,
        string $group_name,
        string $organization_id,
        string $connection_id
    ) {
        $this->group_id = $group_id;
        $this->group_name = $group_name;
        $this->organization_id = $organization_id;
        $this->connection_id = $connection_id;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['group_id'],
            $data['group_name'],
            $data['organization_id'],
            $data['connection_id']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'group_id' => $this->group_id,
            'group_name' => $this->group_name,
            'organization_id' => $this->organization_id,
            'connection_id' => $this->connection_id,
        ];
    }
}

class EnterpriseExtension
{
    public string $employee_number;
    public string $cost_center;
    public string $division;
    public string $department;
    public string $organization;
    public ?Manager $manager;

    public function __construct(
        string $employee_number,
        string $cost_center,
        string $division,
        string $department,
        string $organization,
        ?Manager $manager
    ) {
        $this->employee_number = $employee_number;
        $this->cost_center = $cost_center;
        $this->division = $division;
        $this->department = $department;
        $this->organization = $organization;
        $this->manager = $manager;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['employee_number'],
            $data['cost_center'],
            $data['division'],
            $data['department'],
            $data['organization'],
            $data['manager'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'employee_number' => $this->employee_number,
            'cost_center' => $this->cost_center,
            'division' => $this->division,
            'department' => $this->department,
            'organization' => $this->organization,
            'manager' => $this->manager,
        ];
    }
}

class Manager
{
    public string $value;
    public string $ref;
    public string $display_name;

    public function __construct(
        string $value,
        string $ref,
        string $display_name
    ) {
        $this->value = $value;
        $this->ref = $ref;
        $this->display_name = $display_name;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['value'],
            $data['ref'],
            $data['display_name']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'value' => $this->value,
            'ref' => $this->ref,
            'display_name' => $this->display_name,
        ];
    }
}

class B2BCreateSCIMConnectionResponse
{
    public ?SCIMConnectionWithToken $connection;

    public function __construct(
        ?SCIMConnectionWithToken $connection
    ) {
        $this->connection = $connection;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['connection'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'connection' => $this->connection,
        ];
    }
}

class B2BUpdateSCIMConnectionResponse
{
    public ?SCIMConnection $connection;

    public function __construct(
        ?SCIMConnection $connection
    ) {
        $this->connection = $connection;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['connection'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'connection' => $this->connection,
        ];
    }
}

class SCIMAttributes
{
    public string $user_name;
    public string $id;
    public string $external_id;
    public ?Name $name;
    public bool $active;
    public ?array $groups;
    public string $display_name;
    public string $nick_name;
    public string $profile_url;
    public string $user_type;
    public string $title;
    public string $preferred_language;
    public string $locale;
    public string $timezone;
    public ?array $emails;
    public ?array $phone_numbers;
    public ?array $addresses;
    public ?EnterpriseExtension $enterprise_extension;
    public ?array $ims;
    public ?array $photos;
    public ?array $entitlements;
    public ?array $roles;
    public ?array $x509certificates;

    public function __construct(
        string $user_name,
        string $id,
        string $external_id,
        ?Name $name,
        bool $active,
        ?array $groups,
        string $display_name,
        string $nick_name,
        string $profile_url,
        string $user_type,
        string $title,
        string $preferred_language,
        string $locale,
        string $timezone,
        ?array $emails,
        ?array $phone_numbers,
        ?array $addresses,
        ?EnterpriseExtension $enterprise_extension,
        ?array $ims,
        ?array $photos,
        ?array $entitlements,
        ?array $roles,
        ?array $x509certificates
    ) {
        $this->user_name = $user_name;
        $this->id = $id;
        $this->external_id = $external_id;
        $this->name = $name;
        $this->active = $active;
        $this->groups = $groups;
        $this->display_name = $display_name;
        $this->nick_name = $nick_name;
        $this->profile_url = $profile_url;
        $this->user_type = $user_type;
        $this->title = $title;
        $this->preferred_language = $preferred_language;
        $this->locale = $locale;
        $this->timezone = $timezone;
        $this->emails = $emails;
        $this->phone_numbers = $phone_numbers;
        $this->addresses = $addresses;
        $this->enterprise_extension = $enterprise_extension;
        $this->ims = $ims;
        $this->photos = $photos;
        $this->entitlements = $entitlements;
        $this->roles = $roles;
        $this->x509certificates = $x509certificates;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['user_name'],
            $data['id'],
            $data['external_id'],
            $data['name'] ?? null,
            $data['active'],
            $data['groups'] ?? null,
            $data['display_name'],
            $data['nick_name'],
            $data['profile_url'],
            $data['user_type'],
            $data['title'],
            $data['preferred_language'],
            $data['locale'],
            $data['timezone'],
            $data['emails'] ?? null,
            $data['phone_numbers'] ?? null,
            $data['addresses'] ?? null,
            $data['enterprise_extension'] ?? null,
            $data['ims'] ?? null,
            $data['photos'] ?? null,
            $data['entitlements'] ?? null,
            $data['roles'] ?? null,
            $data['x509certificates'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'user_name' => $this->user_name,
            'id' => $this->id,
            'external_id' => $this->external_id,
            'name' => $this->name,
            'active' => $this->active,
            'groups' => $this->groups,
            'display_name' => $this->display_name,
            'nick_name' => $this->nick_name,
            'profile_url' => $this->profile_url,
            'user_type' => $this->user_type,
            'title' => $this->title,
            'preferred_language' => $this->preferred_language,
            'locale' => $this->locale,
            'timezone' => $this->timezone,
            'emails' => $this->emails,
            'phone_numbers' => $this->phone_numbers,
            'addresses' => $this->addresses,
            'enterprise_extension' => $this->enterprise_extension,
            'ims' => $this->ims,
            'photos' => $this->photos,
            'entitlements' => $this->entitlements,
            'roles' => $this->roles,
            'x509certificates' => $this->x509certificates,
        ];
    }
}

class SCIMConnectionWithToken
{
    public string $organization_id;
    public string $connection_id;
    public string $status;
    public string $display_name;
    public string $identity_provider;
    public string $base_url;
    public string $bearer_token;
    public ?string $bearer_token_expires_at;
    public ?array $scim_group_implicit_role_assignments;

    public function __construct(
        string $organization_id,
        string $connection_id,
        string $status,
        string $display_name,
        string $identity_provider,
        string $base_url,
        string $bearer_token,
        ?string $bearer_token_expires_at,
        ?array $scim_group_implicit_role_assignments
    ) {
        $this->organization_id = $organization_id;
        $this->connection_id = $connection_id;
        $this->status = $status;
        $this->display_name = $display_name;
        $this->identity_provider = $identity_provider;
        $this->base_url = $base_url;
        $this->bearer_token = $bearer_token;
        $this->bearer_token_expires_at = $bearer_token_expires_at;
        $this->scim_group_implicit_role_assignments = $scim_group_implicit_role_assignments;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['organization_id'],
            $data['connection_id'],
            $data['status'],
            $data['display_name'],
            $data['identity_provider'],
            $data['base_url'],
            $data['bearer_token'],
            $data['bearer_token_expires_at'] ?? null,
            $data['scim_group_implicit_role_assignments'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'organization_id' => $this->organization_id,
            'connection_id' => $this->connection_id,
            'status' => $this->status,
            'display_name' => $this->display_name,
            'identity_provider' => $this->identity_provider,
            'base_url' => $this->base_url,
            'bearer_token' => $this->bearer_token,
            'bearer_token_expires_at' => $this->bearer_token_expires_at,
            'scim_group_implicit_role_assignments' => $this->scim_group_implicit_role_assignments,
        ];
    }
}

class SCIMRotateTokenCancelResponse
{
    public ?SCIMConnection $connection;

    public function __construct(
        ?SCIMConnection $connection
    ) {
        $this->connection = $connection;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['connection'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'connection' => $this->connection,
        ];
    }
}

class SCIMRotateTokenCompleteResponse
{
    public ?SCIMConnection $connection;

    public function __construct(
        ?SCIMConnection $connection
    ) {
        $this->connection = $connection;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['connection'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'connection' => $this->connection,
        ];
    }
}

class Entitlement
{
    public string $value;
    public string $type;
    public bool $primary;

    public function __construct(
        string $value,
        string $type,
        bool $primary
    ) {
        $this->value = $value;
        $this->type = $type;
        $this->primary = $primary;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['value'],
            $data['type'],
            $data['primary']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'value' => $this->value,
            'type' => $this->type,
            'primary' => $this->primary,
        ];
    }
}

class PhoneNumber
{
    public string $value;
    public string $type;
    public bool $primary;

    public function __construct(
        string $value,
        string $type,
        bool $primary
    ) {
        $this->value = $value;
        $this->type = $type;
        $this->primary = $primary;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['value'],
            $data['type'],
            $data['primary']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'value' => $this->value,
            'type' => $this->type,
            'primary' => $this->primary,
        ];
    }
}

class SCIMConnection
{
    public string $organization_id;
    public string $connection_id;
    public string $status;
    public string $display_name;
    public string $identity_provider;
    public string $base_url;
    public string $bearer_token_last_four;
    public ?string $bearer_token_expires_at;
    public ?array $scim_group_implicit_role_assignments;
    public string $next_bearer_token_last_four;
    public ?string $next_bearer_token_expires_at;

    public function __construct(
        string $organization_id,
        string $connection_id,
        string $status,
        string $display_name,
        string $identity_provider,
        string $base_url,
        string $bearer_token_last_four,
        ?string $bearer_token_expires_at,
        ?array $scim_group_implicit_role_assignments,
        string $next_bearer_token_last_four,
        ?string $next_bearer_token_expires_at
    ) {
        $this->organization_id = $organization_id;
        $this->connection_id = $connection_id;
        $this->status = $status;
        $this->display_name = $display_name;
        $this->identity_provider = $identity_provider;
        $this->base_url = $base_url;
        $this->bearer_token_last_four = $bearer_token_last_four;
        $this->bearer_token_expires_at = $bearer_token_expires_at;
        $this->scim_group_implicit_role_assignments = $scim_group_implicit_role_assignments;
        $this->next_bearer_token_last_four = $next_bearer_token_last_four;
        $this->next_bearer_token_expires_at = $next_bearer_token_expires_at;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['organization_id'],
            $data['connection_id'],
            $data['status'],
            $data['display_name'],
            $data['identity_provider'],
            $data['base_url'],
            $data['bearer_token_last_four'],
            $data['bearer_token_expires_at'] ?? null,
            $data['scim_group_implicit_role_assignments'] ?? null,
            $data['next_bearer_token_last_four'],
            $data['next_bearer_token_expires_at'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'organization_id' => $this->organization_id,
            'connection_id' => $this->connection_id,
            'status' => $this->status,
            'display_name' => $this->display_name,
            'identity_provider' => $this->identity_provider,
            'base_url' => $this->base_url,
            'bearer_token_last_four' => $this->bearer_token_last_four,
            'bearer_token_expires_at' => $this->bearer_token_expires_at,
            'scim_group_implicit_role_assignments' => $this->scim_group_implicit_role_assignments,
            'next_bearer_token_last_four' => $this->next_bearer_token_last_four,
            'next_bearer_token_expires_at' => $this->next_bearer_token_expires_at,
        ];
    }
}

class Name
{
    public string $formatted;
    public string $family_name;
    public string $given_name;
    public string $middle_name;
    public string $honorific_prefix;
    public string $honorific_suffix;

    public function __construct(
        string $formatted,
        string $family_name,
        string $given_name,
        string $middle_name,
        string $honorific_prefix,
        string $honorific_suffix
    ) {
        $this->formatted = $formatted;
        $this->family_name = $family_name;
        $this->given_name = $given_name;
        $this->middle_name = $middle_name;
        $this->honorific_prefix = $honorific_prefix;
        $this->honorific_suffix = $honorific_suffix;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['formatted'],
            $data['family_name'],
            $data['given_name'],
            $data['middle_name'],
            $data['honorific_prefix'],
            $data['honorific_suffix']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'formatted' => $this->formatted,
            'family_name' => $this->family_name,
            'given_name' => $this->given_name,
            'middle_name' => $this->middle_name,
            'honorific_prefix' => $this->honorific_prefix,
            'honorific_suffix' => $this->honorific_suffix,
        ];
    }
}

class Email
{
    public string $value;
    public string $type;
    public bool $primary;

    public function __construct(
        string $value,
        string $type,
        bool $primary
    ) {
        $this->value = $value;
        $this->type = $type;
        $this->primary = $primary;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['value'],
            $data['type'],
            $data['primary']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'value' => $this->value,
            'type' => $this->type,
            'primary' => $this->primary,
        ];
    }
}

class IMs
{
    public string $value;
    public string $type;
    public bool $primary;

    public function __construct(
        string $value,
        string $type,
        bool $primary
    ) {
        $this->value = $value;
        $this->type = $type;
        $this->primary = $primary;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['value'],
            $data['type'],
            $data['primary']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'value' => $this->value,
            'type' => $this->type,
            'primary' => $this->primary,
        ];
    }
}

class Address
{
    public string $formatted;
    public string $street_address;
    public string $locality;
    public string $region;
    public string $postal_code;
    public string $country;
    public string $type;
    public bool $primary;

    public function __construct(
        string $formatted,
        string $street_address,
        string $locality,
        string $region,
        string $postal_code,
        string $country,
        string $type,
        bool $primary
    ) {
        $this->formatted = $formatted;
        $this->street_address = $street_address;
        $this->locality = $locality;
        $this->region = $region;
        $this->postal_code = $postal_code;
        $this->country = $country;
        $this->type = $type;
        $this->primary = $primary;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['formatted'],
            $data['street_address'],
            $data['locality'],
            $data['region'],
            $data['postal_code'],
            $data['country'],
            $data['type'],
            $data['primary']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'formatted' => $this->formatted,
            'street_address' => $this->street_address,
            'locality' => $this->locality,
            'region' => $this->region,
            'postal_code' => $this->postal_code,
            'country' => $this->country,
            'type' => $this->type,
            'primary' => $this->primary,
        ];
    }
}

class Group
{
    public string $value;
    public string $display;

    public function __construct(
        string $value,
        string $display
    ) {
        $this->value = $value;
        $this->display = $display;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['value'],
            $data['display']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'value' => $this->value,
            'display' => $this->display,
        ];
    }
}

class B2BGetSCIMConnectionGroupsResponse
{
    public ?array $scim_groups;
    public ?string $next_cursor;

    public function __construct(
        ?array $scim_groups,
        ?string $next_cursor
    ) {
        $this->scim_groups = $scim_groups;
        $this->next_cursor = $next_cursor;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['scim_groups'] ?? null,
            $data['next_cursor'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'scim_groups' => $this->scim_groups,
            'next_cursor' => $this->next_cursor,
        ];
    }
}

class B2BCreateSCIMConnectionRequestOptions
{
    public ?mixed $authorization;

    public function __construct(
        ?mixed $authorization
    ) {
        $this->authorization = $authorization;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['authorization'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'authorization' => $this->authorization,
        ];
    }
}

class B2BUpdateSCIMConnectionRequestOptions
{
    public ?mixed $authorization;

    public function __construct(
        ?mixed $authorization
    ) {
        $this->authorization = $authorization;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['authorization'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'authorization' => $this->authorization,
        ];
    }
}

class B2BDeleteSCIMConnectionRequestOptions
{
    public ?mixed $authorization;

    public function __construct(
        ?mixed $authorization
    ) {
        $this->authorization = $authorization;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['authorization'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'authorization' => $this->authorization,
        ];
    }
}

class B2BGetSCIMConnectionRequestOptions
{
    public ?mixed $authorization;

    public function __construct(
        ?mixed $authorization
    ) {
        $this->authorization = $authorization;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['authorization'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'authorization' => $this->authorization,
        ];
    }
}

class SCIMRotateTokenStartRequestOptions
{
    public ?mixed $authorization;

    public function __construct(
        ?mixed $authorization
    ) {
        $this->authorization = $authorization;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['authorization'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'authorization' => $this->authorization,
        ];
    }
}

class SCIMRotateTokenCompleteRequestOptions
{
    public ?mixed $authorization;

    public function __construct(
        ?mixed $authorization
    ) {
        $this->authorization = $authorization;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['authorization'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'authorization' => $this->authorization,
        ];
    }
}

class SCIMRotateTokenCancelRequestOptions
{
    public ?mixed $authorization;

    public function __construct(
        ?mixed $authorization
    ) {
        $this->authorization = $authorization;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['authorization'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'authorization' => $this->authorization,
        ];
    }
}

class B2BGetSCIMConnectionGroupsRequestOptions
{
    public ?mixed $authorization;

    public function __construct(
        ?mixed $authorization
    ) {
        $this->authorization = $authorization;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['authorization'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'authorization' => $this->authorization,
        ];
    }
}

