<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models;

enum RuleAction: string
{
}

enum RuleType: string
{
}

enum VerdictAction: string
{
}

enum VerdictReasonActionAction: string
{
}

enum VerdictReasonOverrideAction: string
{
}

class ASNProperties
{
    public string $asn;
    public string $name;
    public string $network;

    public function __construct(
        string $asn,
        string $name,
        string $network
    ) {
        $this->asn = $asn;
        $this->name = $name;
        $this->network = $network;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['asn'],
            $data['name'],
            $data['network']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'asn' => $this->asn,
            'name' => $this->name,
            'network' => $this->network,
        ];
    }
}

class BrowserProperties
{
    public string $user_agent;

    public function __construct(
        string $user_agent
    ) {
        $this->user_agent = $user_agent;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['user_agent']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'user_agent' => $this->user_agent,
        ];
    }
}

class Fingerprints
{
    public string $network_fingerprint;
    public string $hardware_fingerprint;
    public string $browser_fingerprint;
    public string $visitor_fingerprint;
    public ?string $visitor_id;
    public ?string $browser_id;

    public function __construct(
        string $network_fingerprint,
        string $hardware_fingerprint,
        string $browser_fingerprint,
        string $visitor_fingerprint,
        ?string $visitor_id,
        ?string $browser_id
    ) {
        $this->network_fingerprint = $network_fingerprint;
        $this->hardware_fingerprint = $hardware_fingerprint;
        $this->browser_fingerprint = $browser_fingerprint;
        $this->visitor_fingerprint = $visitor_fingerprint;
        $this->visitor_id = $visitor_id;
        $this->browser_id = $browser_id;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['network_fingerprint'],
            $data['hardware_fingerprint'],
            $data['browser_fingerprint'],
            $data['visitor_fingerprint'],
            $data['visitor_id'] ?? null,
            $data['browser_id'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'network_fingerprint' => $this->network_fingerprint,
            'hardware_fingerprint' => $this->hardware_fingerprint,
            'browser_fingerprint' => $this->browser_fingerprint,
            'visitor_fingerprint' => $this->visitor_fingerprint,
            'visitor_id' => $this->visitor_id,
            'browser_id' => $this->browser_id,
        ];
    }
}

class IPGeoProperties
{
    public string $city;
    public string $region;
    public string $country;

    public function __construct(
        string $city,
        string $region,
        string $country
    ) {
        $this->city = $city;
        $this->region = $region;
        $this->country = $country;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['city'],
            $data['region'],
            $data['country']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'city' => $this->city,
            'region' => $this->region,
            'country' => $this->country,
        ];
    }
}

class Metadata
{
    public ?string $external_id;
    public ?string $organization_id;
    public ?string $user_action;

    public function __construct(
        ?string $external_id,
        ?string $organization_id,
        ?string $user_action
    ) {
        $this->external_id = $external_id;
        $this->organization_id = $organization_id;
        $this->user_action = $user_action;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['external_id'] ?? null,
            $data['organization_id'] ?? null,
            $data['user_action'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'external_id' => $this->external_id,
            'organization_id' => $this->organization_id,
            'user_action' => $this->user_action,
        ];
    }
}

class NetworkProperties
{
    public string $ip_address;
    public ASNProperties $asn;
    public IPGeoProperties $ip_geolocation;
    public bool $is_proxy;
    public bool $is_vpn;

    public function __construct(
        string $ip_address,
        ASNProperties $asn,
        IPGeoProperties $ip_geolocation,
        bool $is_proxy,
        bool $is_vpn
    ) {
        $this->ip_address = $ip_address;
        $this->asn = $asn;
        $this->ip_geolocation = $ip_geolocation;
        $this->is_proxy = $is_proxy;
        $this->is_vpn = $is_vpn;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['ip_address'],
            $data['asn'],
            $data['ip_geolocation'],
            $data['is_proxy'],
            $data['is_vpn']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'ip_address' => $this->ip_address,
            'asn' => $this->asn,
            'ip_geolocation' => $this->ip_geolocation,
            'is_proxy' => $this->is_proxy,
            'is_vpn' => $this->is_vpn,
        ];
    }
}

class Properties
{
    public NetworkProperties $network_properties;
    public BrowserProperties $browser_properties;

    public function __construct(
        NetworkProperties $network_properties,
        BrowserProperties $browser_properties
    ) {
        $this->network_properties = $network_properties;
        $this->browser_properties = $browser_properties;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['network_properties'],
            $data['browser_properties']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'network_properties' => $this->network_properties,
            'browser_properties' => $this->browser_properties,
        ];
    }
}

class Rule
{
    public string $rule_type;
    public string $action;
    public string $created_at;
    public ?string $visitor_id;
    public ?string $browser_id;
    public ?string $visitor_fingerprint;
    public ?string $browser_fingerprint;
    public ?string $hardware_fingerprint;
    public ?string $network_fingerprint;
    public ?string $cidr_block;
    public ?string $country_code;
    public ?string $asn;
    public ?string $description;
    public ?string $expires_at;
    public ?string $last_updated_at;

    public function __construct(
        string $rule_type,
        string $action,
        string $created_at,
        ?string $visitor_id,
        ?string $browser_id,
        ?string $visitor_fingerprint,
        ?string $browser_fingerprint,
        ?string $hardware_fingerprint,
        ?string $network_fingerprint,
        ?string $cidr_block,
        ?string $country_code,
        ?string $asn,
        ?string $description,
        ?string $expires_at,
        ?string $last_updated_at
    ) {
        $this->rule_type = $rule_type;
        $this->action = $action;
        $this->created_at = $created_at;
        $this->visitor_id = $visitor_id;
        $this->browser_id = $browser_id;
        $this->visitor_fingerprint = $visitor_fingerprint;
        $this->browser_fingerprint = $browser_fingerprint;
        $this->hardware_fingerprint = $hardware_fingerprint;
        $this->network_fingerprint = $network_fingerprint;
        $this->cidr_block = $cidr_block;
        $this->country_code = $country_code;
        $this->asn = $asn;
        $this->description = $description;
        $this->expires_at = $expires_at;
        $this->last_updated_at = $last_updated_at;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['rule_type'],
            $data['action'],
            $data['created_at'],
            $data['visitor_id'] ?? null,
            $data['browser_id'] ?? null,
            $data['visitor_fingerprint'] ?? null,
            $data['browser_fingerprint'] ?? null,
            $data['hardware_fingerprint'] ?? null,
            $data['network_fingerprint'] ?? null,
            $data['cidr_block'] ?? null,
            $data['country_code'] ?? null,
            $data['asn'] ?? null,
            $data['description'] ?? null,
            $data['expires_at'] ?? null,
            $data['last_updated_at'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'rule_type' => $this->rule_type,
            'action' => $this->action,
            'created_at' => $this->created_at,
            'visitor_id' => $this->visitor_id,
            'browser_id' => $this->browser_id,
            'visitor_fingerprint' => $this->visitor_fingerprint,
            'browser_fingerprint' => $this->browser_fingerprint,
            'hardware_fingerprint' => $this->hardware_fingerprint,
            'network_fingerprint' => $this->network_fingerprint,
            'cidr_block' => $this->cidr_block,
            'country_code' => $this->country_code,
            'asn' => $this->asn,
            'description' => $this->description,
            'expires_at' => $this->expires_at,
            'last_updated_at' => $this->last_updated_at,
        ];
    }
}

class Verdict
{
    public string $action;
    public array $reasons;
    public string $detected_device_type;
    public bool $is_authentic_device;
    public array $verdict_reason_overrides;
    public ?string $rule_match_type;
    public ?string $rule_match_identifier;

    public function __construct(
        string $action,
        array $reasons,
        string $detected_device_type,
        bool $is_authentic_device,
        array $verdict_reason_overrides,
        ?string $rule_match_type,
        ?string $rule_match_identifier
    ) {
        $this->action = $action;
        $this->reasons = $reasons;
        $this->detected_device_type = $detected_device_type;
        $this->is_authentic_device = $is_authentic_device;
        $this->verdict_reason_overrides = $verdict_reason_overrides;
        $this->rule_match_type = $rule_match_type;
        $this->rule_match_identifier = $rule_match_identifier;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['action'],
            $data['reasons'],
            $data['detected_device_type'],
            $data['is_authentic_device'],
            $data['verdict_reason_overrides'],
            $data['rule_match_type'] ?? null,
            $data['rule_match_identifier'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'action' => $this->action,
            'reasons' => $this->reasons,
            'detected_device_type' => $this->detected_device_type,
            'is_authentic_device' => $this->is_authentic_device,
            'verdict_reason_overrides' => $this->verdict_reason_overrides,
            'rule_match_type' => $this->rule_match_type,
            'rule_match_identifier' => $this->rule_match_identifier,
        ];
    }
}

class VerdictReasonAction
{
    public string $verdict_reason;
    public string $default_action;
    public ?string $override_action;
    public ?string $override_created_at;
    public ?string $override_description;

    public function __construct(
        string $verdict_reason,
        string $default_action,
        ?string $override_action,
        ?string $override_created_at,
        ?string $override_description
    ) {
        $this->verdict_reason = $verdict_reason;
        $this->default_action = $default_action;
        $this->override_action = $override_action;
        $this->override_created_at = $override_created_at;
        $this->override_description = $override_description;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['verdict_reason'],
            $data['default_action'],
            $data['override_action'] ?? null,
            $data['override_created_at'] ?? null,
            $data['override_description'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'verdict_reason' => $this->verdict_reason,
            'default_action' => $this->default_action,
            'override_action' => $this->override_action,
            'override_created_at' => $this->override_created_at,
            'override_description' => $this->override_description,
        ];
    }
}

class VerdictReasonOverride
{
    public string $verdict_reason;
    public string $override_action;

    public function __construct(
        string $verdict_reason,
        string $override_action
    ) {
        $this->verdict_reason = $verdict_reason;
        $this->override_action = $override_action;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['verdict_reason'],
            $data['override_action']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'verdict_reason' => $this->verdict_reason,
            'override_action' => $this->override_action,
        ];
    }
}

