<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Models\RBAC;


final class PolicyRole
{
    /**
    * The unique identifier of the RBAC Role, provided by the developer and intended to be human-readable.
    * 
    *   Reserved `role_id`s that are predefined by Stytch include:
    * 
    *   * `stytch_member`
    *   * `stytch_admin`
    * 
    *   Check out the [guide on Stytch default Roles](https://stytch.com/docs/b2b/guides/rbac/stytch-default)
    * for a more detailed explanation.
     */
    public string $roleId;
    /** The description of the RBAC Role. */
    public string $description;
    /**
    * A list of permissions that link a [Resource](https://stytch.com/docs/b2b/api/rbac-resource-object) to a
    * list of actions.
     */
    public array $permissions;

    public function __construct(
        string $roleId,
        string $description,
        array $permissions
    ) {
        $this->roleId = $roleId;
        $this->description = $description;
        $this->permissions = $permissions;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['role_id'],
            $data['description'],
            isset($data['permissions']) ? array_map(fn($item) => PolicyRolePermission::fromArray($item), $data['permissions']) : []
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'role_id' => $this->roleId,
            'description' => $this->description,
            'permissions' => $this->permissions,
        ];
    }
}