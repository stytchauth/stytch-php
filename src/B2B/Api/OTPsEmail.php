<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Api;

use Stytch\Core\Client;

class OTPsEmail
{
    private Client $client;

    public OTPsEmailDiscovery $discovery;

    public function __construct(Client $client)
    {
        $this->client = $client;

        $this->discovery = new OTPsEmailDiscovery($this->client);
    }

/**
    * Send either a login or signup email OTP to a Member. A new, pending, or invited Member will receive a
    * signup email OTP. Non-active members will have a pending status until they successfully authenticate. An
    * active Member will receive a login email OTP.
    * 
    * The OTP is valid for 10 minutes. Only the most recently sent OTP is valid: when an OTP is sent, all OTPs
    * previously sent to the same email address are invalidated, even if unused or unexpired.

     * @param \Stytch\B2B\Models\OTPs\Email\LoginOrSignupRequest|array $request
     * @return \Stytch\B2B\Models\OTPs\Email\LoginOrSignupResponse
     */
    public function loginOrSignup(
        \Stytch\B2B\Models\OTPs\Email\LoginOrSignupRequest|array $request,
    ): \Stytch\B2B\Models\OTPs\Email\LoginOrSignupResponse {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->post('/v1/b2b/otps/email/login_or_signup', $data);
        return \Stytch\B2B\Models\OTPs\Email\LoginOrSignupResponse::fromArray($response);
    }

    /**
    * Send either a login or signup email OTP to a Member. A new, pending, or invited Member will receive a
    * signup email OTP. Non-active members will have a pending status until they successfully authenticate. An
    * active Member will receive a login email OTP.
    * 
    * The OTP is valid for 10 minutes. Only the most recently sent OTP is valid: when an OTP is sent, all OTPs
    * previously sent to the same email address are invalidated, even if unused or unexpired.

     * @param \Stytch\B2B\Models\OTPs\Email\LoginOrSignupRequest|array $request
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loginOrSignupAsync(
        \Stytch\B2B\Models\OTPs\Email\LoginOrSignupRequest|array $request,
    ): \GuzzleHttp\Promise\PromiseInterface {
        $data = is_array($request) ? $request : $request->toArray();
        $promise = $this->client->postAsync('/v1/b2b/otps/email/login_or_signup', $data);
        return $promise->then(function ($response) {
            return \Stytch\B2B\Models\OTPs\Email\LoginOrSignupResponse::fromArray($response);
        });
    }

/**
    * Authenticate a Member with a one-time passcode (OTP). This endpoint requires an OTP that is not expired
    * or previously used. 
    * OTPs have a default expiry of 10 minutes. If the Member's status is `pending` or `invited`, they will be
    * updated to `active`.
    * Provide the `session_duration_minutes` parameter to set the lifetime of the session. If the
    * `session_duration_minutes` parameter is not specified, a Stytch session will be created with a 60 minute
    * duration.
    * 
    * If the Member is required to complete MFA to log in to the Organization, the returned value of
    * `member_authenticated` will be `false`, and an `intermediate_session_token` will be returned.
    * The `intermediate_session_token` can be passed into the
    * [OTP SMS Authenticate endpoint](https://stytch.com/docs/b2b/api/authenticate-otp-sms),
    * [TOTP Authenticate endpoint](https://stytch.com/docs/b2b/api/authenticate-totp), 
    * or [Recovery Codes Recover endpoint](https://stytch.com/docs/b2b/api/recovery-codes-recover) to complete
    * the MFA step and acquire a full member session.
    * The `intermediate_session_token` can also be used with the
    * [Exchange Intermediate Session endpoint](https://stytch.com/docs/b2b/api/exchange-intermediate-session)
    * or the
    * [Create Organization via Discovery endpoint](https://stytch.com/docs/b2b/api/create-organization-via-discovery) to join a different Organization or create a new one.
    * The `session_duration_minutes` and `session_custom_claims` parameters will be ignored.
    * 
    * If a valid `session_token` or `session_jwt` is passed in, the Member will not be required to complete an
    * MFA step.

     * @param \Stytch\B2B\Models\OTPs\Email\AuthenticateRequest|array $request
     * @return \Stytch\B2B\Models\OTPs\Email\AuthenticateResponse
     */
    public function authenticate(
        \Stytch\B2B\Models\OTPs\Email\AuthenticateRequest|array $request,
    ): \Stytch\B2B\Models\OTPs\Email\AuthenticateResponse {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->post('/v1/b2b/otps/email/authenticate', $data);
        return \Stytch\B2B\Models\OTPs\Email\AuthenticateResponse::fromArray($response);
    }

    /**
    * Authenticate a Member with a one-time passcode (OTP). This endpoint requires an OTP that is not expired
    * or previously used. 
    * OTPs have a default expiry of 10 minutes. If the Member's status is `pending` or `invited`, they will be
    * updated to `active`.
    * Provide the `session_duration_minutes` parameter to set the lifetime of the session. If the
    * `session_duration_minutes` parameter is not specified, a Stytch session will be created with a 60 minute
    * duration.
    * 
    * If the Member is required to complete MFA to log in to the Organization, the returned value of
    * `member_authenticated` will be `false`, and an `intermediate_session_token` will be returned.
    * The `intermediate_session_token` can be passed into the
    * [OTP SMS Authenticate endpoint](https://stytch.com/docs/b2b/api/authenticate-otp-sms),
    * [TOTP Authenticate endpoint](https://stytch.com/docs/b2b/api/authenticate-totp), 
    * or [Recovery Codes Recover endpoint](https://stytch.com/docs/b2b/api/recovery-codes-recover) to complete
    * the MFA step and acquire a full member session.
    * The `intermediate_session_token` can also be used with the
    * [Exchange Intermediate Session endpoint](https://stytch.com/docs/b2b/api/exchange-intermediate-session)
    * or the
    * [Create Organization via Discovery endpoint](https://stytch.com/docs/b2b/api/create-organization-via-discovery) to join a different Organization or create a new one.
    * The `session_duration_minutes` and `session_custom_claims` parameters will be ignored.
    * 
    * If a valid `session_token` or `session_jwt` is passed in, the Member will not be required to complete an
    * MFA step.

     * @param \Stytch\B2B\Models\OTPs\Email\AuthenticateRequest|array $request
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authenticateAsync(
        \Stytch\B2B\Models\OTPs\Email\AuthenticateRequest|array $request,
    ): \GuzzleHttp\Promise\PromiseInterface {
        $data = is_array($request) ? $request : $request->toArray();
        $promise = $this->client->postAsync('/v1/b2b/otps/email/authenticate', $data);
        return $promise->then(function ($response) {
            return \Stytch\B2B\Models\OTPs\Email\AuthenticateResponse::fromArray($response);
        });
    }

}
