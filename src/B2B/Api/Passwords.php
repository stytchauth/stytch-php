<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Api;

use Stytch\Core\Client;

class Passwords
{
    private Client $client;

    public PasswordsEmail $email;
    public PasswordsSessions $sessions;
    public PasswordsExistingPassword $existingPassword;
    public PasswordsDiscovery $discovery;

    public function __construct(Client $client)
    {
        $this->client = $client;

        $this->email = new PasswordsEmail($this->client);
        $this->sessions = new PasswordsSessions($this->client);
        $this->existingPassword = new PasswordsExistingPassword($this->client);
        $this->discovery = new PasswordsDiscovery($this->client);
    }

    /**
        * This API allows you to check whether the userâ€™s provided password is valid, and to provide feedback to
        * the user on how to increase the strength of their password.
        *
        * This endpoint adapts to your Project's password strength configuration.
        * If you're using [zxcvbn](https://stytch.com/docs/guides/passwords/strength-policy), the default, your
        * passwords are considered valid if the strength score is >= 3.
        * If you're using [LUDS](https://stytch.com/docs/guides/passwords/strength-policy), your passwords are
        * considered valid if they meet the requirements that you've set with Stytch.
        * You may update your password strength configuration on the
        * [Passwords Policy page](https://stytch.com/dashboard/password-strength-config) in the Stytch Dashboard.
        *
        * ## Password feedback
        * The `zxcvbn_feedback` and `luds_feedback` objects contains relevant fields for you to relay feedback to
        * users that failed to create a strong enough password.
        *
        * If you're using [zxcvbn](https://stytch.com/docs/guides/passwords/strength-policy), the feedback object
        * will contain warning and suggestions for any password that does not meet the
        * [zxcvbn](https://stytch.com/docs/guides/passwords/strength-policy) strength requirements. You can return
        * these strings directly to the user to help them craft a strong password.
        *
        * If you're using [LUDS](https://stytch.com/docs/guides/passwords/strength-policy), the feedback object
        * will contain a collection of fields that the user failed or passed. You'll want to prompt the user to
        * create a password that meets all requirements that they failed.

         * @param \Stytch\B2B\Models\Passwords\StrengthCheckRequest|array $request
         * @return \Stytch\B2B\Models\Passwords\StrengthCheckResponse
         */
    public function strengthCheck(
        \Stytch\B2B\Models\Passwords\StrengthCheckRequest|array $request,
    ): \Stytch\B2B\Models\Passwords\StrengthCheckResponse {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->post('/v1/b2b/passwords/strength_check', $data);
        return \Stytch\B2B\Models\Passwords\StrengthCheckResponse::fromArray($response);
    }

    /**
        * Adds an existing password to a Member's email that doesn't have a password yet.
        *
        * We support migrating members from passwords stored with bcrypt, scrypt, argon2, MD-5, SHA-1, and PBKDF2.
        * This endpoint has a rate limit of 100 requests per second.
        *
        * The Member's email will be marked as verified when you use this endpoint.
        *
        * If you are using **cross-organization passwords**, i.e. allowing an end user to share the same password
        * across all of their Organizations, call this method separately for each `organization_id` associated
        * with the given `email_address` to ensure the password is set across all of their Organizations.

         * @param \Stytch\B2B\Models\Passwords\MigrateRequest|array $request
         * @return \Stytch\B2B\Models\Passwords\MigrateResponse
         */
    public function migrate(
        \Stytch\B2B\Models\Passwords\MigrateRequest|array $request,
    ): \Stytch\B2B\Models\Passwords\MigrateResponse {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->post('/v1/b2b/passwords/migrate', $data);
        return \Stytch\B2B\Models\Passwords\MigrateResponse::fromArray($response);
    }

    /**
        * Authenticate a member with their email address and password. This endpoint verifies that the member has
        * a password currently set, and that the entered password is correct.
        *
        * If you have breach detection during authentication enabled in your
        * [password strength policy](https://stytch.com/docs/b2b/guides/passwords/strength-policies) and the
        * member's credentials have appeared in the HaveIBeenPwned dataset, this endpoint will return a
        * `member_reset_password` error even if the member enters a correct password. We force a password reset in
        * this case to ensure that the member is the legitimate owner of the email address and not a malicious
        * actor abusing the compromised credentials.
        *
        * If the Member is required to complete MFA to log in to the Organization, the returned value of
        * `member_authenticated` will be `false`, and an `intermediate_session_token` will be returned.
        * The `intermediate_session_token` can be passed into the
        * [OTP SMS Authenticate endpoint](https://stytch.com/docs/b2b/api/authenticate-otp-sms) to complete the
        * MFA step and acquire a full member session.
        * The `session_duration_minutes` and `session_custom_claims` parameters will be ignored.
        *
        * If a valid `session_token` or `session_jwt` is passed in, the Member will not be required to complete an
        * MFA step.

         * @param \Stytch\B2B\Models\Passwords\AuthenticateRequest|array $request
         * @return \Stytch\B2B\Models\Passwords\AuthenticateResponse
         */
    public function authenticate(
        \Stytch\B2B\Models\Passwords\AuthenticateRequest|array $request,
    ): \Stytch\B2B\Models\Passwords\AuthenticateResponse {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->post('/v1/b2b/passwords/authenticate', $data);
        return \Stytch\B2B\Models\Passwords\AuthenticateResponse::fromArray($response);
    }

}
