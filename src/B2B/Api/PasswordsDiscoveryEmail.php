<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Api;

use Stytch\Core\Client;

class PasswordsDiscoveryEmail
{
    private Client $client;


    public function __construct(Client $client)
    {
        $this->client = $client;

    }

    /**
        * Initiates a password reset for the email address provided, when cross-org passwords are enabled. This
        * will trigger an email to be sent to the address, containing a magic link that will allow them to set a
        * new password and authenticate.
        *
        * This endpoint adapts to your Project's password strength configuration.
        * If you're using [zxcvbn](https://stytch.com/docs/guides/passwords/strength-policy), the default, your
        * passwords are considered valid
        * if the strength score is >= 3. If you're using
        * [LUDS](https://stytch.com/docs/guides/passwords/strength-policy), your passwords are
        * considered valid if they meet the requirements that you've set with Stytch.
        * You may update your password strength configuration on the
        * [Passwords Policy page](https://stytch.com/dashboard/password-strength-config) in the Stytch Dashboard.

         * @param \Stytch\B2B\Models\Passwords\Discovery\Email\ResetStartRequest|array $request
         * @return \Stytch\B2B\Models\Passwords\Discovery\Email\ResetStartResponse
         */
    public function resetStart(
        \Stytch\B2B\Models\Passwords\Discovery\Email\ResetStartRequest|array $request,
    ): \Stytch\B2B\Models\Passwords\Discovery\Email\ResetStartResponse {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->post('/v1/b2b/passwords/discovery/email/reset/start', $data);
        return \Stytch\B2B\Models\Passwords\Discovery\Email\ResetStartResponse::fromArray($response);
    }

    /**
    * Initiates a password reset for the email address provided, when cross-org passwords are enabled. This
    * will trigger an email to be sent to the address, containing a magic link that will allow them to set a
    * new password and authenticate.
    *
    * This endpoint adapts to your Project's password strength configuration.
    * If you're using [zxcvbn](https://stytch.com/docs/guides/passwords/strength-policy), the default, your
    * passwords are considered valid
    * if the strength score is >= 3. If you're using
    * [LUDS](https://stytch.com/docs/guides/passwords/strength-policy), your passwords are
    * considered valid if they meet the requirements that you've set with Stytch.
    * You may update your password strength configuration on the
    * [Passwords Policy page](https://stytch.com/dashboard/password-strength-config) in the Stytch Dashboard.

     * @param \Stytch\B2B\Models\Passwords\Discovery\Email\ResetStartRequest|array $request
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetStartAsync(
        \Stytch\B2B\Models\Passwords\Discovery\Email\ResetStartRequest|array $request,
    ): \GuzzleHttp\Promise\PromiseInterface {
        $data = is_array($request) ? $request : $request->toArray();
        $promise = $this->client->postAsync('/v1/b2b/passwords/discovery/email/reset/start', $data);
        return $promise->then(function ($response) {
            return \Stytch\B2B\Models\Passwords\Discovery\Email\ResetStartResponse::fromArray($response);
        });
    }

    /**
        * Reset the password associated with an email and start an intermediate session. This endpoint checks that
        * the password reset token is valid, hasn’t expired, or already been used.
        *
        * The provided password needs to meet the project's password strength requirements, which can be checked
        * in advance with the password strength endpoint. If the token and password are accepted, the password is
        * securely stored for future authentication and the user is authenticated.
        *
        * Resetting a password will start an intermediate session and return a list of discovered organizations
        * the session can be exchanged into.

         * @param \Stytch\B2B\Models\Passwords\Discovery\Email\ResetRequest|array $request
         * @return \Stytch\B2B\Models\Passwords\Discovery\Email\ResetResponse
         */
    public function reset(
        \Stytch\B2B\Models\Passwords\Discovery\Email\ResetRequest|array $request,
    ): \Stytch\B2B\Models\Passwords\Discovery\Email\ResetResponse {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->post('/v1/b2b/passwords/discovery/email/reset', $data);
        return \Stytch\B2B\Models\Passwords\Discovery\Email\ResetResponse::fromArray($response);
    }

    /**
    * Reset the password associated with an email and start an intermediate session. This endpoint checks that
    * the password reset token is valid, hasn’t expired, or already been used.
    *
    * The provided password needs to meet the project's password strength requirements, which can be checked
    * in advance with the password strength endpoint. If the token and password are accepted, the password is
    * securely stored for future authentication and the user is authenticated.
    *
    * Resetting a password will start an intermediate session and return a list of discovered organizations
    * the session can be exchanged into.

     * @param \Stytch\B2B\Models\Passwords\Discovery\Email\ResetRequest|array $request
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetAsync(
        \Stytch\B2B\Models\Passwords\Discovery\Email\ResetRequest|array $request,
    ): \GuzzleHttp\Promise\PromiseInterface {
        $data = is_array($request) ? $request : $request->toArray();
        $promise = $this->client->postAsync('/v1/b2b/passwords/discovery/email/reset', $data);
        return $promise->then(function ($response) {
            return \Stytch\B2B\Models\Passwords\Discovery\Email\ResetResponse::fromArray($response);
        });
    }

}
