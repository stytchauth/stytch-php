<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\B2B\Api;

use Stytch\Core\Client;

class PasswordsSessions
{
    private Client $client;


    public function __construct(Client $client)
    {
        $this->client = $client;

    }

    /**
        * Reset the Member's password using their existing session. The endpoint will error if the session does
        * not contain an authentication factor that has been issued within the last 5 minutes. Either
        * `session_token` or `session_jwt` should be provided.
        *
        * Note that a successful password reset via an existing session will revoke all active sessions for the
        * `member_id`, except for the one used during the reset flow.

         * @param \Stytch\B2B\Models\Passwords\Sessions\ResetRequest|array $request
         * @return \Stytch\B2B\Models\Passwords\Sessions\ResetResponse
         */
    public function reset(
        \Stytch\B2B\Models\Passwords\Sessions\ResetRequest|array $request,
    ): \Stytch\B2B\Models\Passwords\Sessions\ResetResponse {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->post('/v1/b2b/passwords/session/reset', $data);
        return \Stytch\B2B\Models\Passwords\Sessions\ResetResponse::fromArray($response);
    }

    /**
    * Reset the Member's password using their existing session. The endpoint will error if the session does
    * not contain an authentication factor that has been issued within the last 5 minutes. Either
    * `session_token` or `session_jwt` should be provided.
    *
    * Note that a successful password reset via an existing session will revoke all active sessions for the
    * `member_id`, except for the one used during the reset flow.

     * @param \Stytch\B2B\Models\Passwords\Sessions\ResetRequest|array $request
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetAsync(
        \Stytch\B2B\Models\Passwords\Sessions\ResetRequest|array $request,
    ): \GuzzleHttp\Promise\PromiseInterface {
        $data = is_array($request) ? $request : $request->toArray();
        $promise = $this->client->postAsync('/v1/b2b/passwords/session/reset', $data);
        return $promise->then(function ($response) {
            return \Stytch\B2B\Models\Passwords\Sessions\ResetResponse::fromArray($response);
        });
    }

}
