<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Models\IDP\OAuth;


final class AuthorizeRequest
{
    /** Indicates whether the user granted the requested scopes. */
    public bool $consentGranted;
    /** An array of scopes requested by the client. */
    public array $scopes;
    /** The ID of the Connected App client. */
    public string $clientId;
    /**
    * The callback URI used to redirect the user after authentication. This is the same URI provided at the
    * start of the OAuth flow.  This field is required when using the `authorization_code` grant.
     */
    public string $redirectUri;
    /** The OAuth 2.0 response type. For authorization code flows this value is `code`. */
    public string $responseType;
    /** The unique ID of a specific User. You may use an `external_id` here if one is set for the user. */
    public ?string $userId = null;
    /** The `session_token` associated with a User's existing Session. */
    public ?string $sessionToken = null;
    /** The `session_jwt` associated with a User's existing Session. */
    public ?string $sessionJwt = null;
    /**
    * Space separated list that specifies how the Authorization Server should prompt the user for
    * reauthentication and consent. Only `consent` is supported today.
     */
    public ?string $prompt = null;
    /** An opaque value used to maintain state between the request and callback. */
    public ?string $state = null;
    /** A string used to associate a client session with an ID token to mitigate replay attacks. */
    public ?string $nonce = null;
    /** A base64url encoded challenge derived from the code verifier for PKCE flows. */
    public ?string $codeChallenge = null;

    public function __construct(
        bool $consentGranted,
        array $scopes,
        string $clientId,
        string $redirectUri,
        string $responseType,
        ?string $userId = null,
        ?string $sessionToken = null,
        ?string $sessionJwt = null,
        ?string $prompt = null,
        ?string $state = null,
        ?string $nonce = null,
        ?string $codeChallenge = null
    ) {
        $this->consentGranted = $consentGranted;
        $this->scopes = $scopes;
        $this->clientId = $clientId;
        $this->redirectUri = $redirectUri;
        $this->responseType = $responseType;
        $this->userId = $userId;
        $this->sessionToken = $sessionToken;
        $this->sessionJwt = $sessionJwt;
        $this->prompt = $prompt;
        $this->state = $state;
        $this->nonce = $nonce;
        $this->codeChallenge = $codeChallenge;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['consent_granted'],
            $data['scopes'],
            $data['client_id'],
            $data['redirect_uri'],
            $data['response_type'],
            $data['user_id'] ?? null,
            $data['session_token'] ?? null,
            $data['session_jwt'] ?? null,
            $data['prompt'] ?? null,
            $data['state'] ?? null,
            $data['nonce'] ?? null,
            $data['code_challenge'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'consent_granted' => $this->consentGranted,
            'scopes' => $this->scopes,
            'client_id' => $this->clientId,
            'redirect_uri' => $this->redirectUri,
            'response_type' => $this->responseType,
            'user_id' => $this->userId,
            'session_token' => $this->sessionToken,
            'session_jwt' => $this->sessionJwt,
            'prompt' => $this->prompt,
            'state' => $this->state,
            'nonce' => $this->nonce,
            'code_challenge' => $this->codeChallenge,
        ];
    }
}