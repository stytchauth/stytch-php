<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Models\ConnectedApp;

final class ConnectedAppWithClientSecret
{
    /** The ID of the Connected App client. */
    public string $clientId;
    /** A human-readable name for the client. */
    public string $clientName;
    /** A human-readable description for the client. */
    public string $clientDescription;
    public string $status;
    /**
    * Valid for first party clients only. If `true`, an authorization token granted to this Client can be
    * exchanged for a full Stytch session.
     */
    public bool $fullAccessAllowed;
    /**
    * The type of Connected App. Supported values are `first_party`, `first_party_public`, `third_party`, and
    * `third_party_public`.
     */
    public string $clientType;
    /** Array of redirect URI values for use in OAuth Authorization flows. */
    public array $redirectURLS;
    public int $accessTokenExpiryMinutes;
    public string $accessTokenTemplateContent;
    /** Array of redirect URI values for use in OIDC Logout flows. */
    public array $postLogoutRedirectURLS;
    /**
    * Valid for first party clients only. If true, the client does not need to request explicit user consent
    * for the `offline_access` scope.
     */
    public bool $bypassConsentForOfflineAccess;
    /** The last four characters of the client secret. */
    public ?string $clientSecretLastFour = null;
    /** The last four characters of the `next_client_secret`. Null if no `next_client_secret` exists. */
    public ?string $nextClientSecretLastFour = null;
    /** The secret of the Connected App client. **Required for confidential clients** */
    public ?string $clientSecret = null;
    public ?string $accessTokenCustomAudience = null;
    /** The logo URL of the Connected App, if any. */
    public ?string $logoURL = null;

    public function __construct(
        string $clientId,
        string $clientName,
        string $clientDescription,
        string $status,
        bool $fullAccessAllowed,
        string $clientType,
        array $redirectURLS,
        int $accessTokenExpiryMinutes,
        string $accessTokenTemplateContent,
        array $postLogoutRedirectURLS,
        bool $bypassConsentForOfflineAccess,
        ?string $clientSecretLastFour = null,
        ?string $nextClientSecretLastFour = null,
        ?string $clientSecret = null,
        ?string $accessTokenCustomAudience = null,
        ?string $logoURL = null
    ) {
        $this->clientId = $clientId;
        $this->clientName = $clientName;
        $this->clientDescription = $clientDescription;
        $this->status = $status;
        $this->fullAccessAllowed = $fullAccessAllowed;
        $this->clientType = $clientType;
        $this->redirectURLS = $redirectURLS;
        $this->accessTokenExpiryMinutes = $accessTokenExpiryMinutes;
        $this->accessTokenTemplateContent = $accessTokenTemplateContent;
        $this->postLogoutRedirectURLS = $postLogoutRedirectURLS;
        $this->bypassConsentForOfflineAccess = $bypassConsentForOfflineAccess;
        $this->clientSecretLastFour = $clientSecretLastFour;
        $this->nextClientSecretLastFour = $nextClientSecretLastFour;
        $this->clientSecret = $clientSecret;
        $this->accessTokenCustomAudience = $accessTokenCustomAudience;
        $this->logoURL = $logoURL;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['client_id'],
            $data['client_name'],
            $data['client_description'],
            $data['status'],
            $data['full_access_allowed'],
            $data['client_type'],
            $data['redirect_urls'],
            $data['access_token_expiry_minutes'],
            $data['access_token_template_content'],
            $data['post_logout_redirect_urls'],
            $data['bypass_consent_for_offline_access'],
            $data['client_secret_last_four'] ?? null,
            $data['next_client_secret_last_four'] ?? null,
            $data['client_secret'] ?? null,
            $data['access_token_custom_audience'] ?? null,
            $data['logo_url'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'client_id' => $this->clientId,
            'client_name' => $this->clientName,
            'client_description' => $this->clientDescription,
            'status' => $this->status,
            'full_access_allowed' => $this->fullAccessAllowed,
            'client_type' => $this->clientType,
            'redirect_urls' => $this->redirectURLS,
            'access_token_expiry_minutes' => $this->accessTokenExpiryMinutes,
            'access_token_template_content' => $this->accessTokenTemplateContent,
            'post_logout_redirect_urls' => $this->postLogoutRedirectURLS,
            'bypass_consent_for_offline_access' => $this->bypassConsentForOfflineAccess,
            'client_secret_last_four' => $this->clientSecretLastFour,
            'next_client_secret_last_four' => $this->nextClientSecretLastFour,
            'client_secret' => $this->clientSecret,
            'access_token_custom_audience' => $this->accessTokenCustomAudience,
            'logo_url' => $this->logoURL,
        ];
    }
}
