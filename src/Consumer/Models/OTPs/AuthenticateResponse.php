<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Models\OTPs;

final class AuthenticateResponse
{
    /**
    * Globally unique UUID that is returned with every API call. This value is important to log for debugging
    * purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
     */
    public string $requestId;
    /** The unique ID of the affected User. */
    public string $userId;
    /** The `email_id` or `phone_id` involved in the given authentication. */
    public string $methodId;
    /** A secret token for a given Stytch Session. */
    public string $sessionToken;
    /** The JSON Web Token (JWT) for a given Stytch Session. */
    public string $sessionJwt;
    /**
    * The `user` object affected by this API call. See the
    * [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
     */
    public \Stytch\Consumer\Models\Users\User $user;
    /**
    * Indicates if all other of the User's Sessions need to be reset. You should check this field if you
    * aren't using Stytch's Session product. If you are using Stytch's Session product, we revoke the User's
    * other sessions for you.
     */
    public bool $resetSessions;
    /**
    * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
    * 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
     */
    public int $statusCode;
    /**
    * If you initiate a Session, by including `session_duration_minutes` in your authenticate call, you'll
    * receive a full Session object in the response.
    *
    *   See [Session object](https://stytch.com/docs/api/session-object) for complete response fields.
     */
    public ?\Stytch\Consumer\Models\Sessions\Session $session = null;
    /**
    * If a valid `telemetry_id` was passed in the request and the
    * [Fingerprint Lookup API](https://stytch.com/docs/fraud/api/fingerprint-lookup) returned results, the
    * `user_device` response field will contain information about the user's device attributes.
     */
    public ?\Stytch\Consumer\Models\DeviceInfo $userDevice = null;

    public function __construct(
        string $requestId,
        string $userId,
        string $methodId,
        string $sessionToken,
        string $sessionJwt,
        \Stytch\Consumer\Models\Users\User $user,
        bool $resetSessions,
        int $statusCode,
        ?\Stytch\Consumer\Models\Sessions\Session $session = null,
        ?\Stytch\Consumer\Models\DeviceInfo $userDevice = null
    ) {
        $this->requestId = $requestId;
        $this->userId = $userId;
        $this->methodId = $methodId;
        $this->sessionToken = $sessionToken;
        $this->sessionJwt = $sessionJwt;
        $this->user = $user;
        $this->resetSessions = $resetSessions;
        $this->statusCode = $statusCode;
        $this->session = $session;
        $this->userDevice = $userDevice;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['request_id'],
            $data['user_id'],
            $data['method_id'],
            $data['session_token'],
            $data['session_jwt'],
            \Stytch\Consumer\Models\Users\User::fromArray($data['user']),
            $data['reset_sessions'],
            $data['status_code'],
            isset($data['session']) && $data['session'] !== null ? \Stytch\Consumer\Models\Sessions\Session::fromArray($data['session']) : null,
            isset($data['user_device']) && $data['user_device'] !== null ? \Stytch\Consumer\Models\DeviceInfo::fromArray($data['user_device']) : null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'request_id' => $this->requestId,
            'user_id' => $this->userId,
            'method_id' => $this->methodId,
            'session_token' => $this->sessionToken,
            'session_jwt' => $this->sessionJwt,
            'user' => $this->user,
            'reset_sessions' => $this->resetSessions,
            'status_code' => $this->statusCode,
            'session' => $this->session,
            'user_device' => $this->userDevice,
        ];
    }
}
