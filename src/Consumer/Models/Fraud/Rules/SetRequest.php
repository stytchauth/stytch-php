<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Models\Fraud\Rules;


final class SetRequest
{
    /**
    * The action that should be returned by a fingerprint lookup for that identifier with a `RULE_MATCH`
    * reason. The following values are valid: `ALLOW`, `BLOCK`, `CHALLENGE`, or `NONE`. For country codes,
    * `ALLOW` actions are not allowed. If a `NONE` action is specified, it will clear the stored rule.
     */
    public string $action;
    /** The visitor ID we want to set a rule for. Only one identifier can be specified in the request. */
    public ?string $visitorId = null;
    /** The browser ID we want to set a rule for. Only one identifier can be specified in the request. */
    public ?string $browserId = null;
    /** The visitor fingerprint we want to set a rule for. Only one identifier can be specified in the request. */
    public ?string $visitorFingerprint = null;
    /** The browser fingerprint we want to set a rule for. Only one identifier can be specified in the request. */
    public ?string $browserFingerprint = null;
    /** The hardware fingerprint we want to set a rule for. Only one identifier can be specified in the request. */
    public ?string $hardwareFingerprint = null;
    /** The network fingerprint we want to set a rule for. Only one identifier can be specified in the request. */
    public ?string $networkFingerprint = null;
    /**
    * The number of minutes until this rule expires. If no `expires_in_minutes` is specified, then the rule is
    * kept permanently.
     */
    public ?int $expiresInMinutes = null;
    /** An optional description for the rule. */
    public ?string $description = null;
    /**
    * The CIDR block we want to set a rule for. You may pass either an IP address or a CIDR block. The CIDR
    * block prefix must be between 16 and 32, inclusive. If an end user's IP address is within this CIDR
    * block, this rule will be applied. Only one identifier can be specified in the request.
     */
    public ?string $cidrBlock = null;
    /**
    * The country code we want to set a rule for. The country code must be a valid ISO 3166-1 alpha-2 code.
    * You may not set `ALLOW` rules for country codes. Only one identifier can be specified in the request.
     */
    public ?string $countryCode = null;
    /**
    * The ASN we want to set a rule for. The ASN must be the string representation of an integer between 0 and
    * 4294967295, inclusive. Only one identifier can be specified in the request.
     */
    public ?string $asn = null;

    public function __construct(
        string $action,
        ?string $visitorId = null,
        ?string $browserId = null,
        ?string $visitorFingerprint = null,
        ?string $browserFingerprint = null,
        ?string $hardwareFingerprint = null,
        ?string $networkFingerprint = null,
        ?int $expiresInMinutes = null,
        ?string $description = null,
        ?string $cidrBlock = null,
        ?string $countryCode = null,
        ?string $asn = null
    ) {
        $this->action = $action;
        $this->visitorId = $visitorId;
        $this->browserId = $browserId;
        $this->visitorFingerprint = $visitorFingerprint;
        $this->browserFingerprint = $browserFingerprint;
        $this->hardwareFingerprint = $hardwareFingerprint;
        $this->networkFingerprint = $networkFingerprint;
        $this->expiresInMinutes = $expiresInMinutes;
        $this->description = $description;
        $this->cidrBlock = $cidrBlock;
        $this->countryCode = $countryCode;
        $this->asn = $asn;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['action'],
            $data['visitor_id'] ?? null,
            $data['browser_id'] ?? null,
            $data['visitor_fingerprint'] ?? null,
            $data['browser_fingerprint'] ?? null,
            $data['hardware_fingerprint'] ?? null,
            $data['network_fingerprint'] ?? null,
            $data['expires_in_minutes'] ?? null,
            $data['description'] ?? null,
            $data['cidr_block'] ?? null,
            $data['country_code'] ?? null,
            $data['asn'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'action' => $this->action,
            'visitor_id' => $this->visitorId,
            'browser_id' => $this->browserId,
            'visitor_fingerprint' => $this->visitorFingerprint,
            'browser_fingerprint' => $this->browserFingerprint,
            'hardware_fingerprint' => $this->hardwareFingerprint,
            'network_fingerprint' => $this->networkFingerprint,
            'expires_in_minutes' => $this->expiresInMinutes,
            'description' => $this->description,
            'cidr_block' => $this->cidrBlock,
            'country_code' => $this->countryCode,
            'asn' => $this->asn,
        ];
    }
}