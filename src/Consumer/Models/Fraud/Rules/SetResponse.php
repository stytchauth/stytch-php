<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Models\Fraud\Rules;


final class SetResponse
{
    /**
    * Globally unique UUID that is returned with every API call. This value is important to log for debugging
    * purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
     */
    public string $requestId;
    /** The action that will be returned for the specified identifier. */
    public string $action;
    /**
    * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
    * 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
     */
    public int $statusCode;
    /** The visitor ID that a rule was set for. */
    public ?string $visitorId = null;
    /** The browser ID that a rule was set for. */
    public ?string $browserId = null;
    /** The visitor fingerprint that a rule was set for. */
    public ?string $visitorFingerprint = null;
    /** The browser fingerprint that a rule was set for. */
    public ?string $browserFingerprint = null;
    /** The hardware fingerprint that a rule was set for. */
    public ?string $hardwareFingerprint = null;
    /** The network fingerprint that a rule was set for. */
    public ?string $networkFingerprint = null;
    /**
    * The timestamp when the rule expires. Values conform to the RFC 3339 standard and are expressed in UTC,
    * e.g. `2021-12-29T12:33:09Z`.
     */
    public ?string $expiresAt = null;
    /**
    * The CIDR block that a rule was set for. If an end user's IP address is within this CIDR block, this rule
    * will be applied.
     */
    public ?string $cidrBlock = null;
    /** The country code that a rule was set for. */
    public ?string $countryCode = null;
    /** The ASN that a rule was set for. */
    public ?string $asn = null;

    public function __construct(
        string $requestId,
        string $action,
        int $statusCode,
        ?string $visitorId = null,
        ?string $browserId = null,
        ?string $visitorFingerprint = null,
        ?string $browserFingerprint = null,
        ?string $hardwareFingerprint = null,
        ?string $networkFingerprint = null,
        ?string $expiresAt = null,
        ?string $cidrBlock = null,
        ?string $countryCode = null,
        ?string $asn = null
    ) {
        $this->requestId = $requestId;
        $this->action = $action;
        $this->statusCode = $statusCode;
        $this->visitorId = $visitorId;
        $this->browserId = $browserId;
        $this->visitorFingerprint = $visitorFingerprint;
        $this->browserFingerprint = $browserFingerprint;
        $this->hardwareFingerprint = $hardwareFingerprint;
        $this->networkFingerprint = $networkFingerprint;
        $this->expiresAt = $expiresAt;
        $this->cidrBlock = $cidrBlock;
        $this->countryCode = $countryCode;
        $this->asn = $asn;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['request_id'],
            $data['action'],
            $data['status_code'],
            $data['visitor_id'] ?? null,
            $data['browser_id'] ?? null,
            $data['visitor_fingerprint'] ?? null,
            $data['browser_fingerprint'] ?? null,
            $data['hardware_fingerprint'] ?? null,
            $data['network_fingerprint'] ?? null,
            $data['expires_at'] ?? null,
            $data['cidr_block'] ?? null,
            $data['country_code'] ?? null,
            $data['asn'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'request_id' => $this->requestId,
            'action' => $this->action,
            'status_code' => $this->statusCode,
            'visitor_id' => $this->visitorId,
            'browser_id' => $this->browserId,
            'visitor_fingerprint' => $this->visitorFingerprint,
            'browser_fingerprint' => $this->browserFingerprint,
            'hardware_fingerprint' => $this->hardwareFingerprint,
            'network_fingerprint' => $this->networkFingerprint,
            'expires_at' => $this->expiresAt,
            'cidr_block' => $this->cidrBlock,
            'country_code' => $this->countryCode,
            'asn' => $this->asn,
        ];
    }
}