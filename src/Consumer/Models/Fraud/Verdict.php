<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Models\Fraud;

final class Verdict
{
    /**
    * The suggested action based on the fingerprint review. The available actions are:
    *   * `ALLOW` - This is a known valid device grouping or device profile that is part of the default ALLOW
    * listed set of known devices by Stytch. This grouping is made up of verified device profiles that match
    * the characteristics of known/authentic traffic origins
    *   * `BLOCK` - This is a known bad or malicious device profile that is undesirable and should be blocked
    * from completing the privileged action in question
    *   * `CHALLENGE` - This is an unknown or potentially malicious device that should be put through
    * increased friction such as 2FA or other forms of extended user verification before allowing the
    * privileged action to proceed
     */
    public string $action;
    /**
    * A set of contextual clues to inform why a `CHALLENGE` or `BLOCK` action was suggested. For a list of
    * possible Reasons, see
    * [Warning Flags (Verdict Reasons)](https://stytch.com/docs/docs/fraud/guides/device-fingerprinting/reference/warning-flags-verdict-reasons).
     */
    public array $reasons;
    /** The operating system and architecture that took the fingerprint. */
    public string $detectedDeviceType;
    /**
    * The assessment of whether this is an authentic device. It will be false if hardware or browser deception
    * is detected.
     */
    public bool $isAuthenticDevice;
    /** A list of verdict reason overrides that were applied, if any. */
    public array $verdictReasonOverrides;
    /**
    * The type of rule match that was applied (e.g. `VISITOR_ID`), if any. This field will only be present if
    * there is a `RULE_MATCH` reason in the list of verdict reasons.
     */
    public ?string $ruleMatchType = null;
    /**
    * The rule that was applied (e.g. a specific visitor ID value), if any. This field will only be present if
    * there is a `RULE_MATCH` reason in the list of verdict reasons.
     */
    public ?string $ruleMatchIdentifier = null;

    public function __construct(
        string $action,
        array $reasons,
        string $detectedDeviceType,
        bool $isAuthenticDevice,
        array $verdictReasonOverrides,
        ?string $ruleMatchType = null,
        ?string $ruleMatchIdentifier = null
    ) {
        $this->action = $action;
        $this->reasons = $reasons;
        $this->detectedDeviceType = $detectedDeviceType;
        $this->isAuthenticDevice = $isAuthenticDevice;
        $this->verdictReasonOverrides = $verdictReasonOverrides;
        $this->ruleMatchType = $ruleMatchType;
        $this->ruleMatchIdentifier = $ruleMatchIdentifier;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['action'],
            $data['reasons'],
            $data['detected_device_type'],
            $data['is_authentic_device'],
            isset($data['verdict_reason_overrides']) ? array_map(fn ($item) => VerdictReasonOverride::fromArray($item), $data['verdict_reason_overrides']) : [],
            $data['rule_match_type'] ?? null,
            $data['rule_match_identifier'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'action' => $this->action,
            'reasons' => $this->reasons,
            'detected_device_type' => $this->detectedDeviceType,
            'is_authentic_device' => $this->isAuthenticDevice,
            'verdict_reason_overrides' => $this->verdictReasonOverrides,
            'rule_match_type' => $this->ruleMatchType,
            'rule_match_identifier' => $this->ruleMatchIdentifier,
        ];
    }
}
