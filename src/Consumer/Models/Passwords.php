<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Models;

enum MigrateRequestHashType: string
{
}

class Argon2Config
{
    public string $salt;
    public int $iteration_amount;
    public int $memory;
    public int $threads;
    public int $key_length;

    public function __construct(
        string $salt,
        int $iteration_amount,
        int $memory,
        int $threads,
        int $key_length
    ) {
        $this->salt = $salt;
        $this->iteration_amount = $iteration_amount;
        $this->memory = $memory;
        $this->threads = $threads;
        $this->key_length = $key_length;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['salt'],
            $data['iteration_amount'],
            $data['memory'],
            $data['threads'],
            $data['key_length']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'salt' => $this->salt,
            'iteration_amount' => $this->iteration_amount,
            'memory' => $this->memory,
            'threads' => $this->threads,
            'key_length' => $this->key_length,
        ];
    }
}

class Feedback
{
    public string $warning;
    public array $suggestions;
    public ?LUDSRequirements $luds_requirements;

    public function __construct(
        string $warning,
        array $suggestions,
        ?LUDSRequirements $luds_requirements
    ) {
        $this->warning = $warning;
        $this->suggestions = $suggestions;
        $this->luds_requirements = $luds_requirements;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['warning'],
            $data['suggestions'],
            $data['luds_requirements'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'warning' => $this->warning,
            'suggestions' => $this->suggestions,
            'luds_requirements' => $this->luds_requirements,
        ];
    }
}

class LUDSRequirements
{
    public bool $has_lower_case;
    public bool $has_upper_case;
    public bool $has_digit;
    public bool $has_symbol;
    public int $missing_complexity;
    public int $missing_characters;

    public function __construct(
        bool $has_lower_case,
        bool $has_upper_case,
        bool $has_digit,
        bool $has_symbol,
        int $missing_complexity,
        int $missing_characters
    ) {
        $this->has_lower_case = $has_lower_case;
        $this->has_upper_case = $has_upper_case;
        $this->has_digit = $has_digit;
        $this->has_symbol = $has_symbol;
        $this->missing_complexity = $missing_complexity;
        $this->missing_characters = $missing_characters;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['has_lower_case'],
            $data['has_upper_case'],
            $data['has_digit'],
            $data['has_symbol'],
            $data['missing_complexity'],
            $data['missing_characters']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'has_lower_case' => $this->has_lower_case,
            'has_upper_case' => $this->has_upper_case,
            'has_digit' => $this->has_digit,
            'has_symbol' => $this->has_symbol,
            'missing_complexity' => $this->missing_complexity,
            'missing_characters' => $this->missing_characters,
        ];
    }
}

class MD5Config
{
    public string $prepend_salt;
    public string $append_salt;

    public function __construct(
        string $prepend_salt,
        string $append_salt
    ) {
        $this->prepend_salt = $prepend_salt;
        $this->append_salt = $append_salt;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['prepend_salt'],
            $data['append_salt']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'prepend_salt' => $this->prepend_salt,
            'append_salt' => $this->append_salt,
        ];
    }
}

class PBKDF2Config
{
    public string $salt;
    public int $iteration_amount;
    public int $key_length;
    public string $algorithm;

    public function __construct(
        string $salt,
        int $iteration_amount,
        int $key_length,
        string $algorithm
    ) {
        $this->salt = $salt;
        $this->iteration_amount = $iteration_amount;
        $this->key_length = $key_length;
        $this->algorithm = $algorithm;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['salt'],
            $data['iteration_amount'],
            $data['key_length'],
            $data['algorithm']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'salt' => $this->salt,
            'iteration_amount' => $this->iteration_amount,
            'key_length' => $this->key_length,
            'algorithm' => $this->algorithm,
        ];
    }
}

class SHA1Config
{
    public string $prepend_salt;
    public string $append_salt;

    public function __construct(
        string $prepend_salt,
        string $append_salt
    ) {
        $this->prepend_salt = $prepend_salt;
        $this->append_salt = $append_salt;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['prepend_salt'],
            $data['append_salt']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'prepend_salt' => $this->prepend_salt,
            'append_salt' => $this->append_salt,
        ];
    }
}

class ScryptConfig
{
    public string $salt;
    public int $n_parameter;
    public int $r_parameter;
    public int $p_parameter;
    public int $key_length;

    public function __construct(
        string $salt,
        int $n_parameter,
        int $r_parameter,
        int $p_parameter,
        int $key_length
    ) {
        $this->salt = $salt;
        $this->n_parameter = $n_parameter;
        $this->r_parameter = $r_parameter;
        $this->p_parameter = $p_parameter;
        $this->key_length = $key_length;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['salt'],
            $data['n_parameter'],
            $data['r_parameter'],
            $data['p_parameter'],
            $data['key_length']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'salt' => $this->salt,
            'n_parameter' => $this->n_parameter,
            'r_parameter' => $this->r_parameter,
            'p_parameter' => $this->p_parameter,
            'key_length' => $this->key_length,
        ];
    }
}

class AuthenticateResponse
{
    public string $user_id;
    public string $session_token;
    public string $session_jwt;
    public User $user;
    public ?Session $session;
    public ?DeviceInfo $user_device;

    public function __construct(
        string $user_id,
        string $session_token,
        string $session_jwt,
        User $user,
        ?Session $session,
        ?DeviceInfo $user_device
    ) {
        $this->user_id = $user_id;
        $this->session_token = $session_token;
        $this->session_jwt = $session_jwt;
        $this->user = $user;
        $this->session = $session;
        $this->user_device = $user_device;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['user_id'],
            $data['session_token'],
            $data['session_jwt'],
            $data['user'],
            $data['session'] ?? null,
            $data['user_device'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'user_id' => $this->user_id,
            'session_token' => $this->session_token,
            'session_jwt' => $this->session_jwt,
            'user' => $this->user,
            'session' => $this->session,
            'user_device' => $this->user_device,
        ];
    }
}

class CreateResponse
{
    public string $user_id;
    public string $email_id;
    public string $session_token;
    public string $session_jwt;
    public User $user;
    public ?Session $session;
    public ?DeviceInfo $user_device;

    public function __construct(
        string $user_id,
        string $email_id,
        string $session_token,
        string $session_jwt,
        User $user,
        ?Session $session,
        ?DeviceInfo $user_device
    ) {
        $this->user_id = $user_id;
        $this->email_id = $email_id;
        $this->session_token = $session_token;
        $this->session_jwt = $session_jwt;
        $this->user = $user;
        $this->session = $session;
        $this->user_device = $user_device;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['user_id'],
            $data['email_id'],
            $data['session_token'],
            $data['session_jwt'],
            $data['user'],
            $data['session'] ?? null,
            $data['user_device'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'user_id' => $this->user_id,
            'email_id' => $this->email_id,
            'session_token' => $this->session_token,
            'session_jwt' => $this->session_jwt,
            'user' => $this->user,
            'session' => $this->session,
            'user_device' => $this->user_device,
        ];
    }
}

class MigrateResponse
{
    public string $user_id;
    public string $email_id;
    public bool $user_created;
    public User $user;

    public function __construct(
        string $user_id,
        string $email_id,
        bool $user_created,
        User $user
    ) {
        $this->user_id = $user_id;
        $this->email_id = $email_id;
        $this->user_created = $user_created;
        $this->user = $user;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['user_id'],
            $data['email_id'],
            $data['user_created'],
            $data['user']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'user_id' => $this->user_id,
            'email_id' => $this->email_id,
            'user_created' => $this->user_created,
            'user' => $this->user,
        ];
    }
}

class StrengthCheckResponse
{
    public bool $valid_password;
    public int $score;
    public bool $breached_password;
    public string $strength_policy;
    public bool $breach_detection_on_create;
    public ?Feedback $feedback;

    public function __construct(
        bool $valid_password,
        int $score,
        bool $breached_password,
        string $strength_policy,
        bool $breach_detection_on_create,
        ?Feedback $feedback
    ) {
        $this->valid_password = $valid_password;
        $this->score = $score;
        $this->breached_password = $breached_password;
        $this->strength_policy = $strength_policy;
        $this->breach_detection_on_create = $breach_detection_on_create;
        $this->feedback = $feedback;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['valid_password'],
            $data['score'],
            $data['breached_password'],
            $data['strength_policy'],
            $data['breach_detection_on_create'],
            $data['feedback'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'valid_password' => $this->valid_password,
            'score' => $this->score,
            'breached_password' => $this->breached_password,
            'strength_policy' => $this->strength_policy,
            'breach_detection_on_create' => $this->breach_detection_on_create,
            'feedback' => $this->feedback,
        ];
    }
}

