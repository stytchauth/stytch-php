<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Models\OAuth;

final class ProviderValues
{
    /** The `access_token` that you may use to access the User's data in the provider's API. */
    public string $accessToken;
    /**
    * The `refresh_token` that you may use to obtain a new `access_token` for the User within the provider's
    * API.
     */
    public string $refreshToken;
    /**
    * The `id_token` returned by the OAuth provider. ID Tokens are JWTs that contain structured information
    * about a user. The exact content of each ID Token varies from provider to provider. ID Tokens are
    * returned from OAuth providers that conform to the [OpenID Connect](https://openid.net/foundation/)
    * specification, which is based on OAuth.
     */
    public string $idToken;
    /**
    * The OAuth scopes included for a given provider. See each provider's section above to see which scopes
    * are included by default and how to add custom scopes.
     */
    public array $scopes;
    /**
    * The timestamp when the Session expires. Values conform to the RFC 3339 standard and are expressed in
    * UTC, e.g. `2021-12-29T12:33:09Z`.
     */
    public ?string $expiresAt = null;

    public function __construct(
        string $accessToken,
        string $refreshToken,
        string $idToken,
        array $scopes,
        ?string $expiresAt = null
    ) {
        $this->accessToken = $accessToken;
        $this->refreshToken = $refreshToken;
        $this->idToken = $idToken;
        $this->scopes = $scopes;
        $this->expiresAt = $expiresAt;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['access_token'],
            $data['refresh_token'],
            $data['id_token'],
            $data['scopes'],
            $data['expires_at'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'access_token' => $this->accessToken,
            'refresh_token' => $this->refreshToken,
            'id_token' => $this->idToken,
            'scopes' => $this->scopes,
            'expires_at' => $this->expiresAt,
        ];
    }
}
