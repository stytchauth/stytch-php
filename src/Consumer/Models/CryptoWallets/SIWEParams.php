<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Models\CryptoWallets;


final class SIWEParams
{
    /**
    * Only required if `siwe_params` is passed. The domain that is requesting the crypto wallet signature.
    * Must be an RFC 3986 authority.
     */
    public string $domain;
    /**
    * Only required if `siwe_params` is passed. An RFC 3986 URI referring to the resource that is the subject
    * of the signing.
     */
    public string $uri;
    /**
    * A list of information or references to information the user wishes to have resolved as part of
    * authentication. Every resource must be an RFC 3986 URI.
     */
    public array $resources;
    /**
    * The EIP-155 Chain ID to which the session is bound. Defaults to 1. Must be the string representation of
    * an integer between 1 and 9,223,372,036,854,775,771, inclusive.
     */
    public ?string $chainId = null;
    /**
    * A human-readable ASCII assertion that the user will sign. The statement may only include reserved,
    * unreserved, or space characters according to RFC 3986 definitions, and must not contain other forms of
    * whitespace such as newlines, tabs, and carriage returns.
     */
    public ?string $statement = null;
    /**
    * The time when the message was generated. Defaults to the current time. All timestamps in our API conform
    * to the RFC 3339 standard and are expressed in UTC, e.g. `2021-12-29T12:33:09Z`.
     */
    public ?string $issuedAt = null;
    /**
    * The time when the signed authentication message will become valid. Defaults to the current time. All
    * timestamps in our API conform to the RFC 3339 standard and are expressed in UTC, e.g.
    * `2021-12-29T12:33:09Z`.
     */
    public ?string $notBefore = null;
    /**
    * A system-specific identifier that may be used to uniquely refer to the sign-in request. The
    * `message_request_id` must be a valid pchar according to RFC 3986 definitions.
     */
    public ?string $messageRequestId = null;

    public function __construct(
        string $domain,
        string $uri,
        array $resources,
        ?string $chainId = null,
        ?string $statement = null,
        ?string $issuedAt = null,
        ?string $notBefore = null,
        ?string $messageRequestId = null
    ) {
        $this->domain = $domain;
        $this->uri = $uri;
        $this->resources = $resources;
        $this->chainId = $chainId;
        $this->statement = $statement;
        $this->issuedAt = $issuedAt;
        $this->notBefore = $notBefore;
        $this->messageRequestId = $messageRequestId;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['domain'],
            $data['uri'],
            $data['resources'],
            $data['chain_id'] ?? null,
            $data['statement'] ?? null,
            $data['issued_at'] ?? null,
            $data['not_before'] ?? null,
            $data['message_request_id'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'domain' => $this->domain,
            'uri' => $this->uri,
            'resources' => $this->resources,
            'chain_id' => $this->chainId,
            'statement' => $this->statement,
            'issued_at' => $this->issuedAt,
            'not_before' => $this->notBefore,
            'message_request_id' => $this->messageRequestId,
        ];
    }
}