<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Models\Sessions;

final class AuthenticateRequest
{
    /** The session token to authenticate. */
    public ?string $sessionToken = null;
    /**
    * Set the session lifetime to be this many minutes from now; minimum of 5 and a maximum of 527040 minutes
    * (366 days). Note that a successful authentication will continue to extend the session this many minutes.
     */
    public ?int $sessionDurationMinutes = null;
    /**
    * The JWT to authenticate. You may provide a JWT that has expired according to its `exp` claim and needs
    * to be refreshed. If the signature is valid and the underlying session is still active then Stytch will
    * return a new JWT.
     */
    public ?string $sessionJwt = null;
    /**
    * Add a custom claims map to the Session being authenticated. Claims are only created if a Session is
    * initialized by providing a value in `session_duration_minutes`. Claims will be included on the Session
    * object and in the JWT. To update a key in an existing Session, supply a new value. To delete a key,
    * supply a null value.
    *
    *   Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be
    * ignored. Total custom claims size cannot exceed four kilobytes.
     */
    public ?array $sessionCustomClaims = null;
    /**
    * If an `authorization_check` object is passed in, this endpoint will also check if the User is
    *   authorized to perform the given action on the given Resource. A User is authorized if they are
    * assigned a Role with adequate permissions.
    *
    *   If the User is not authorized to perform the specified action on the specified Resource, a 403 error
    * will be thrown.
    *   Otherwise, the response will contain a list of Roles that satisfied the authorization check.
     */
    public ?AuthorizationCheck $authorizationCheck = null;

    public function __construct(
        ?string $sessionToken = null,
        ?int $sessionDurationMinutes = null,
        ?string $sessionJwt = null,
        ?array $sessionCustomClaims = null,
        ?AuthorizationCheck $authorizationCheck = null
    ) {
        $this->sessionToken = $sessionToken;
        $this->sessionDurationMinutes = $sessionDurationMinutes;
        $this->sessionJwt = $sessionJwt;
        $this->sessionCustomClaims = $sessionCustomClaims;
        $this->authorizationCheck = $authorizationCheck;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['session_token'] ?? null,
            $data['session_duration_minutes'] ?? null,
            $data['session_jwt'] ?? null,
            $data['session_custom_claims'] ?? null,
            isset($data['authorization_check']) && $data['authorization_check'] !== null ? AuthorizationCheck::fromArray($data['authorization_check']) : null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'session_token' => $this->sessionToken,
            'session_duration_minutes' => $this->sessionDurationMinutes,
            'session_jwt' => $this->sessionJwt,
            'session_custom_claims' => $this->sessionCustomClaims,
            'authorization_check' => $this->authorizationCheck,
        ];
    }
}
