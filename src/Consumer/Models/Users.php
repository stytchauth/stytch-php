<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Models;

enum SearchUsersQueryOperator: string
{
}

class BiometricRegistration
{
    public string $biometric_registration_id;
    public bool $verified;

    public function __construct(
        string $biometric_registration_id,
        bool $verified
    ) {
        $this->biometric_registration_id = $biometric_registration_id;
        $this->verified = $verified;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['biometric_registration_id'],
            $data['verified']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'biometric_registration_id' => $this->biometric_registration_id,
            'verified' => $this->verified,
        ];
    }
}

class CryptoWallet
{
    public string $crypto_wallet_id;
    public string $crypto_wallet_address;
    public string $crypto_wallet_type;
    public bool $verified;

    public function __construct(
        string $crypto_wallet_id,
        string $crypto_wallet_address,
        string $crypto_wallet_type,
        bool $verified
    ) {
        $this->crypto_wallet_id = $crypto_wallet_id;
        $this->crypto_wallet_address = $crypto_wallet_address;
        $this->crypto_wallet_type = $crypto_wallet_type;
        $this->verified = $verified;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['crypto_wallet_id'],
            $data['crypto_wallet_address'],
            $data['crypto_wallet_type'],
            $data['verified']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'crypto_wallet_id' => $this->crypto_wallet_id,
            'crypto_wallet_address' => $this->crypto_wallet_address,
            'crypto_wallet_type' => $this->crypto_wallet_type,
            'verified' => $this->verified,
        ];
    }
}

class Email
{
    public string $email_id;
    public string $email;
    public bool $verified;

    public function __construct(
        string $email_id,
        string $email,
        bool $verified
    ) {
        $this->email_id = $email_id;
        $this->email = $email;
        $this->verified = $verified;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['email_id'],
            $data['email'],
            $data['verified']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'email_id' => $this->email_id,
            'email' => $this->email,
            'verified' => $this->verified,
        ];
    }
}

class Name
{
    public ?string $first_name;
    public ?string $middle_name;
    public ?string $last_name;

    public function __construct(
        ?string $first_name,
        ?string $middle_name,
        ?string $last_name
    ) {
        $this->first_name = $first_name;
        $this->middle_name = $middle_name;
        $this->last_name = $last_name;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['first_name'] ?? null,
            $data['middle_name'] ?? null,
            $data['last_name'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'first_name' => $this->first_name,
            'middle_name' => $this->middle_name,
            'last_name' => $this->last_name,
        ];
    }
}

class OAuthProvider
{
    public string $provider_type;
    public string $provider_subject;
    public string $profile_picture_url;
    public string $locale;
    public string $oauth_user_registration_id;

    public function __construct(
        string $provider_type,
        string $provider_subject,
        string $profile_picture_url,
        string $locale,
        string $oauth_user_registration_id
    ) {
        $this->provider_type = $provider_type;
        $this->provider_subject = $provider_subject;
        $this->profile_picture_url = $profile_picture_url;
        $this->locale = $locale;
        $this->oauth_user_registration_id = $oauth_user_registration_id;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['provider_type'],
            $data['provider_subject'],
            $data['profile_picture_url'],
            $data['locale'],
            $data['oauth_user_registration_id']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'provider_type' => $this->provider_type,
            'provider_subject' => $this->provider_subject,
            'profile_picture_url' => $this->profile_picture_url,
            'locale' => $this->locale,
            'oauth_user_registration_id' => $this->oauth_user_registration_id,
        ];
    }
}

class Password
{
    public string $password_id;
    public bool $requires_reset;

    public function __construct(
        string $password_id,
        bool $requires_reset
    ) {
        $this->password_id = $password_id;
        $this->requires_reset = $requires_reset;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['password_id'],
            $data['requires_reset']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'password_id' => $this->password_id,
            'requires_reset' => $this->requires_reset,
        ];
    }
}

class PhoneNumber
{
    public string $phone_id;
    public string $phone_number;
    public bool $verified;

    public function __construct(
        string $phone_id,
        string $phone_number,
        bool $verified
    ) {
        $this->phone_id = $phone_id;
        $this->phone_number = $phone_number;
        $this->verified = $verified;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['phone_id'],
            $data['phone_number'],
            $data['verified']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'phone_id' => $this->phone_id,
            'phone_number' => $this->phone_number,
            'verified' => $this->verified,
        ];
    }
}

class ResultsMetadata
{
    public int $total;
    public ?string $next_cursor;

    public function __construct(
        int $total,
        ?string $next_cursor
    ) {
        $this->total = $total;
        $this->next_cursor = $next_cursor;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['total'],
            $data['next_cursor'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'total' => $this->total,
            'next_cursor' => $this->next_cursor,
        ];
    }
}

class SearchUsersQuery
{
    public string $operator;
    public array $operands;

    public function __construct(
        string $operator,
        array $operands
    ) {
        $this->operator = $operator;
        $this->operands = $operands;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['operator'],
            $data['operands']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'operator' => $this->operator,
            'operands' => $this->operands,
        ];
    }
}

class TOTP
{
    public string $totp_id;
    public bool $verified;

    public function __construct(
        string $totp_id,
        bool $verified
    ) {
        $this->totp_id = $totp_id;
        $this->verified = $verified;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['totp_id'],
            $data['verified']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'totp_id' => $this->totp_id,
            'verified' => $this->verified,
        ];
    }
}

class User
{
    public string $user_id;
    public array $emails;
    public string $status;
    public array $phone_numbers;
    public array $webauthn_registrations;
    public array $providers;
    public array $totps;
    public array $crypto_wallets;
    public array $biometric_registrations;
    public bool $is_locked;
    public ?Name $name;
    public ?string $created_at;
    public ?Password $password;
    public ?array $trusted_metadata;
    public ?array $untrusted_metadata;
    public ?string $external_id;
    public ?string $lock_created_at;
    public ?string $lock_expires_at;

    public function __construct(
        string $user_id,
        array $emails,
        string $status,
        array $phone_numbers,
        array $webauthn_registrations,
        array $providers,
        array $totps,
        array $crypto_wallets,
        array $biometric_registrations,
        bool $is_locked,
        ?Name $name,
        ?string $created_at,
        ?Password $password,
        ?array $trusted_metadata,
        ?array $untrusted_metadata,
        ?string $external_id,
        ?string $lock_created_at,
        ?string $lock_expires_at
    ) {
        $this->user_id = $user_id;
        $this->emails = $emails;
        $this->status = $status;
        $this->phone_numbers = $phone_numbers;
        $this->webauthn_registrations = $webauthn_registrations;
        $this->providers = $providers;
        $this->totps = $totps;
        $this->crypto_wallets = $crypto_wallets;
        $this->biometric_registrations = $biometric_registrations;
        $this->is_locked = $is_locked;
        $this->name = $name;
        $this->created_at = $created_at;
        $this->password = $password;
        $this->trusted_metadata = $trusted_metadata;
        $this->untrusted_metadata = $untrusted_metadata;
        $this->external_id = $external_id;
        $this->lock_created_at = $lock_created_at;
        $this->lock_expires_at = $lock_expires_at;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['user_id'],
            $data['emails'],
            $data['status'],
            $data['phone_numbers'],
            $data['webauthn_registrations'],
            $data['providers'],
            $data['totps'],
            $data['crypto_wallets'],
            $data['biometric_registrations'],
            $data['is_locked'],
            $data['name'] ?? null,
            $data['created_at'] ?? null,
            $data['password'] ?? null,
            $data['trusted_metadata'] ?? null,
            $data['untrusted_metadata'] ?? null,
            $data['external_id'] ?? null,
            $data['lock_created_at'] ?? null,
            $data['lock_expires_at'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'user_id' => $this->user_id,
            'emails' => $this->emails,
            'status' => $this->status,
            'phone_numbers' => $this->phone_numbers,
            'webauthn_registrations' => $this->webauthn_registrations,
            'providers' => $this->providers,
            'totps' => $this->totps,
            'crypto_wallets' => $this->crypto_wallets,
            'biometric_registrations' => $this->biometric_registrations,
            'is_locked' => $this->is_locked,
            'name' => $this->name,
            'created_at' => $this->created_at,
            'password' => $this->password,
            'trusted_metadata' => $this->trusted_metadata,
            'untrusted_metadata' => $this->untrusted_metadata,
            'external_id' => $this->external_id,
            'lock_created_at' => $this->lock_created_at,
            'lock_expires_at' => $this->lock_expires_at,
        ];
    }
}

class UserConnectedApp
{
    public string $connected_app_id;
    public string $name;
    public string $description;
    public string $client_type;
    public string $scopes_granted;
    public ?string $logo_url;

    public function __construct(
        string $connected_app_id,
        string $name,
        string $description,
        string $client_type,
        string $scopes_granted,
        ?string $logo_url
    ) {
        $this->connected_app_id = $connected_app_id;
        $this->name = $name;
        $this->description = $description;
        $this->client_type = $client_type;
        $this->scopes_granted = $scopes_granted;
        $this->logo_url = $logo_url;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['connected_app_id'],
            $data['name'],
            $data['description'],
            $data['client_type'],
            $data['scopes_granted'],
            $data['logo_url'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'connected_app_id' => $this->connected_app_id,
            'name' => $this->name,
            'description' => $this->description,
            'client_type' => $this->client_type,
            'scopes_granted' => $this->scopes_granted,
            'logo_url' => $this->logo_url,
        ];
    }
}

class WebAuthnRegistration
{
    public string $webauthn_registration_id;
    public string $domain;
    public string $user_agent;
    public bool $verified;
    public string $authenticator_type;
    public string $name;

    public function __construct(
        string $webauthn_registration_id,
        string $domain,
        string $user_agent,
        bool $verified,
        string $authenticator_type,
        string $name
    ) {
        $this->webauthn_registration_id = $webauthn_registration_id;
        $this->domain = $domain;
        $this->user_agent = $user_agent;
        $this->verified = $verified;
        $this->authenticator_type = $authenticator_type;
        $this->name = $name;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['webauthn_registration_id'],
            $data['domain'],
            $data['user_agent'],
            $data['verified'],
            $data['authenticator_type'],
            $data['name']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'webauthn_registration_id' => $this->webauthn_registration_id,
            'domain' => $this->domain,
            'user_agent' => $this->user_agent,
            'verified' => $this->verified,
            'authenticator_type' => $this->authenticator_type,
            'name' => $this->name,
        ];
    }
}

class ConnectedAppsResponse
{
    public array $connected_apps;

    public function __construct(
        array $connected_apps
    ) {
        $this->connected_apps = $connected_apps;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['connected_apps']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'connected_apps' => $this->connected_apps,
        ];
    }
}

class CreateResponse
{
    public string $user_id;
    public string $email_id;
    public string $status;
    public string $phone_id;
    public User $user;

    public function __construct(
        string $user_id,
        string $email_id,
        string $status,
        string $phone_id,
        User $user
    ) {
        $this->user_id = $user_id;
        $this->email_id = $email_id;
        $this->status = $status;
        $this->phone_id = $phone_id;
        $this->user = $user;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['user_id'],
            $data['email_id'],
            $data['status'],
            $data['phone_id'],
            $data['user']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'user_id' => $this->user_id,
            'email_id' => $this->email_id,
            'status' => $this->status,
            'phone_id' => $this->phone_id,
            'user' => $this->user,
        ];
    }
}

class DeleteBiometricRegistrationResponse
{
    public string $user_id;
    public User $user;

    public function __construct(
        string $user_id,
        User $user
    ) {
        $this->user_id = $user_id;
        $this->user = $user;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['user_id'],
            $data['user']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'user_id' => $this->user_id,
            'user' => $this->user,
        ];
    }
}

class DeleteCryptoWalletResponse
{
    public string $user_id;
    public User $user;

    public function __construct(
        string $user_id,
        User $user
    ) {
        $this->user_id = $user_id;
        $this->user = $user;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['user_id'],
            $data['user']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'user_id' => $this->user_id,
            'user' => $this->user,
        ];
    }
}

class DeleteEmailResponse
{
    public string $user_id;
    public User $user;

    public function __construct(
        string $user_id,
        User $user
    ) {
        $this->user_id = $user_id;
        $this->user = $user;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['user_id'],
            $data['user']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'user_id' => $this->user_id,
            'user' => $this->user,
        ];
    }
}

class DeleteOAuthRegistrationResponse
{
    public string $user_id;
    public User $user;

    public function __construct(
        string $user_id,
        User $user
    ) {
        $this->user_id = $user_id;
        $this->user = $user;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['user_id'],
            $data['user']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'user_id' => $this->user_id,
            'user' => $this->user,
        ];
    }
}

class DeletePasswordResponse
{
    public string $user_id;
    public User $user;

    public function __construct(
        string $user_id,
        User $user
    ) {
        $this->user_id = $user_id;
        $this->user = $user;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['user_id'],
            $data['user']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'user_id' => $this->user_id,
            'user' => $this->user,
        ];
    }
}

class DeletePhoneNumberResponse
{
    public string $user_id;
    public User $user;

    public function __construct(
        string $user_id,
        User $user
    ) {
        $this->user_id = $user_id;
        $this->user = $user;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['user_id'],
            $data['user']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'user_id' => $this->user_id,
            'user' => $this->user,
        ];
    }
}

class DeleteResponse
{
    public string $user_id;

    public function __construct(
        string $user_id
    ) {
        $this->user_id = $user_id;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['user_id']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'user_id' => $this->user_id,
        ];
    }
}

class DeleteTOTPResponse
{
    public string $user_id;
    public User $user;

    public function __construct(
        string $user_id,
        User $user
    ) {
        $this->user_id = $user_id;
        $this->user = $user;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['user_id'],
            $data['user']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'user_id' => $this->user_id,
            'user' => $this->user,
        ];
    }
}

class DeleteWebAuthnRegistrationResponse
{
    public string $user_id;
    public User $user;

    public function __construct(
        string $user_id,
        User $user
    ) {
        $this->user_id = $user_id;
        $this->user = $user;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['user_id'],
            $data['user']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'user_id' => $this->user_id,
            'user' => $this->user,
        ];
    }
}

class ExchangePrimaryFactorResponse
{
    public string $user_id;
    public User $user;

    public function __construct(
        string $user_id,
        User $user
    ) {
        $this->user_id = $user_id;
        $this->user = $user;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['user_id'],
            $data['user']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'user_id' => $this->user_id,
            'user' => $this->user,
        ];
    }
}

class GetResponse
{
    public string $user_id;
    public array $emails;
    public string $status;
    public array $phone_numbers;
    public array $webauthn_registrations;
    public array $providers;
    public array $totps;
    public array $crypto_wallets;
    public array $biometric_registrations;
    public bool $is_locked;
    public ?Name $name;
    public ?string $created_at;
    public ?Password $password;
    public ?array $trusted_metadata;
    public ?array $untrusted_metadata;
    public ?string $external_id;
    public ?string $lock_created_at;
    public ?string $lock_expires_at;

    public function __construct(
        string $user_id,
        array $emails,
        string $status,
        array $phone_numbers,
        array $webauthn_registrations,
        array $providers,
        array $totps,
        array $crypto_wallets,
        array $biometric_registrations,
        bool $is_locked,
        ?Name $name,
        ?string $created_at,
        ?Password $password,
        ?array $trusted_metadata,
        ?array $untrusted_metadata,
        ?string $external_id,
        ?string $lock_created_at,
        ?string $lock_expires_at
    ) {
        $this->user_id = $user_id;
        $this->emails = $emails;
        $this->status = $status;
        $this->phone_numbers = $phone_numbers;
        $this->webauthn_registrations = $webauthn_registrations;
        $this->providers = $providers;
        $this->totps = $totps;
        $this->crypto_wallets = $crypto_wallets;
        $this->biometric_registrations = $biometric_registrations;
        $this->is_locked = $is_locked;
        $this->name = $name;
        $this->created_at = $created_at;
        $this->password = $password;
        $this->trusted_metadata = $trusted_metadata;
        $this->untrusted_metadata = $untrusted_metadata;
        $this->external_id = $external_id;
        $this->lock_created_at = $lock_created_at;
        $this->lock_expires_at = $lock_expires_at;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['user_id'],
            $data['emails'],
            $data['status'],
            $data['phone_numbers'],
            $data['webauthn_registrations'],
            $data['providers'],
            $data['totps'],
            $data['crypto_wallets'],
            $data['biometric_registrations'],
            $data['is_locked'],
            $data['name'] ?? null,
            $data['created_at'] ?? null,
            $data['password'] ?? null,
            $data['trusted_metadata'] ?? null,
            $data['untrusted_metadata'] ?? null,
            $data['external_id'] ?? null,
            $data['lock_created_at'] ?? null,
            $data['lock_expires_at'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'user_id' => $this->user_id,
            'emails' => $this->emails,
            'status' => $this->status,
            'phone_numbers' => $this->phone_numbers,
            'webauthn_registrations' => $this->webauthn_registrations,
            'providers' => $this->providers,
            'totps' => $this->totps,
            'crypto_wallets' => $this->crypto_wallets,
            'biometric_registrations' => $this->biometric_registrations,
            'is_locked' => $this->is_locked,
            'name' => $this->name,
            'created_at' => $this->created_at,
            'password' => $this->password,
            'trusted_metadata' => $this->trusted_metadata,
            'untrusted_metadata' => $this->untrusted_metadata,
            'external_id' => $this->external_id,
            'lock_created_at' => $this->lock_created_at,
            'lock_expires_at' => $this->lock_expires_at,
        ];
    }
}

class RevokeResponse
{

    public function __construct(
    ) {
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
        ];
    }
}

class SearchResponse
{
    public array $results;
    public ResultsMetadata $results_metadata;

    public function __construct(
        array $results,
        ResultsMetadata $results_metadata
    ) {
        $this->results = $results;
        $this->results_metadata = $results_metadata;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['results'],
            $data['results_metadata']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'results' => $this->results,
            'results_metadata' => $this->results_metadata,
        ];
    }
}

class UpdateResponse
{
    public string $user_id;
    public array $emails;
    public array $phone_numbers;
    public array $crypto_wallets;
    public User $user;

    public function __construct(
        string $user_id,
        array $emails,
        array $phone_numbers,
        array $crypto_wallets,
        User $user
    ) {
        $this->user_id = $user_id;
        $this->emails = $emails;
        $this->phone_numbers = $phone_numbers;
        $this->crypto_wallets = $crypto_wallets;
        $this->user = $user;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['user_id'],
            $data['emails'],
            $data['phone_numbers'],
            $data['crypto_wallets'],
            $data['user']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'user_id' => $this->user_id,
            'emails' => $this->emails,
            'phone_numbers' => $this->phone_numbers,
            'crypto_wallets' => $this->crypto_wallets,
            'user' => $this->user,
        ];
    }
}

