<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Models\WebAuthn;

class RegisterStartRequest
{
    /**
    * The `user_id` of an active user the Passkey or WebAuthn registration should be tied to. You may use an
    * `external_id` here if one is set for the user.
     */
    public string $userId;
    /** The domain for Passkeys or WebAuthn. Defaults to `window.location.hostname`. */
    public string $domain;
    /** The user agent of the client. */
    public ?string $userAgent = null;
    /**
    * The requested authenticator type of the Passkey or WebAuthn device. The two valid values are platform
    * and cross-platform. If no value passed, we assume both values are allowed.
     */
    public ?string $authenticatorType = null;
    /**
    * If true, the `public_key_credential_creation_options` returned will be optimized for Passkeys with
    * `residentKey` set to `"required"` and `userVerification` set to `"preferred"`.
     */
    public ?bool $returnPasskeyCredentialOptions = null;
    public ?string $overrideId = null;
    public ?string $overrideName = null;
    public ?string $overrideDisplayName = null;
    public ?bool $useBase64URLEncoding = null;

    public function __construct(
        string $userId,
        string $domain,
        ?string $userAgent = null,
        ?string $authenticatorType = null,
        ?bool $returnPasskeyCredentialOptions = null,
        ?string $overrideId = null,
        ?string $overrideName = null,
        ?string $overrideDisplayName = null,
        ?bool $useBase64URLEncoding = null
    ) {
        $this->userId = $userId;
        $this->domain = $domain;
        $this->userAgent = $userAgent;
        $this->authenticatorType = $authenticatorType;
        $this->returnPasskeyCredentialOptions = $returnPasskeyCredentialOptions;
        $this->overrideId = $overrideId;
        $this->overrideName = $overrideName;
        $this->overrideDisplayName = $overrideDisplayName;
        $this->useBase64URLEncoding = $useBase64URLEncoding;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['user_id'],
            $data['domain'],
            $data['user_agent'] ?? null,
            $data['authenticator_type'] ?? null,
            $data['return_passkey_credential_options'] ?? null,
            $data['override_id'] ?? null,
            $data['override_name'] ?? null,
            $data['override_display_name'] ?? null,
            $data['use_base64_url_encoding'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'user_id' => $this->userId,
            'domain' => $this->domain,
            'user_agent' => $this->userAgent,
            'authenticator_type' => $this->authenticatorType,
            'return_passkey_credential_options' => $this->returnPasskeyCredentialOptions,
            'override_id' => $this->overrideId,
            'override_name' => $this->overrideName,
            'override_display_name' => $this->overrideDisplayName,
            'use_base64_url_encoding' => $this->useBase64URLEncoding,
        ];
    }
}
