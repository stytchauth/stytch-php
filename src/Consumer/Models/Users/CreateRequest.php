<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Models\Users;

class CreateRequest
{
    /** The email address of the end user. */
    public ?string $email = null;
    /** The name of the user. Each field in the name object is optional. */
    public ?Name $name = null;
    public ?\Stytch\Consumer\Models\Attributes $attributes = null;
    /**
    * The phone number to use for one-time passcodes. The phone number should be in E.164 format (i.e.
    * +1XXXXXXXXXX). You may use +10000000000 to test this endpoint, see
    * [Testing](https://stytch.com/docs/home#resources_testing) for more detail.
     */
    public ?string $phoneNumber = null;
    /**
    * Flag for whether or not to save a user as pending vs active in Stytch. Defaults to false.
    *         If true, users will be saved with status pending in Stytch's backend until authenticated.
    *         If false, users will be created as active. An example usage of
    *         a true flag would be to require users to verify their phone by entering the OTP code before
    * creating
    *         an account for them.
     */
    public ?bool $createUserAsPending = null;
    /**
    * The `trusted_metadata` field contains an arbitrary JSON object of application-specific data. See the
    * [Metadata](https://stytch.com/docs/api/metadata) reference for complete field behavior details.
     */
    public ?array $trustedMetadata = null;
    /**
    * The `untrusted_metadata` field contains an arbitrary JSON object of application-specific data. Untrusted
    * metadata can be edited by end users directly via the SDK, and **cannot be used to store critical
    * information.** See the [Metadata](https://stytch.com/docs/api/metadata) reference for complete field
    * behavior details.
     */
    public ?array $untrustedMetadata = null;
    /**
    * An identifier that can be used in API calls wherever a user_id is expected. This is a string consisting
    * of alphanumeric, `.`, `_`, `-`, or `|` characters with a maximum length of 128 characters.
     */
    public ?string $externalId = null;

    public function __construct(
        ?string $email = null,
        ?Name $name = null,
        ?\Stytch\Consumer\Models\Attributes $attributes = null,
        ?string $phoneNumber = null,
        ?bool $createUserAsPending = null,
        ?array $trustedMetadata = null,
        ?array $untrustedMetadata = null,
        ?string $externalId = null
    ) {
        $this->email = $email;
        $this->name = $name;
        $this->attributes = $attributes;
        $this->phoneNumber = $phoneNumber;
        $this->createUserAsPending = $createUserAsPending;
        $this->trustedMetadata = $trustedMetadata;
        $this->untrustedMetadata = $untrustedMetadata;
        $this->externalId = $externalId;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['email'] ?? null,
            $data['name'] !== null ? Name::fromArray($data['name']) : null,
            $data['attributes'] !== null ? \Stytch\Consumer\Models\Attributes::fromArray($data['attributes']) : null,
            $data['phone_number'] ?? null,
            $data['create_user_as_pending'] ?? null,
            $data['trusted_metadata'] ?? null,
            $data['untrusted_metadata'] ?? null,
            $data['external_id'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'email' => $this->email,
            'name' => $this->name,
            'attributes' => $this->attributes,
            'phone_number' => $this->phoneNumber,
            'create_user_as_pending' => $this->createUserAsPending,
            'trusted_metadata' => $this->trustedMetadata,
            'untrusted_metadata' => $this->untrustedMetadata,
            'external_id' => $this->externalId,
        ];
    }
}
