<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Models\Users;

final class User
{
    /** The unique ID of the affected User. */
    public string $userId;
    /** An array of email objects for the User. */
    public array $emails;
    /** The status of the User. The possible values are `pending` and `active`. */
    public string $status;
    /** An array of phone number objects linked to the User. */
    public array $phoneNumbers;
    /**
    * An array that contains a list of all Passkey or WebAuthn registrations for a given User in the Stytch
    * API.
     */
    public array $webauthnRegistrations;
    /** An array of OAuth `provider` objects linked to the User. */
    public array $providers;
    /** An array containing a list of all TOTP instances for a given User in the Stytch API. */
    public array $totps;
    /** An array contains a list of all crypto wallets for a given User in the Stytch API. */
    public array $cryptoWallets;
    /** An array that contains a list of all biometric registrations for a given User in the Stytch API. */
    public array $biometricRegistrations;
    public bool $isLocked;
    /**
    * Roles assigned to this User.
    *    See the [RBAC guide](https://stytch.com/docs/guides/rbac/role-assignment) for more information about
    * role assignment.
     */
    public array $roles;
    /** The name of the User. Each field in the `name` object is optional. */
    public ?Name $name = null;
    /**
    * The timestamp of the User's creation. Values conform to the RFC 3339 standard and are expressed in UTC,
    * e.g. `2021-12-29T12:33:09Z`.
     */
    public ?string $createdAt = null;
    /** The password object is returned for users with a password. */
    public ?Password $password = null;
    /**
    * The `trusted_metadata` field contains an arbitrary JSON object of application-specific data. See the
    * [Metadata](https://stytch.com/docs/api/metadata) reference for complete field behavior details.
     */
    public ?array $trustedMetadata = null;
    /**
    * The `untrusted_metadata` field contains an arbitrary JSON object of application-specific data. Untrusted
    * metadata can be edited by end users directly via the SDK, and **cannot be used to store critical
    * information.** See the [Metadata](https://stytch.com/docs/api/metadata) reference for complete field
    * behavior details.
     */
    public ?array $untrustedMetadata = null;
    public ?string $externalId = null;
    public ?string $lockCreatedAt = null;
    public ?string $lockExpiresAt = null;

    public function __construct(
        string $userId,
        array $emails,
        string $status,
        array $phoneNumbers,
        array $webauthnRegistrations,
        array $providers,
        array $totps,
        array $cryptoWallets,
        array $biometricRegistrations,
        bool $isLocked,
        array $roles,
        ?Name $name = null,
        ?string $createdAt = null,
        ?Password $password = null,
        ?array $trustedMetadata = null,
        ?array $untrustedMetadata = null,
        ?string $externalId = null,
        ?string $lockCreatedAt = null,
        ?string $lockExpiresAt = null
    ) {
        $this->userId = $userId;
        $this->emails = $emails;
        $this->status = $status;
        $this->phoneNumbers = $phoneNumbers;
        $this->webauthnRegistrations = $webauthnRegistrations;
        $this->providers = $providers;
        $this->totps = $totps;
        $this->cryptoWallets = $cryptoWallets;
        $this->biometricRegistrations = $biometricRegistrations;
        $this->isLocked = $isLocked;
        $this->roles = $roles;
        $this->name = $name;
        $this->createdAt = $createdAt;
        $this->password = $password;
        $this->trustedMetadata = $trustedMetadata;
        $this->untrustedMetadata = $untrustedMetadata;
        $this->externalId = $externalId;
        $this->lockCreatedAt = $lockCreatedAt;
        $this->lockExpiresAt = $lockExpiresAt;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['user_id'],
            isset($data['emails']) ? array_map(fn ($item) => Email::fromArray($item), $data['emails']) : [],
            $data['status'],
            isset($data['phone_numbers']) ? array_map(fn ($item) => PhoneNumber::fromArray($item), $data['phone_numbers']) : [],
            isset($data['webauthn_registrations']) ? array_map(fn ($item) => WebAuthnRegistration::fromArray($item), $data['webauthn_registrations']) : [],
            isset($data['providers']) ? array_map(fn ($item) => OAuthProvider::fromArray($item), $data['providers']) : [],
            isset($data['totps']) ? array_map(fn ($item) => TOTP::fromArray($item), $data['totps']) : [],
            isset($data['crypto_wallets']) ? array_map(fn ($item) => CryptoWallet::fromArray($item), $data['crypto_wallets']) : [],
            isset($data['biometric_registrations']) ? array_map(fn ($item) => BiometricRegistration::fromArray($item), $data['biometric_registrations']) : [],
            $data['is_locked'],
            $data['roles'],
            $data['name'] !== null ? Name::fromArray($data['name']) : null,
            $data['created_at'] ?? null,
            $data['password'] !== null ? Password::fromArray($data['password']) : null,
            $data['trusted_metadata'] ?? null,
            $data['untrusted_metadata'] ?? null,
            $data['external_id'] ?? null,
            $data['lock_created_at'] ?? null,
            $data['lock_expires_at'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'user_id' => $this->userId,
            'emails' => $this->emails,
            'status' => $this->status,
            'phone_numbers' => $this->phoneNumbers,
            'webauthn_registrations' => $this->webauthnRegistrations,
            'providers' => $this->providers,
            'totps' => $this->totps,
            'crypto_wallets' => $this->cryptoWallets,
            'biometric_registrations' => $this->biometricRegistrations,
            'is_locked' => $this->isLocked,
            'roles' => $this->roles,
            'name' => $this->name,
            'created_at' => $this->createdAt,
            'password' => $this->password,
            'trusted_metadata' => $this->trustedMetadata,
            'untrusted_metadata' => $this->untrustedMetadata,
            'external_id' => $this->externalId,
            'lock_created_at' => $this->lockCreatedAt,
            'lock_expires_at' => $this->lockExpiresAt,
        ];
    }
}
