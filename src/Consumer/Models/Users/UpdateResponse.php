<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Models\Users;

class UpdateResponse
{
    /**
    * Globally unique UUID that is returned with every API call. This value is important to log for debugging
    * purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
     */
    public string $requestId;
    /** The unique ID of the updated User. */
    public string $userId;
    /** An array of email objects for the User. */
    public array $emails;
    /** An array of phone number objects linked to the User. */
    public array $phoneNumbers;
    /** An array contains a list of all crypto wallets for a given User in the Stytch API. */
    public array $cryptoWallets;
    /**
    * The `user` object affected by this API call. See the
    * [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
     */
    public User $user;
    /**
    * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
    * 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
     */
    public int $statusCode;

    public function __construct(
        string $requestId,
        string $userId,
        array $emails,
        array $phoneNumbers,
        array $cryptoWallets,
        User $user,
        int $statusCode
    ) {
        $this->requestId = $requestId;
        $this->userId = $userId;
        $this->emails = $emails;
        $this->phoneNumbers = $phoneNumbers;
        $this->cryptoWallets = $cryptoWallets;
        $this->user = $user;
        $this->statusCode = $statusCode;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['request_id'],
            $data['user_id'],
            isset($data['emails']) ? array_map(fn ($item) => Email::fromArray($item), $data['emails']) : [],
            isset($data['phone_numbers']) ? array_map(fn ($item) => PhoneNumber::fromArray($item), $data['phone_numbers']) : [],
            isset($data['crypto_wallets']) ? array_map(fn ($item) => CryptoWallet::fromArray($item), $data['crypto_wallets']) : [],
            User::fromArray($data['user']),
            $data['status_code']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'request_id' => $this->requestId,
            'user_id' => $this->userId,
            'emails' => $this->emails,
            'phone_numbers' => $this->phoneNumbers,
            'crypto_wallets' => $this->cryptoWallets,
            'user' => $this->user,
            'status_code' => $this->statusCode,
        ];
    }
}
