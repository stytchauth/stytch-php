<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Models\Passwords;


final class StrengthCheckResponse
{
    /**
    * Globally unique UUID that is returned with every API call. This value is important to log for debugging
    * purposes; we may ask for this value to help identify a specific API call when helping you debug an issue.
     */
    public string $requestId;
    /**
    * Returns `true` if the password passes our password validation. We offer two validation options,
    * [zxcvbn](https://stytch.com/docs/guides/passwords/strength-policy) is the default option which offers a
    * high level of sophistication. We also offer
    * [LUDS](https://stytch.com/docs/guides/passwords/strength-policy). If an email address is included in the
    * call we also require that the password hasn't been compromised using built-in breach detection powered
    * by [HaveIBeenPwned](https://haveibeenpwned.com/).
     */
    public bool $validPassword;
    /**
    * The score of the password determined by [zxcvbn](https://github.com/dropbox/zxcvbn). Values will be
    * between 1 and 4, a 3 or greater is required to pass validation.
     */
    public int $score;
    /**
    * Returns `true` if the password has been breached. Powered by
    * [HaveIBeenPwned](https://haveibeenpwned.com/).
     */
    public bool $breachedPassword;
    /** The strength policy type enforced, either `zxcvbn` or `luds`. */
    public string $strengthPolicy;
    /**
    * Will return `true` if breach detection will be evaluated. By default this option is enabled. This option
    * can be disabled by contacting
    * [support@stytch.com](mailto:support@stytch.com?subject=Password%20strength%20configuration). If this
    * value is `false` then `breached_password` will always be `false` as well.
     */
    public bool $breachDetectionOnCreate;
    /**
    * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g.
    * 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
     */
    public int $statusCode;
    /** Feedback for how to improve the password's strength [HaveIBeenPwned](https://haveibeenpwned.com/). */
    public ?Feedback $feedback = null;

    public function __construct(
        string $requestId,
        bool $validPassword,
        int $score,
        bool $breachedPassword,
        string $strengthPolicy,
        bool $breachDetectionOnCreate,
        int $statusCode,
        ?Feedback $feedback = null
    ) {
        $this->requestId = $requestId;
        $this->validPassword = $validPassword;
        $this->score = $score;
        $this->breachedPassword = $breachedPassword;
        $this->strengthPolicy = $strengthPolicy;
        $this->breachDetectionOnCreate = $breachDetectionOnCreate;
        $this->statusCode = $statusCode;
        $this->feedback = $feedback;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['request_id'],
            $data['valid_password'],
            $data['score'],
            $data['breached_password'],
            $data['strength_policy'],
            $data['breach_detection_on_create'],
            $data['status_code'],
            $data['feedback'] !== null ? Feedback::fromArray($data['feedback']) : null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'request_id' => $this->requestId,
            'valid_password' => $this->validPassword,
            'score' => $this->score,
            'breached_password' => $this->breachedPassword,
            'strength_policy' => $this->strengthPolicy,
            'breach_detection_on_create' => $this->breachDetectionOnCreate,
            'status_code' => $this->statusCode,
            'feedback' => $this->feedback,
        ];
    }
}