<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Models\Passwords;

final class ScryptConfig
{
    /** The salt value, which should be in a base64 encoded string form. */
    public string $salt;
    /**
    * The N value, also known as the iterations count. It must be a power of two greater than 1 and less than
    * 262,145.
    *       If your application's N parameter is larger than 262,144, please reach out to
    * [support@stytch.com](mailto:support@stytch.com)
     */
    public int $nParameter;
    /** The r parameter, also known as the block size. */
    public int $rParameter;
    /** The p parameter, also known as the parallelism factor. */
    public int $pParameter;
    /** The key length, also known as the hash length. */
    public int $keyLength;

    public function __construct(
        string $salt,
        int $nParameter,
        int $rParameter,
        int $pParameter,
        int $keyLength
    ) {
        $this->salt = $salt;
        $this->nParameter = $nParameter;
        $this->rParameter = $rParameter;
        $this->pParameter = $pParameter;
        $this->keyLength = $keyLength;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['salt'],
            $data['n_parameter'],
            $data['r_parameter'],
            $data['p_parameter'],
            $data['key_length']
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'salt' => $this->salt,
            'n_parameter' => $this->nParameter,
            'r_parameter' => $this->rParameter,
            'p_parameter' => $this->pParameter,
            'key_length' => $this->keyLength,
        ];
    }
}
