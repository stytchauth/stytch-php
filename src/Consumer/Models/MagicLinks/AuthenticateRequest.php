<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Models\MagicLinks;


final class AuthenticateRequest
{
    /**
    * The Magic Link `token` from the `?token=` query parameter in the URL.
    * 
    *       The redirect URL will look like
    * `https://example.com/authenticate?stytch_token_type=magic_links&token=rM_kw42CWBhsHLF62V75jELMbvJ87njMe3tFVj7Qupu7`
    * 
    *       In the redirect URL, the `stytch_token_type` will be `magic_link`. See
    * [here](https://stytch.com/docs/workspace-management/redirect-urls) for more detail.
     */
    public string $token;
    /**
    * Provided attributes to help with fraud detection. These values are pulled and passed into Stytch
    * endpoints by your application.
     */
    public ?\Stytch\Consumer\Models\Attributes $attributes = null;
    /** Specify optional security settings. */
    public ?Options $options = null;
    /** The `session_token` associated with a User's existing Session. */
    public ?string $sessionToken = null;
    /**
    * Set the session lifetime to be this many minutes from now. This will start a new session if one doesn't
    * already exist,
    *   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
    * `session_jwt` will have a fixed lifetime of
    *   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
    * 
    *   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
    * 
    *   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
    * extend the session this many minutes.
    * 
    *   If the `session_duration_minutes` parameter is not specified, a Stytch session will not be created.
     */
    public ?int $sessionDurationMinutes = null;
    /** The `session_jwt` associated with a User's existing Session. */
    public ?string $sessionJwt = null;
    /**
    * Add a custom claims map to the Session being authenticated. Claims are only created if a Session is
    * initialized by providing a value in `session_duration_minutes`. Claims will be included on the Session
    * object and in the JWT. To update a key in an existing Session, supply a new value. To delete a key,
    * supply a null value.
    * 
    *   Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be
    * ignored. Total custom claims size cannot exceed four kilobytes.
     */
    public ?array $sessionCustomClaims = null;
    /** A base64url encoded one time secret used to validate that the request starts and ends on the same device. */
    public ?string $codeVerifier = null;
    /**
    * If the `telemetry_id` is passed, as part of this request, Stytch will call the
    * [Fingerprint Lookup API](https://stytch.com/docs/fraud/api/fingerprint-lookup) and store the associated
    * fingerprints and IPGEO information for the User. Your workspace must be enabled for Device
    * Fingerprinting to use this feature.
     */
    public ?string $telemetryId = null;

    public function __construct(
        string $token,
        ?\Stytch\Consumer\Models\Attributes $attributes = null,
        ?Options $options = null,
        ?string $sessionToken = null,
        ?int $sessionDurationMinutes = null,
        ?string $sessionJwt = null,
        ?array $sessionCustomClaims = null,
        ?string $codeVerifier = null,
        ?string $telemetryId = null
    ) {
        $this->token = $token;
        $this->attributes = $attributes;
        $this->options = $options;
        $this->sessionToken = $sessionToken;
        $this->sessionDurationMinutes = $sessionDurationMinutes;
        $this->sessionJwt = $sessionJwt;
        $this->sessionCustomClaims = $sessionCustomClaims;
        $this->codeVerifier = $codeVerifier;
        $this->telemetryId = $telemetryId;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['token'],
            $data['attributes'] !== null ? \Stytch\Consumer\Models\Attributes::fromArray($data['attributes']) : null,
            $data['options'] !== null ? Options::fromArray($data['options']) : null,
            $data['session_token'] ?? null,
            $data['session_duration_minutes'] ?? null,
            $data['session_jwt'] ?? null,
            $data['session_custom_claims'] ?? null,
            $data['code_verifier'] ?? null,
            $data['telemetry_id'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'token' => $this->token,
            'attributes' => $this->attributes,
            'options' => $this->options,
            'session_token' => $this->sessionToken,
            'session_duration_minutes' => $this->sessionDurationMinutes,
            'session_jwt' => $this->sessionJwt,
            'session_custom_claims' => $this->sessionCustomClaims,
            'code_verifier' => $this->codeVerifier,
            'telemetry_id' => $this->telemetryId,
        ];
    }
}