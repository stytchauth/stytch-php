<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Models\TOTPs;


final class RecoverRequest
{
    /**
    * The `user_id` of an active user the TOTP registration should be tied to. You may use an `external_id`
    * here if one is set for the user.
     */
    public string $userId;
    /** The recovery code to authenticate. */
    public string $recoveryCode;
    /** The `session_token` associated with a User's existing Session. */
    public ?string $sessionToken = null;
    /**
    * Set the session lifetime to be this many minutes from now. This will start a new session if one doesn't
    * already exist,
    *   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
    * `session_jwt` will have a fixed lifetime of
    *   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
    * 
    *   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
    * 
    *   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
    * extend the session this many minutes.
    * 
    *   If the `session_duration_minutes` parameter is not specified, a Stytch session will not be created.
     */
    public ?int $sessionDurationMinutes = null;
    /** The `session_jwt` associated with a User's existing Session. */
    public ?string $sessionJwt = null;
    /**
    * Add a custom claims map to the Session being authenticated. Claims are only created if a Session is
    * initialized by providing a value in `session_duration_minutes`. Claims will be included on the Session
    * object and in the JWT. To update a key in an existing Session, supply a new value. To delete a key,
    * supply a null value.
    * 
    *   Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be
    * ignored. Total custom claims size cannot exceed four kilobytes.
     */
    public ?array $sessionCustomClaims = null;
    /**
    * If the `telemetry_id` is passed, as part of this request, Stytch will call the
    * [Fingerprint Lookup API](https://stytch.com/docs/fraud/api/fingerprint-lookup) and store the associated
    * fingerprints and IPGEO information for the User. Your workspace must be enabled for Device
    * Fingerprinting to use this feature.
     */
    public ?string $telemetryId = null;

    public function __construct(
        string $userId,
        string $recoveryCode,
        ?string $sessionToken = null,
        ?int $sessionDurationMinutes = null,
        ?string $sessionJwt = null,
        ?array $sessionCustomClaims = null,
        ?string $telemetryId = null
    ) {
        $this->userId = $userId;
        $this->recoveryCode = $recoveryCode;
        $this->sessionToken = $sessionToken;
        $this->sessionDurationMinutes = $sessionDurationMinutes;
        $this->sessionJwt = $sessionJwt;
        $this->sessionCustomClaims = $sessionCustomClaims;
        $this->telemetryId = $telemetryId;
    }

    /**
     * Create an instance from an array
     *
     * @param array $data
     * @return static
     */
    public static function fromArray(array $data): static
    {
        return new static(
            $data['user_id'],
            $data['recovery_code'],
            $data['session_token'] ?? null,
            $data['session_duration_minutes'] ?? null,
            $data['session_jwt'] ?? null,
            $data['session_custom_claims'] ?? null,
            $data['telemetry_id'] ?? null
        );
    }

    /**
     * Convert to array
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'user_id' => $this->userId,
            'recovery_code' => $this->recoveryCode,
            'session_token' => $this->sessionToken,
            'session_duration_minutes' => $this->sessionDurationMinutes,
            'session_jwt' => $this->sessionJwt,
            'session_custom_claims' => $this->sessionCustomClaims,
            'telemetry_id' => $this->telemetryId,
        ];
    }
}