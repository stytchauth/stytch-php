<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Api;

use Stytch\Core\Client;

class OTPs
{
    private Client $client;

    public OTPsSms $sms;
    public OTPsWhatsapp $whatsapp;
    public OTPsEmail $email;

    public function __construct(Client $client)
    {
        $this->client = $client;

        $this->sms = new OTPsSms($this->client);
        $this->whatsapp = new OTPsWhatsapp($this->client);
        $this->email = new OTPsEmail($this->client);
    }

/**
    * Authenticate a User given a `method_id` (the associated `email_id` or `phone_id`) and a `code`. This
    * endpoint verifies that the code is valid, hasn't expired or been previously used, and any optional
    * security settings such as IP match or user agent match are satisfied. A given `method_id` may only have
    * a single active OTP code at any given time, if a User requests another OTP code before the first one has
    * expired, the first one will be invalidated.

     * @param \Stytch\Consumer\Models\OTPs\AuthenticateRequest|array $request
     * @return \Stytch\Consumer\Models\OTPs\AuthenticateResponse
     */
    public function authenticate(
        \Stytch\Consumer\Models\OTPs\AuthenticateRequest|array $request,
    ): \Stytch\Consumer\Models\OTPs\AuthenticateResponse {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->post('/v1/otps/authenticate', $data);
        return \Stytch\Consumer\Models\OTPs\AuthenticateResponse::fromArray($response);
    }

    /**
    * Authenticate a User given a `method_id` (the associated `email_id` or `phone_id`) and a `code`. This
    * endpoint verifies that the code is valid, hasn't expired or been previously used, and any optional
    * security settings such as IP match or user agent match are satisfied. A given `method_id` may only have
    * a single active OTP code at any given time, if a User requests another OTP code before the first one has
    * expired, the first one will be invalidated.

     * @param \Stytch\Consumer\Models\OTPs\AuthenticateRequest|array $request
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authenticateAsync(
        \Stytch\Consumer\Models\OTPs\AuthenticateRequest|array $request,
    ): \GuzzleHttp\Promise\PromiseInterface {
        $data = is_array($request) ? $request : $request->toArray();
        $promise = $this->client->postAsync('/v1/otps/authenticate', $data);
        return $promise->then(function ($response) {
            return \Stytch\Consumer\Models\OTPs\AuthenticateResponse::fromArray($response);
        });
    }

}
