<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Api;

use Stytch\Core\Client;

class RBAC
{
    private Client $client;


    public function __construct(Client $client)
    {
        $this->client = $client;

    }

    /**
        * Get the active RBAC Policy for your current Stytch Project. An RBAC Policy is the canonical document
        * that stores all defined Resources and Roles within your RBAC permissioning model.
        *
        * When using the backend SDKs, the RBAC Policy will be cached to allow for local evaluations, eliminating
        * the need for an extra request to Stytch.
        * The policy will be refreshed if an authorization check is requested and the RBAC policy was last updated
        * more than 5 minutes ago.
        *
        * Resources and Roles can be created and managed within the [RBAC page](https://stytch.com/dashboard/rbac)
        * in the Dashboard.
        * Additionally, [Role assignment](https://stytch.com/docs/guides/rbac/role-assignment) can be
        * programmatically managed through certain Stytch API endpoints.
        *
        * Check out the [RBAC overview](https://stytch.com/docs/guides/rbac/overview) to learn more about Stytch's
        * RBAC permissioning model.

         * @param \Stytch\Consumer\Models\RBAC\PolicyRequest|array $request
         * @return \Stytch\Consumer\Models\RBAC\PolicyResponse
         */
    public function policy(\Stytch\Consumer\Models\RBAC\PolicyRequest|array $request): \Stytch\Consumer\Models\RBAC\PolicyResponse
    {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->get('/v1/rbac/policy', $data);
        return \Stytch\Consumer\Models\RBAC\PolicyResponse::fromArray($response);
    }

}
