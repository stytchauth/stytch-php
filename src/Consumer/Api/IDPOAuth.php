<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Api;

use Stytch\Core\Client;

class IDPOAuth
{
    private Client $client;


    public function __construct(Client $client)
    {
        $this->client = $client;

    }

    /**
        * Initiates a request for authorization of a Connected App to access a User's account.
        *
        * Call this endpoint using the query parameters from an OAuth Authorization request.
        * This endpoint validates various fields (`scope`, `client_id`, `redirect_uri`, `prompt`, etc...) are
        * correct and returns
        * relevant information for rendering an OAuth Consent Screen.
        *
        * This endpoint returns:
        * - A public representation of the Connected App requesting authorization
        * - Whether _explicit_ user consent must be granted before proceeding with the authorization
        * - A list of scopes the user has the ability to grant the Connected App
        *
        * Use this response to prompt the user for consent (if necessary) before calling the
        * [Submit OAuth Authorization](https://stytch.com/docs/api/connected-apps-oauth-authorize) endpoint.
        *
        * Exactly one of the following must be provided to identify the user granting authorization:
        * - `user_id`
        * - `session_token`
        * - `session_jwt`
        *
        * If a `session_token` or `session_jwt` is passed, the OAuth Authorization will be linked to the user's
        * session for tracking purposes.
        * One of these fields must be used if the Connected App intends to complete the
        * [Exchange Access Token](https://stytch.com/docs/api/connected-app-access-token-exchange) flow.

         * @param \Stytch\Consumer\Models\IDP\OAuth\AuthorizeStartRequest|array $request
         * @return \Stytch\Consumer\Models\IDP\OAuth\AuthorizeStartResponse
         */
    public function authorizeStart(
        \Stytch\Consumer\Models\IDP\OAuth\AuthorizeStartRequest|array $request,
    ): \Stytch\Consumer\Models\IDP\OAuth\AuthorizeStartResponse {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->post('/v1/idp/oauth/authorize/start', $data);
        return \Stytch\Consumer\Models\IDP\OAuth\AuthorizeStartResponse::fromArray($response);
    }

    /**
    * Initiates a request for authorization of a Connected App to access a User's account.
    *
    * Call this endpoint using the query parameters from an OAuth Authorization request.
    * This endpoint validates various fields (`scope`, `client_id`, `redirect_uri`, `prompt`, etc...) are
    * correct and returns
    * relevant information for rendering an OAuth Consent Screen.
    *
    * This endpoint returns:
    * - A public representation of the Connected App requesting authorization
    * - Whether _explicit_ user consent must be granted before proceeding with the authorization
    * - A list of scopes the user has the ability to grant the Connected App
    *
    * Use this response to prompt the user for consent (if necessary) before calling the
    * [Submit OAuth Authorization](https://stytch.com/docs/api/connected-apps-oauth-authorize) endpoint.
    *
    * Exactly one of the following must be provided to identify the user granting authorization:
    * - `user_id`
    * - `session_token`
    * - `session_jwt`
    *
    * If a `session_token` or `session_jwt` is passed, the OAuth Authorization will be linked to the user's
    * session for tracking purposes.
    * One of these fields must be used if the Connected App intends to complete the
    * [Exchange Access Token](https://stytch.com/docs/api/connected-app-access-token-exchange) flow.

     * @param \Stytch\Consumer\Models\IDP\OAuth\AuthorizeStartRequest|array $request
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authorizeStartAsync(
        \Stytch\Consumer\Models\IDP\OAuth\AuthorizeStartRequest|array $request,
    ): \GuzzleHttp\Promise\PromiseInterface {
        $data = is_array($request) ? $request : $request->toArray();
        $promise = $this->client->postAsync('/v1/idp/oauth/authorize/start', $data);
        return $promise->then(function ($response) {
            return \Stytch\Consumer\Models\IDP\OAuth\AuthorizeStartResponse::fromArray($response);
        });
    }

    /**
        * Completes a request for authorization of a Connected App to access a User's account.
        *
        * Call this endpoint using the query parameters from an OAuth Authorization request, after previously
        * validating those parameters using the
        * [Preflight Check](https://stytch.com/docs/api/connected-apps-oauth-authorize-start) API.
        * Note that this endpoint takes in a few additional parameters the preflight check does not- `state`,
        * `nonce`, and `code_challenge`.
        *
        * If the authorization was successful, the `redirect_uri` will contain a valid `authorization_code`
        * embedded as a query parameter.
        * If the authorization was unsuccessful, the `redirect_uri` will contain an OAuth2.1 `error_code`.
        * In both cases, redirect the user to the location for the response to be consumed by the Connected App.
        *
        * Exactly one of the following must be provided to identify the user granting authorization:
        * - `user_id`
        * - `session_token`
        * - `session_jwt`
        *
        * If a `session_token` or `session_jwt` is passed, the OAuth Authorization will be linked to the user's
        * session for tracking purposes.
        * One of these fields must be used if the Connected App intends to complete the
        * [Exchange Access Token](https://stytch.com/docs/api/connected-app-access-token-exchange) flow.

         * @param \Stytch\Consumer\Models\IDP\OAuth\AuthorizeRequest|array $request
         * @return \Stytch\Consumer\Models\IDP\OAuth\AuthorizeResponse
         */
    public function authorize(
        \Stytch\Consumer\Models\IDP\OAuth\AuthorizeRequest|array $request,
    ): \Stytch\Consumer\Models\IDP\OAuth\AuthorizeResponse {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->post('/v1/idp/oauth/authorize', $data);
        return \Stytch\Consumer\Models\IDP\OAuth\AuthorizeResponse::fromArray($response);
    }

    /**
    * Completes a request for authorization of a Connected App to access a User's account.
    *
    * Call this endpoint using the query parameters from an OAuth Authorization request, after previously
    * validating those parameters using the
    * [Preflight Check](https://stytch.com/docs/api/connected-apps-oauth-authorize-start) API.
    * Note that this endpoint takes in a few additional parameters the preflight check does not- `state`,
    * `nonce`, and `code_challenge`.
    *
    * If the authorization was successful, the `redirect_uri` will contain a valid `authorization_code`
    * embedded as a query parameter.
    * If the authorization was unsuccessful, the `redirect_uri` will contain an OAuth2.1 `error_code`.
    * In both cases, redirect the user to the location for the response to be consumed by the Connected App.
    *
    * Exactly one of the following must be provided to identify the user granting authorization:
    * - `user_id`
    * - `session_token`
    * - `session_jwt`
    *
    * If a `session_token` or `session_jwt` is passed, the OAuth Authorization will be linked to the user's
    * session for tracking purposes.
    * One of these fields must be used if the Connected App intends to complete the
    * [Exchange Access Token](https://stytch.com/docs/api/connected-app-access-token-exchange) flow.

     * @param \Stytch\Consumer\Models\IDP\OAuth\AuthorizeRequest|array $request
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authorizeAsync(
        \Stytch\Consumer\Models\IDP\OAuth\AuthorizeRequest|array $request,
    ): \GuzzleHttp\Promise\PromiseInterface {
        $data = is_array($request) ? $request : $request->toArray();
        $promise = $this->client->postAsync('/v1/idp/oauth/authorize', $data);
        return $promise->then(function ($response) {
            return \Stytch\Consumer\Models\IDP\OAuth\AuthorizeResponse::fromArray($response);
        });
    }

}
