<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Api;

use Stytch\Core\Client;

class Users
{
    private Client $client;


    public function __construct(Client $client)
    {
        $this->client = $client;

    }

    /**
        * Add a User to Stytch. A `user_id` is returned in the response that can then be used to perform other
        * operations within Stytch. An `email` or a `phone_number` is required.

         * @param \Stytch\Consumer\Models\Users\CreateRequest|array $request
         * @return \Stytch\Consumer\Models\Users\CreateResponse
         */
    public function create(\Stytch\Consumer\Models\Users\CreateRequest|array $request): \Stytch\Consumer\Models\Users\CreateResponse
    {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->post('/v1/users', $data);
        return \Stytch\Consumer\Models\Users\CreateResponse::fromArray($response);
    }

    /**
        * Get information about a specific User.

         * @param \Stytch\Consumer\Models\Users\GetRequest|array $request
         * @return \Stytch\Consumer\Models\Users\GetResponse
         */
    public function get(\Stytch\Consumer\Models\Users\GetRequest|array $request): \Stytch\Consumer\Models\Users\GetResponse
    {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->get('/v1/users/{user_id}', $data);
        return \Stytch\Consumer\Models\Users\GetResponse::fromArray($response);
    }

    /**
        * Search for Users within your Stytch Project.
        *
        * Use the `query` object to filter by different fields. See the `query.operands.filter_value`
        * documentation below for a list of available filters.
        *
        * ### Export all User data
        *
        * Submit an empty `query` in your Search Users request to return all of your Stytch Project's Users.
        *
        * [This Github repository](https://github.com/stytchauth/stytch-node-export-users) contains a utility that
        * leverages the Search Users endpoint to export all of your User data to a CSV or JSON file.

         * @param \Stytch\Consumer\Models\Users\SearchRequest|array $request
         * @return \Stytch\Consumer\Models\Users\SearchResponse
         */
    public function search(\Stytch\Consumer\Models\Users\SearchRequest|array $request): \Stytch\Consumer\Models\Users\SearchResponse
    {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->post('/v1/users/search', $data);
        return \Stytch\Consumer\Models\Users\SearchResponse::fromArray($response);
    }

    /**
        * Update a User's attributes.
        *
        * **Note:** In order to add a new email address or phone number to an existing User object, pass the new
        * email address or phone number into the respective `/send` endpoint for the authentication method of your
        * choice. If you specify the existing User's `user_id` while calling the `/send` endpoint, the new,
        * unverified email address or phone number will be added to the existing User object. If the user
        * successfully authenticates within 5 minutes of the `/send` request, the new email address or phone
        * number will be marked as verified and remain permanently on the existing Stytch User. Otherwise, it will
        * be removed from the User object, and any subsequent login requests using that phone number will create a
        * new User. We require this process to guard against an account takeover vulnerability.

         * @param \Stytch\Consumer\Models\Users\UpdateRequest|array $request
         * @return \Stytch\Consumer\Models\Users\UpdateResponse
         */
    public function update(\Stytch\Consumer\Models\Users\UpdateRequest|array $request): \Stytch\Consumer\Models\Users\UpdateResponse
    {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->put('/v1/users/{user_id}', $data);
        return \Stytch\Consumer\Models\Users\UpdateResponse::fromArray($response);
    }

    /**
        * Exchange a user's email address or phone number for another.
        *
        * Must pass either an `email_address` or a `phone_number`.
        *
        * This endpoint only works if the user has exactly one factor. You are able to exchange the type of factor
        * for another as well, i.e. exchange an `email_address` for a `phone_number`.
        *
        * Use this endpoint with caution as it performs an admin level action.

         * @param \Stytch\Consumer\Models\Users\ExchangePrimaryFactorRequest|array $request
         * @return \Stytch\Consumer\Models\Users\ExchangePrimaryFactorResponse
         */
    public function exchangePrimaryFactor(\Stytch\Consumer\Models\Users\ExchangePrimaryFactorRequest|array $request): \Stytch\Consumer\Models\Users\ExchangePrimaryFactorResponse
    {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->put('/v1/users/{user_id}/exchange_primary_factor', $data);
        return \Stytch\Consumer\Models\Users\ExchangePrimaryFactorResponse::fromArray($response);
    }

    /**
        * Delete a User from Stytch.

         * @param \Stytch\Consumer\Models\Users\DeleteRequest|array $request
         * @return \Stytch\Consumer\Models\Users\DeleteResponse
         */
    public function delete(\Stytch\Consumer\Models\Users\DeleteRequest|array $request): \Stytch\Consumer\Models\Users\DeleteResponse
    {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->delete('/v1/users/{user_id}', $data);
        return \Stytch\Consumer\Models\Users\DeleteResponse::fromArray($response);
    }

    /**
        * Delete an email from a User.

         * @param \Stytch\Consumer\Models\Users\DeleteEmailRequest|array $request
         * @return \Stytch\Consumer\Models\Users\DeleteEmailResponse
         */
    public function deleteEmail(\Stytch\Consumer\Models\Users\DeleteEmailRequest|array $request): \Stytch\Consumer\Models\Users\DeleteEmailResponse
    {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->delete('/v1/users/emails/{email_id}', $data);
        return \Stytch\Consumer\Models\Users\DeleteEmailResponse::fromArray($response);
    }

    /**
        * Delete a phone number from a User.

         * @param \Stytch\Consumer\Models\Users\DeletePhoneNumberRequest|array $request
         * @return \Stytch\Consumer\Models\Users\DeletePhoneNumberResponse
         */
    public function deletePhoneNumber(\Stytch\Consumer\Models\Users\DeletePhoneNumberRequest|array $request): \Stytch\Consumer\Models\Users\DeletePhoneNumberResponse
    {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->delete('/v1/users/phone_numbers/{phone_id}', $data);
        return \Stytch\Consumer\Models\Users\DeletePhoneNumberResponse::fromArray($response);
    }

    /**
        * Delete a WebAuthn registration from a User.

         * @param \Stytch\Consumer\Models\Users\DeleteWebAuthnRegistrationRequest|array $request
         * @return \Stytch\Consumer\Models\Users\DeleteWebAuthnRegistrationResponse
         */
    public function deleteWebAuthnRegistration(\Stytch\Consumer\Models\Users\DeleteWebAuthnRegistrationRequest|array $request): \Stytch\Consumer\Models\Users\DeleteWebAuthnRegistrationResponse
    {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->delete('/v1/users/webauthn_registrations/{webauthn_registration_id}', $data);
        return \Stytch\Consumer\Models\Users\DeleteWebAuthnRegistrationResponse::fromArray($response);
    }

    /**
        * Delete a biometric registration from a User.

         * @param \Stytch\Consumer\Models\Users\DeleteBiometricRegistrationRequest|array $request
         * @return \Stytch\Consumer\Models\Users\DeleteBiometricRegistrationResponse
         */
    public function deleteBiometricRegistration(\Stytch\Consumer\Models\Users\DeleteBiometricRegistrationRequest|array $request): \Stytch\Consumer\Models\Users\DeleteBiometricRegistrationResponse
    {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->delete('/v1/users/biometric_registrations/{biometric_registration_id}', $data);
        return \Stytch\Consumer\Models\Users\DeleteBiometricRegistrationResponse::fromArray($response);
    }

    /**
        * Delete a TOTP from a User.

         * @param \Stytch\Consumer\Models\Users\DeleteTOTPRequest|array $request
         * @return \Stytch\Consumer\Models\Users\DeleteTOTPResponse
         */
    public function deleteTOTP(\Stytch\Consumer\Models\Users\DeleteTOTPRequest|array $request): \Stytch\Consumer\Models\Users\DeleteTOTPResponse
    {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->delete('/v1/users/totps/{totp_id}', $data);
        return \Stytch\Consumer\Models\Users\DeleteTOTPResponse::fromArray($response);
    }

    /**
        * Delete a crypto wallet from a User.

         * @param \Stytch\Consumer\Models\Users\DeleteCryptoWalletRequest|array $request
         * @return \Stytch\Consumer\Models\Users\DeleteCryptoWalletResponse
         */
    public function deleteCryptoWallet(\Stytch\Consumer\Models\Users\DeleteCryptoWalletRequest|array $request): \Stytch\Consumer\Models\Users\DeleteCryptoWalletResponse
    {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->delete('/v1/users/crypto_wallets/{crypto_wallet_id}', $data);
        return \Stytch\Consumer\Models\Users\DeleteCryptoWalletResponse::fromArray($response);
    }

    /**
        * Delete a password from a User.

         * @param \Stytch\Consumer\Models\Users\DeletePasswordRequest|array $request
         * @return \Stytch\Consumer\Models\Users\DeletePasswordResponse
         */
    public function deletePassword(\Stytch\Consumer\Models\Users\DeletePasswordRequest|array $request): \Stytch\Consumer\Models\Users\DeletePasswordResponse
    {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->delete('/v1/users/passwords/{password_id}', $data);
        return \Stytch\Consumer\Models\Users\DeletePasswordResponse::fromArray($response);
    }

    /**
        * Delete an OAuth registration from a User.

         * @param \Stytch\Consumer\Models\Users\DeleteOAuthRegistrationRequest|array $request
         * @return \Stytch\Consumer\Models\Users\DeleteOAuthRegistrationResponse
         */
    public function deleteOAuthRegistration(\Stytch\Consumer\Models\Users\DeleteOAuthRegistrationRequest|array $request): \Stytch\Consumer\Models\Users\DeleteOAuthRegistrationResponse
    {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->delete('/v1/users/oauth/{oauth_user_registration_id}', $data);
        return \Stytch\Consumer\Models\Users\DeleteOAuthRegistrationResponse::fromArray($response);
    }

    /**
        * User Get Connected Apps retrieves a list of Connected Apps with which the User has successfully
        * completed an
        * authorization flow.
        * If the User revokes a Connected App's access (e.g. via the Revoke Connected App endpoint) then the
        * Connected App will
        * no longer be returned in the response.

         * @param \Stytch\Consumer\Models\Users\ConnectedAppsRequest|array $request
         * @return \Stytch\Consumer\Models\Users\ConnectedAppsResponse
         */
    public function connectedApps(\Stytch\Consumer\Models\Users\ConnectedAppsRequest|array $request): \Stytch\Consumer\Models\Users\ConnectedAppsResponse
    {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->get('/v1/users/{user_id}/connected_apps', $data);
        return \Stytch\Consumer\Models\Users\ConnectedAppsResponse::fromArray($response);
    }

    /**
        * Revoke Connected App revokes a Connected App's access to a User and revokes all active tokens that have
        * been created
        * on the User's behalf. New tokens cannot be created until the User completes a new authorization flow
        * with the
        * Connected App.

         * @param \Stytch\Consumer\Models\Users\RevokeRequest|array $request
         * @return \Stytch\Consumer\Models\Users\RevokeResponse
         */
    public function revoke(\Stytch\Consumer\Models\Users\RevokeRequest|array $request): \Stytch\Consumer\Models\Users\RevokeResponse
    {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->post('/v1/users/{user_id}/connected_apps/{connected_app_id}/revoke', $data);
        return \Stytch\Consumer\Models\Users\RevokeResponse::fromArray($response);
    }

}
