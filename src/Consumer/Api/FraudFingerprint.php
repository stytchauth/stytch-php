<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Api;

use Stytch\Core\Client;

class FraudFingerprint
{
    private Client $client;


    public function __construct(Client $client)
    {
        $this->client = $client;

    }

    /**
        * Lookup the associated fingerprint for the `telemetry_id` returned from the `GetTelemetryID()` function.
        * Learn more about the different fingerprint types and verdicts in our
        * [DFP guide](https://stytch.com/docs/fraud/guides/device-fingerprinting/overview).
        *
        * You can make a decision based on the recommended `verdict` in the response:
        * * `ALLOW` - This is a known valid device grouping or device profile that is part of the default `ALLOW`
        * listed set of known devices by Stytch. This grouping is made up of  verified device profiles that match
        * the characteristics of known/authentic traffic origins.
        * * `BLOCK` - This is a known bad or malicious device profile that is undesirable and should be blocked
        * from completing the privileged action in question.
        * * `CHALLENGE` - This is an unknown or potentially malicious device that should be put through increased
        * friction such as 2FA or other forms of extended user verification before allowing the privileged action
        * to proceed.
        *
        * If the `telemetry_id` is expired or not found, this endpoint returns a 404 `telemetry_id_not_found`
        * [error](https://stytch.com/docs/fraud/api/errors/404#telemetry_id_not_found).
        * We recommend treating 404 errors as a `BLOCK`, since it could be a sign of an attacker trying to bypass
        * DFP protections.
        * See
        * [Attacker-controlled telemetry IDs](https://stytch.com/docs/fraud/guides/device-fingerprinting/integration-steps/test-your-integration#attacker-controlled-telemetry-ids) for more information.

         * @param \Stytch\Consumer\Models\Fraud\Fingerprint\LookupRequest|array $request
         * @return \Stytch\Consumer\Models\Fraud\Fingerprint\LookupResponse
         */
    public function lookup(
        \Stytch\Consumer\Models\Fraud\Fingerprint\LookupRequest|array $request,
    ): \Stytch\Consumer\Models\Fraud\Fingerprint\LookupResponse {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->post('/v1/fingerprint/lookup', $data);
        return \Stytch\Consumer\Models\Fraud\Fingerprint\LookupResponse::fromArray($response);
    }

    /**
    * Lookup the associated fingerprint for the `telemetry_id` returned from the `GetTelemetryID()` function.
    * Learn more about the different fingerprint types and verdicts in our
    * [DFP guide](https://stytch.com/docs/fraud/guides/device-fingerprinting/overview).
    *
    * You can make a decision based on the recommended `verdict` in the response:
    * * `ALLOW` - This is a known valid device grouping or device profile that is part of the default `ALLOW`
    * listed set of known devices by Stytch. This grouping is made up of  verified device profiles that match
    * the characteristics of known/authentic traffic origins.
    * * `BLOCK` - This is a known bad or malicious device profile that is undesirable and should be blocked
    * from completing the privileged action in question.
    * * `CHALLENGE` - This is an unknown or potentially malicious device that should be put through increased
    * friction such as 2FA or other forms of extended user verification before allowing the privileged action
    * to proceed.
    *
    * If the `telemetry_id` is expired or not found, this endpoint returns a 404 `telemetry_id_not_found`
    * [error](https://stytch.com/docs/fraud/api/errors/404#telemetry_id_not_found).
    * We recommend treating 404 errors as a `BLOCK`, since it could be a sign of an attacker trying to bypass
    * DFP protections.
    * See
    * [Attacker-controlled telemetry IDs](https://stytch.com/docs/fraud/guides/device-fingerprinting/integration-steps/test-your-integration#attacker-controlled-telemetry-ids) for more information.

     * @param \Stytch\Consumer\Models\Fraud\Fingerprint\LookupRequest|array $request
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function lookupAsync(
        \Stytch\Consumer\Models\Fraud\Fingerprint\LookupRequest|array $request,
    ): \GuzzleHttp\Promise\PromiseInterface {
        $data = is_array($request) ? $request : $request->toArray();
        $promise = $this->client->postAsync('/v1/fingerprint/lookup', $data);
        return $promise->then(function ($response) {
            return \Stytch\Consumer\Models\Fraud\Fingerprint\LookupResponse::fromArray($response);
        });
    }

}
