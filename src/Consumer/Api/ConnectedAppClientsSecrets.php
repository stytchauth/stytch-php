<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Api;

use Stytch\Core\Client;

class ConnectedAppClientsSecrets
{
    private Client $client;


    public function __construct(Client $client)
    {
        $this->client = $client;

    }

/**
    * Initiate the rotation of a Connected App client secret. After this endpoint is called, both the client's
    * `client_secret` and `next_client_secret` will be valid. To complete the secret rotation flow, update all
    * usages of `client_secret` to `next_client_secret` and call the Rotate Secret Endpoint to complete the
    * flow.
    * Secret rotation can be cancelled using the Cancel Secret Rotation endpoint.
    * 
    * **Important:** This is the only time you will be able to view the generated `next_client_secret` in the
    * API response. Stytch stores a hash of the `next_client_secret` and cannot recover the value if lost. Be
    * sure to persist the `next_client_secret` in a secure location. If the `next_client_secret` is lost, you
    * will need to trigger a secret rotation flow to receive another one.

     * @param \Stytch\Consumer\Models\ConnectedApp\Clients\Secrets\RotateStartRequest|array $request
     * @return \Stytch\Consumer\Models\ConnectedApp\Clients\Secrets\RotateStartResponse
     */
    public function rotateStart(
        \Stytch\Consumer\Models\ConnectedApp\Clients\Secrets\RotateStartRequest|array $request,
    ): \Stytch\Consumer\Models\ConnectedApp\Clients\Secrets\RotateStartResponse {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->post('/v1/connected_apps/clients/{client_id}/secrets/rotate/start', $data);
        return \Stytch\Consumer\Models\ConnectedApp\Clients\Secrets\RotateStartResponse::fromArray($response);
    }

    /**
    * Initiate the rotation of a Connected App client secret. After this endpoint is called, both the client's
    * `client_secret` and `next_client_secret` will be valid. To complete the secret rotation flow, update all
    * usages of `client_secret` to `next_client_secret` and call the Rotate Secret Endpoint to complete the
    * flow.
    * Secret rotation can be cancelled using the Cancel Secret Rotation endpoint.
    * 
    * **Important:** This is the only time you will be able to view the generated `next_client_secret` in the
    * API response. Stytch stores a hash of the `next_client_secret` and cannot recover the value if lost. Be
    * sure to persist the `next_client_secret` in a secure location. If the `next_client_secret` is lost, you
    * will need to trigger a secret rotation flow to receive another one.

     * @param \Stytch\Consumer\Models\ConnectedApp\Clients\Secrets\RotateStartRequest|array $request
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rotateStartAsync(
        \Stytch\Consumer\Models\ConnectedApp\Clients\Secrets\RotateStartRequest|array $request,
    ): \GuzzleHttp\Promise\PromiseInterface {
        $data = is_array($request) ? $request : $request->toArray();
        $promise = $this->client->postAsync('/v1/connected_apps/clients/{client_id}/secrets/rotate/start', $data);
        return $promise->then(function ($response) {
            return \Stytch\Consumer\Models\ConnectedApp\Clients\Secrets\RotateStartResponse::fromArray($response);
        });
    }

/**
    * Cancel the rotation of a Connected App client secret started with the Start Secret Rotation Endpoint.
    * After this endpoint is called, the client's `next_client_secret` is discarded and only the original
    * `client_secret` will be valid.

     * @param \Stytch\Consumer\Models\ConnectedApp\Clients\Secrets\RotateCancelRequest|array $request
     * @return \Stytch\Consumer\Models\ConnectedApp\Clients\Secrets\RotateCancelResponse
     */
    public function rotateCancel(
        \Stytch\Consumer\Models\ConnectedApp\Clients\Secrets\RotateCancelRequest|array $request,
    ): \Stytch\Consumer\Models\ConnectedApp\Clients\Secrets\RotateCancelResponse {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->post('/v1/connected_apps/clients/{client_id}/secrets/rotate/cancel', $data);
        return \Stytch\Consumer\Models\ConnectedApp\Clients\Secrets\RotateCancelResponse::fromArray($response);
    }

    /**
    * Cancel the rotation of a Connected App client secret started with the Start Secret Rotation Endpoint.
    * After this endpoint is called, the client's `next_client_secret` is discarded and only the original
    * `client_secret` will be valid.

     * @param \Stytch\Consumer\Models\ConnectedApp\Clients\Secrets\RotateCancelRequest|array $request
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rotateCancelAsync(
        \Stytch\Consumer\Models\ConnectedApp\Clients\Secrets\RotateCancelRequest|array $request,
    ): \GuzzleHttp\Promise\PromiseInterface {
        $data = is_array($request) ? $request : $request->toArray();
        $promise = $this->client->postAsync('/v1/connected_apps/clients/{client_id}/secrets/rotate/cancel', $data);
        return $promise->then(function ($response) {
            return \Stytch\Consumer\Models\ConnectedApp\Clients\Secrets\RotateCancelResponse::fromArray($response);
        });
    }

/**
    * Complete the rotation of a Connected App client secret started with the Rotate Secret Start Endpoint.
    * After this endpoint is called, the client's `next_client_secret` becomes its `client_secret` and the
    * previous `client_secret` will no longer be valid.

     * @param \Stytch\Consumer\Models\ConnectedApp\Clients\Secrets\RotateRequest|array $request
     * @return \Stytch\Consumer\Models\ConnectedApp\Clients\Secrets\RotateResponse
     */
    public function rotate(
        \Stytch\Consumer\Models\ConnectedApp\Clients\Secrets\RotateRequest|array $request,
    ): \Stytch\Consumer\Models\ConnectedApp\Clients\Secrets\RotateResponse {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->post('/v1/connected_apps/clients/{client_id}/secrets/rotate', $data);
        return \Stytch\Consumer\Models\ConnectedApp\Clients\Secrets\RotateResponse::fromArray($response);
    }

    /**
    * Complete the rotation of a Connected App client secret started with the Rotate Secret Start Endpoint.
    * After this endpoint is called, the client's `next_client_secret` becomes its `client_secret` and the
    * previous `client_secret` will no longer be valid.

     * @param \Stytch\Consumer\Models\ConnectedApp\Clients\Secrets\RotateRequest|array $request
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rotateAsync(
        \Stytch\Consumer\Models\ConnectedApp\Clients\Secrets\RotateRequest|array $request,
    ): \GuzzleHttp\Promise\PromiseInterface {
        $data = is_array($request) ? $request : $request->toArray();
        $promise = $this->client->postAsync('/v1/connected_apps/clients/{client_id}/secrets/rotate', $data);
        return $promise->then(function ($response) {
            return \Stytch\Consumer\Models\ConnectedApp\Clients\Secrets\RotateResponse::fromArray($response);
        });
    }

}
