<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Api;

use Stytch\Core\Client;

class MagicLinksEmail
{
    private Client $client;


    public function __construct(Client $client)
    {
        $this->client = $client;

    }

    /**
        * Send a magic link to an existing Stytch user using their email address. If you'd like to create a user
        * and send them a magic link by email with one request, use our
        * [log in or create endpoint](https://stytch.com/docs/api/log-in-or-create-user-by-email).
        *
        * ### Add an email to an existing user
        * This endpoint also allows you to add a new email address to an existing Stytch User. Including a
        * `user_id`, `session_token`, or `session_jwt` in your Send Magic Link by email request will add the new,
        * unverified email address to the existing Stytch User. If the user successfully authenticates within 5
        * minutes, the new email address will be marked as verified and remain permanently on the existing Stytch
        * User. Otherwise, it will be removed from the User object, and any subsequent login requests using that
        * email address will create a new User.
        *
        * ### Next steps
        * The user is emailed a magic link which redirects them to the provided
        * [redirect URL](https://stytch.com/docs/guides/magic-links/email-magic-links/redirect-routing). Collect
        * the `token` from the URL query parameters, and call
        * [Authenticate magic link](https://stytch.com/docs/api/authenticate-magic-link) to complete
        * authentication.

         * @param \Stytch\Consumer\Models\MagicLinks\Email\SendRequest|array $request
         * @return \Stytch\Consumer\Models\MagicLinks\Email\SendResponse
         */
    public function send(
        \Stytch\Consumer\Models\MagicLinks\Email\SendRequest|array $request,
    ): \Stytch\Consumer\Models\MagicLinks\Email\SendResponse {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->post('/v1/magic_links/email/send', $data);
        return \Stytch\Consumer\Models\MagicLinks\Email\SendResponse::fromArray($response);
    }

    /**
        * Send either a login or signup Magic Link to the User based on if the email is associated with a User
        * already. A new or pending User will receive a signup Magic Link. An active User will receive a login
        * Magic Link. For more information on how to control the status your Users are created in see the
        * `create_user_as_pending` flag.
        *
        * ### Next steps
        * The User is emailed a Magic Link which redirects them to the provided
        * [redirect URL](https://stytch.com/docs/guides/magic-links/email-magic-links/redirect-routing). Collect
        * the `token` from the URL query parameters and call
        * [Authenticate Magic Link](https://stytch.com/docs/api/authenticate-magic-link) to complete
        * authentication.

         * @param \Stytch\Consumer\Models\MagicLinks\Email\LoginOrCreateRequest|array $request
         * @return \Stytch\Consumer\Models\MagicLinks\Email\LoginOrCreateResponse
         */
    public function loginOrCreate(
        \Stytch\Consumer\Models\MagicLinks\Email\LoginOrCreateRequest|array $request,
    ): \Stytch\Consumer\Models\MagicLinks\Email\LoginOrCreateResponse {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->post('/v1/magic_links/email/login_or_create', $data);
        return \Stytch\Consumer\Models\MagicLinks\Email\LoginOrCreateResponse::fromArray($response);
    }

    /**
        * Create a User and send an invite Magic Link to the provided `email`. The User will be created with a
        * `pending` status until they click the Magic Link in the invite email.
        *
        * ### Next steps
        * The User is emailed a Magic Link which redirects them to the provided
        * [redirect URL](https://stytch.com/docs/guides/magic-links/email-magic-links/redirect-routing). Collect
        * the `token` from the URL query parameters and call
        * [Authenticate Magic Link](https://stytch.com/docs/api/authenticate-magic-link) to complete
        * authentication.

         * @param \Stytch\Consumer\Models\MagicLinks\Email\InviteRequest|array $request
         * @return \Stytch\Consumer\Models\MagicLinks\Email\InviteResponse
         */
    public function invite(
        \Stytch\Consumer\Models\MagicLinks\Email\InviteRequest|array $request,
    ): \Stytch\Consumer\Models\MagicLinks\Email\InviteResponse {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->post('/v1/magic_links/email/invite', $data);
        return \Stytch\Consumer\Models\MagicLinks\Email\InviteResponse::fromArray($response);
    }

    /**
        * Revoke a pending invite based on the `email` provided.

         * @param \Stytch\Consumer\Models\MagicLinks\Email\RevokeInviteRequest|array $request
         * @return \Stytch\Consumer\Models\MagicLinks\Email\RevokeInviteResponse
         */
    public function revokeInvite(
        \Stytch\Consumer\Models\MagicLinks\Email\RevokeInviteRequest|array $request,
    ): \Stytch\Consumer\Models\MagicLinks\Email\RevokeInviteResponse {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->post('/v1/magic_links/email/revoke_invite', $data);
        return \Stytch\Consumer\Models\MagicLinks\Email\RevokeInviteResponse::fromArray($response);
    }

}
