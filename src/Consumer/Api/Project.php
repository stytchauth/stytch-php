<?php

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

namespace Stytch\Consumer\Api;

use Stytch\Core\Client;

class Project
{
    private Client $client;


    public function __construct(Client $client)
    {
        $this->client = $client;

    }

    /**
         * @param \Stytch\Consumer\Models\Project\MetricsRequest|array $request
         * @return \Stytch\Consumer\Models\Project\MetricsResponse
         */
    public function metrics(
        \Stytch\Consumer\Models\Project\MetricsRequest|array $request,
    ): \Stytch\Consumer\Models\Project\MetricsResponse {
        $data = is_array($request) ? $request : $request->toArray();
        $response = $this->client->get('/v1/projects/metrics', $data);
        return \Stytch\Consumer\Models\Project\MetricsResponse::fromArray($response);
    }

    /**
     * @param \Stytch\Consumer\Models\Project\MetricsRequest|array $request
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function metricsAsync(
        \Stytch\Consumer\Models\Project\MetricsRequest|array $request,
    ): \GuzzleHttp\Promise\PromiseInterface {
        $data = is_array($request) ? $request : $request->toArray();
        $promise = $this->client->getAsync('/v1/projects/metrics', $data);
        return $promise->then(function ($response) {
            return \Stytch\Consumer\Models\Project\MetricsResponse::fromArray($response);
        });
    }

}
